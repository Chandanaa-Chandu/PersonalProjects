/**
 * @brief This is the Bare-Metal Project using FreeRTOS
 *	Using the STM32F407G-DISC1 board with STM32F407VGT6 MCU
 *	This project will toggle the User LED upon the Interrupt generated
 *	using task notification for every 1 second
 *	The interrupt will generate whenever the user push button is pressed.
 *	There are two tasks, One is to generate an interrupt and other is to serve the ISR
 *
 *	User LD3: Orange LED is a user LED connected to the I/O PD13 of the STM32F407VGT6
 *	Pin:  13
 *	Port: D
 *
 *	B1 USER: User Push Button connected to the I/O PA0 of the STM32F407VG
 *	Pin:  0
 *	Port: A
 */

#include "my_tasks.h"

/* Macros for Address */
#define PERIPH_BASE				0x40000000UL

#define AHB1_OFFSET				0x00020000UL

#define AHB1_BASE				(AHB1_OFFSET + PERIPH_BASE)

#define GPIOD_OFFSET			0x0000C00UL

#define GPIOD_BASE				(GPIOD_OFFSET + AHB1_BASE)

#define GPIOA_OFFSET			0x00000000UL

#define GPIOA_BASE				(GPIOA_OFFSET + AHB1_BASE)

#define RCC_OFFSET				0x00003800UL

#define RCC_BASE				(RCC_OFFSET + AHB1_BASE)

#define RCC_AHB1ENR_OFFSET		0x30UL

#define RCC_AHB1ENR_BASE		(RCC_AHB1ENR_OFFSET + RCC_BASE)

#define GPIO_MODER_OFFSET		0x00UL

#define GPIOD_MODER_BASE		(GPIOD_BASE + GPIO_MODER_OFFSET)
#define GPIOA_MODER_BASE		(GPIOA_BASE + GPIO_MODER_OFFSET)

#define GPIO_ODR_OFFSET			0x14UL

#define GPIOD_ODR_BASE			(GPIOD_BASE + GPIO_ODR_OFFSET)
#define GPIOA_ODR_BASE			(GPIOA_BASE + GPIO_ODR_OFFSET)

#define RCC_AHB1ENR				*(volatile unsigned int*)(RCC_AHB1ENR_BASE)

#define GPIOD_MODER				*(volatile unsigned int*)(GPIOD_MODER_BASE)
#define GPIOA_MODER				*(volatile unsigned int*)(GPIOA_MODER_BASE)

#define GPIOD_ODR				*(volatile unsigned int*)(GPIOD_ODR_BASE)
#define GPIOA_ODR				*(volatile unsigned int*)(GPIOA_ODR_BASE)

#define GPIODEN					1U<<3	// Set a 3rd bit in RCC_AHB1ENR to enable GPIOD
#define GPIOAEN					1U<<0	// Set a 0th bit in RCC_AHB1ENR to enable GPIOA

#define BUTTON_PIN				1U<<0	// Set a 0th bit in GPIOA_ODR - User push button
#define LED_PIN					1U<<13	// Set a 13th bit in GPIOD_ODR - User LED

int main()
{
	/* Enable a clock for GPIOD */
	RCC_AHB1ENR |= GPIODEN;

	/* Set the mode of the GPIO Pin13 of PortD to Output */
	GPIOD_MODER |= (1U<<26);
	GPIOD_MODER &= ~(1U<<27);

	/* Set the mode of GPIO Pin0 of PortA to Input */
	GPIOA_MODER &= ~(1U<<0);
	GPIOA_MODER &= ~(1U<<1);

	taskSetup();
	initTasks();
}

void toggleLED(void) {
	/* Toggle a LED for every 1 Second */
	GPIOD_ODR ^= LED_PIN;
}
