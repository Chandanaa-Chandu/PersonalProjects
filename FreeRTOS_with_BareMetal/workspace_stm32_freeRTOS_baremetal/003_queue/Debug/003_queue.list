
003_queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003d10  08003d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e30  08003e30  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e30  08003e30  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e30  08003e30  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00012de8  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e54  20012e54  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006701  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012da  00000000  00000000  0002679d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000688  00000000  00000000  00027a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005e0  00000000  00000000  00028100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025c2  00000000  00000000  000286e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007a91  00000000  00000000  0002aca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0001265f  00000000  00000000  00032733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00044d92  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021d8  00000000  00000000  00044de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003cf8 	.word	0x08003cf8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08003cf8 	.word	0x08003cf8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f103 0208 	add.w	r2, r3, #8
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f04f 32ff 	mov.w	r2, #4294967295
 80002a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f103 0208 	add.w	r2, r3, #8
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f103 0208 	add.w	r2, r3, #8
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80002ea:	b480      	push	{r7}
 80002ec:	b085      	sub	sp, #20
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000300:	d103      	bne.n	800030a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	e00c      	b.n	8000324 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3308      	adds	r3, #8
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	e002      	b.n	8000318 <vListInsert+0x2e>
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	429a      	cmp	r2, r3
 8000322:	d2f6      	bcs.n	8000312 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	683a      	ldr	r2, [r7, #0]
 8000332:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	683a      	ldr	r2, [r7, #0]
 800033e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	1c5a      	adds	r2, r3, #1
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	601a      	str	r2, [r3, #0]
}
 8000350:	bf00      	nop
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	691b      	ldr	r3, [r3, #16]
 8000368:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	6892      	ldr	r2, [r2, #8]
 8000372:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	6852      	ldr	r2, [r2, #4]
 800037c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	429a      	cmp	r2, r3
 8000386:	d103      	bne.n	8000390 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689a      	ldr	r2, [r3, #8]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	1e5a      	subs	r2, r3, #1
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	681b      	ldr	r3, [r3, #0]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	3714      	adds	r7, #20
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80003ba:	2301      	movs	r3, #1
 80003bc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d10a      	bne.n	80003de <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80003c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003cc:	f383 8811 	msr	BASEPRI, r3
 80003d0:	f3bf 8f6f 	isb	sy
 80003d4:	f3bf 8f4f 	dsb	sy
 80003d8:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80003da:	bf00      	nop
 80003dc:	e7fe      	b.n	80003dc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d05d      	beq.n	80004a0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d059      	beq.n	80004a0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003f4:	2100      	movs	r1, #0
 80003f6:	fba3 2302 	umull	r2, r3, r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d000      	beq.n	8000400 <xQueueGenericReset+0x50>
 80003fe:	2101      	movs	r1, #1
 8000400:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000402:	2b00      	cmp	r3, #0
 8000404:	d14c      	bne.n	80004a0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000406:	f002 f82f 	bl	8002468 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000412:	6939      	ldr	r1, [r7, #16]
 8000414:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000416:	fb01 f303 	mul.w	r3, r1, r3
 800041a:	441a      	add	r2, r3
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	2200      	movs	r2, #0
 8000424:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000436:	3b01      	subs	r3, #1
 8000438:	6939      	ldr	r1, [r7, #16]
 800043a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800043c:	fb01 f303 	mul.w	r3, r1, r3
 8000440:	441a      	add	r2, r3
 8000442:	693b      	ldr	r3, [r7, #16]
 8000444:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000446:	693b      	ldr	r3, [r7, #16]
 8000448:	22ff      	movs	r2, #255	; 0xff
 800044a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	22ff      	movs	r2, #255	; 0xff
 8000452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d114      	bne.n	8000486 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800045c:	693b      	ldr	r3, [r7, #16]
 800045e:	691b      	ldr	r3, [r3, #16]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d01a      	beq.n	800049a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000464:	693b      	ldr	r3, [r7, #16]
 8000466:	3310      	adds	r3, #16
 8000468:	4618      	mov	r0, r3
 800046a:	f001 f8f9 	bl	8001660 <xTaskRemoveFromEventList>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d012      	beq.n	800049a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <xQueueGenericReset+0x11c>)
 8000476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	f3bf 8f4f 	dsb	sy
 8000480:	f3bf 8f6f 	isb	sy
 8000484:	e009      	b.n	800049a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	3310      	adds	r3, #16
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ff00 	bl	8000290 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000490:	693b      	ldr	r3, [r7, #16]
 8000492:	3324      	adds	r3, #36	; 0x24
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff fefb 	bl	8000290 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800049a:	f002 f815 	bl	80024c8 <vPortExitCritical>
 800049e:	e001      	b.n	80004a4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d10a      	bne.n	80004c0 <xQueueGenericReset+0x110>
        __asm volatile
 80004aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004ae:	f383 8811 	msr	BASEPRI, r3
 80004b2:	f3bf 8f6f 	isb	sy
 80004b6:	f3bf 8f4f 	dsb	sy
 80004ba:	60bb      	str	r3, [r7, #8]
    }
 80004bc:	bf00      	nop
 80004be:	e7fe      	b.n	80004be <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80004c0:	697b      	ldr	r3, [r7, #20]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3718      	adds	r7, #24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	e000ed04 	.word	0xe000ed04

080004d0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	4613      	mov	r3, r2
 80004dc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d02e      	beq.n	8000546 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004e8:	2100      	movs	r1, #0
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	fba3 2302 	umull	r2, r3, r3, r2
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d000      	beq.n	80004f8 <xQueueGenericCreate+0x28>
 80004f6:	2101      	movs	r1, #1
 80004f8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d123      	bne.n	8000546 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000506:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800050a:	d81c      	bhi.n	8000546 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	68ba      	ldr	r2, [r7, #8]
 8000510:	fb02 f303 	mul.w	r3, r2, r3
 8000514:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000516:	69bb      	ldr	r3, [r7, #24]
 8000518:	3350      	adds	r3, #80	; 0x50
 800051a:	4618      	mov	r0, r3
 800051c:	f002 f87c 	bl	8002618 <pvPortMalloc>
 8000520:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d01c      	beq.n	8000562 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	3350      	adds	r3, #80	; 0x50
 8000530:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000532:	79fa      	ldrb	r2, [r7, #7]
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	4613      	mov	r3, r2
 800053a:	697a      	ldr	r2, [r7, #20]
 800053c:	68b9      	ldr	r1, [r7, #8]
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	f000 f814 	bl	800056c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000544:	e00d      	b.n	8000562 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d10a      	bne.n	8000562 <xQueueGenericCreate+0x92>
        __asm volatile
 800054c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000550:	f383 8811 	msr	BASEPRI, r3
 8000554:	f3bf 8f6f 	isb	sy
 8000558:	f3bf 8f4f 	dsb	sy
 800055c:	613b      	str	r3, [r7, #16]
    }
 800055e:	bf00      	nop
 8000560:	e7fe      	b.n	8000560 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000562:	69fb      	ldr	r3, [r7, #28]
    }
 8000564:	4618      	mov	r0, r3
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
 8000578:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d103      	bne.n	8000588 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000580:	69bb      	ldr	r3, [r7, #24]
 8000582:	69ba      	ldr	r2, [r7, #24]
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	e002      	b.n	800058e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800059a:	2101      	movs	r1, #1
 800059c:	69b8      	ldr	r0, [r7, #24]
 800059e:	f7ff ff07 	bl	80003b0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80005a2:	69bb      	ldr	r3, [r7, #24]
 80005a4:	78fa      	ldrb	r2, [r7, #3]
 80005a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08e      	sub	sp, #56	; 0x38
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80005c2:	2300      	movs	r3, #0
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80005ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d10a      	bne.n	80005e6 <xQueueGenericSend+0x32>
        __asm volatile
 80005d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d4:	f383 8811 	msr	BASEPRI, r3
 80005d8:	f3bf 8f6f 	isb	sy
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80005e2:	bf00      	nop
 80005e4:	e7fe      	b.n	80005e4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d103      	bne.n	80005f4 <xQueueGenericSend+0x40>
 80005ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d101      	bne.n	80005f8 <xQueueGenericSend+0x44>
 80005f4:	2301      	movs	r3, #1
 80005f6:	e000      	b.n	80005fa <xQueueGenericSend+0x46>
 80005f8:	2300      	movs	r3, #0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d10a      	bne.n	8000614 <xQueueGenericSend+0x60>
        __asm volatile
 80005fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000602:	f383 8811 	msr	BASEPRI, r3
 8000606:	f3bf 8f6f 	isb	sy
 800060a:	f3bf 8f4f 	dsb	sy
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000610:	bf00      	nop
 8000612:	e7fe      	b.n	8000612 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d103      	bne.n	8000622 <xQueueGenericSend+0x6e>
 800061a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800061e:	2b01      	cmp	r3, #1
 8000620:	d101      	bne.n	8000626 <xQueueGenericSend+0x72>
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <xQueueGenericSend+0x74>
 8000626:	2300      	movs	r3, #0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d10a      	bne.n	8000642 <xQueueGenericSend+0x8e>
        __asm volatile
 800062c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000630:	f383 8811 	msr	BASEPRI, r3
 8000634:	f3bf 8f6f 	isb	sy
 8000638:	f3bf 8f4f 	dsb	sy
 800063c:	623b      	str	r3, [r7, #32]
    }
 800063e:	bf00      	nop
 8000640:	e7fe      	b.n	8000640 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000642:	f001 fa1d 	bl	8001a80 <xTaskGetSchedulerState>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d102      	bne.n	8000652 <xQueueGenericSend+0x9e>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <xQueueGenericSend+0xa2>
 8000652:	2301      	movs	r3, #1
 8000654:	e000      	b.n	8000658 <xQueueGenericSend+0xa4>
 8000656:	2300      	movs	r3, #0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10a      	bne.n	8000672 <xQueueGenericSend+0xbe>
        __asm volatile
 800065c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000660:	f383 8811 	msr	BASEPRI, r3
 8000664:	f3bf 8f6f 	isb	sy
 8000668:	f3bf 8f4f 	dsb	sy
 800066c:	61fb      	str	r3, [r7, #28]
    }
 800066e:	bf00      	nop
 8000670:	e7fe      	b.n	8000670 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000672:	f001 fef9 	bl	8002468 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800067a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800067c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800067e:	429a      	cmp	r2, r3
 8000680:	d302      	bcc.n	8000688 <xQueueGenericSend+0xd4>
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d129      	bne.n	80006dc <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000688:	683a      	ldr	r2, [r7, #0]
 800068a:	68b9      	ldr	r1, [r7, #8]
 800068c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800068e:	f000 f96f 	bl	8000970 <prvCopyDataToQueue>
 8000692:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000698:	2b00      	cmp	r3, #0
 800069a:	d010      	beq.n	80006be <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800069c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800069e:	3324      	adds	r3, #36	; 0x24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 ffdd 	bl	8001660 <xTaskRemoveFromEventList>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d013      	beq.n	80006d4 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80006ac:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <xQueueGenericSend+0x1f8>)
 80006ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	f3bf 8f4f 	dsb	sy
 80006b8:	f3bf 8f6f 	isb	sy
 80006bc:	e00a      	b.n	80006d4 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80006be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d007      	beq.n	80006d4 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80006c4:	4b39      	ldr	r3, [pc, #228]	; (80007ac <xQueueGenericSend+0x1f8>)
 80006c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	f3bf 8f4f 	dsb	sy
 80006d0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80006d4:	f001 fef8 	bl	80024c8 <vPortExitCritical>
                return pdPASS;
 80006d8:	2301      	movs	r3, #1
 80006da:	e063      	b.n	80007a4 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d103      	bne.n	80006ea <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80006e2:	f001 fef1 	bl	80024c8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	e05c      	b.n	80007a4 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80006ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d106      	bne.n	80006fe <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 f889 	bl	800180c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80006fa:	2301      	movs	r3, #1
 80006fc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80006fe:	f001 fee3 	bl	80024c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000702:	f000 fcb7 	bl	8001074 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000706:	f001 feaf 	bl	8002468 <vPortEnterCritical>
 800070a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800070c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000710:	b25b      	sxtb	r3, r3
 8000712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000716:	d103      	bne.n	8000720 <xQueueGenericSend+0x16c>
 8000718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000722:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000726:	b25b      	sxtb	r3, r3
 8000728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800072c:	d103      	bne.n	8000736 <xQueueGenericSend+0x182>
 800072e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000736:	f001 fec7 	bl	80024c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800073a:	1d3a      	adds	r2, r7, #4
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f001 f878 	bl	8001838 <xTaskCheckForTimeOut>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d124      	bne.n	8000798 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800074e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000750:	f000 fa06 	bl	8000b60 <prvIsQueueFull>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d018      	beq.n	800078c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800075a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800075c:	3310      	adds	r3, #16
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f000 ff12 	bl	800158c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800076a:	f000 f991 	bl	8000a90 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800076e:	f000 fc8f 	bl	8001090 <xTaskResumeAll>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	f47f af7c 	bne.w	8000672 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <xQueueGenericSend+0x1f8>)
 800077c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	f3bf 8f4f 	dsb	sy
 8000786:	f3bf 8f6f 	isb	sy
 800078a:	e772      	b.n	8000672 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800078c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800078e:	f000 f97f 	bl	8000a90 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000792:	f000 fc7d 	bl	8001090 <xTaskResumeAll>
 8000796:	e76c      	b.n	8000672 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800079a:	f000 f979 	bl	8000a90 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800079e:	f000 fc77 	bl	8001090 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80007a2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3738      	adds	r7, #56	; 0x38
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	e000ed04 	.word	0xe000ed04

080007b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80007c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d10a      	bne.n	80007e0 <xQueueReceive+0x30>
        __asm volatile
 80007ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ce:	f383 8811 	msr	BASEPRI, r3
 80007d2:	f3bf 8f6f 	isb	sy
 80007d6:	f3bf 8f4f 	dsb	sy
 80007da:	623b      	str	r3, [r7, #32]
    }
 80007dc:	bf00      	nop
 80007de:	e7fe      	b.n	80007de <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d103      	bne.n	80007ee <xQueueReceive+0x3e>
 80007e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d101      	bne.n	80007f2 <xQueueReceive+0x42>
 80007ee:	2301      	movs	r3, #1
 80007f0:	e000      	b.n	80007f4 <xQueueReceive+0x44>
 80007f2:	2300      	movs	r3, #0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10a      	bne.n	800080e <xQueueReceive+0x5e>
        __asm volatile
 80007f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007fc:	f383 8811 	msr	BASEPRI, r3
 8000800:	f3bf 8f6f 	isb	sy
 8000804:	f3bf 8f4f 	dsb	sy
 8000808:	61fb      	str	r3, [r7, #28]
    }
 800080a:	bf00      	nop
 800080c:	e7fe      	b.n	800080c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800080e:	f001 f937 	bl	8001a80 <xTaskGetSchedulerState>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <xQueueReceive+0x6e>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d101      	bne.n	8000822 <xQueueReceive+0x72>
 800081e:	2301      	movs	r3, #1
 8000820:	e000      	b.n	8000824 <xQueueReceive+0x74>
 8000822:	2300      	movs	r3, #0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10a      	bne.n	800083e <xQueueReceive+0x8e>
        __asm volatile
 8000828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800082c:	f383 8811 	msr	BASEPRI, r3
 8000830:	f3bf 8f6f 	isb	sy
 8000834:	f3bf 8f4f 	dsb	sy
 8000838:	61bb      	str	r3, [r7, #24]
    }
 800083a:	bf00      	nop
 800083c:	e7fe      	b.n	800083c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800083e:	f001 fe13 	bl	8002468 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000846:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084a:	2b00      	cmp	r3, #0
 800084c:	d01f      	beq.n	800088e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800084e:	68b9      	ldr	r1, [r7, #8]
 8000850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000852:	f000 f8f7 	bl	8000a44 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	1e5a      	subs	r2, r3, #1
 800085a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800085e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000860:	691b      	ldr	r3, [r3, #16]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00f      	beq.n	8000886 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000868:	3310      	adds	r3, #16
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fef8 	bl	8001660 <xTaskRemoveFromEventList>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d007      	beq.n	8000886 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000876:	4b3d      	ldr	r3, [pc, #244]	; (800096c <xQueueReceive+0x1bc>)
 8000878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	f3bf 8f4f 	dsb	sy
 8000882:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000886:	f001 fe1f 	bl	80024c8 <vPortExitCritical>
                return pdPASS;
 800088a:	2301      	movs	r3, #1
 800088c:	e069      	b.n	8000962 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d103      	bne.n	800089c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000894:	f001 fe18 	bl	80024c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000898:	2300      	movs	r3, #0
 800089a:	e062      	b.n	8000962 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d106      	bne.n	80008b0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 ffb0 	bl	800180c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008ac:	2301      	movs	r3, #1
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80008b0:	f001 fe0a 	bl	80024c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80008b4:	f000 fbde 	bl	8001074 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80008b8:	f001 fdd6 	bl	8002468 <vPortEnterCritical>
 80008bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c8:	d103      	bne.n	80008d2 <xQueueReceive+0x122>
 80008ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80008d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008de:	d103      	bne.n	80008e8 <xQueueReceive+0x138>
 80008e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80008e8:	f001 fdee 	bl	80024c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80008ec:	1d3a      	adds	r2, r7, #4
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 ff9f 	bl	8001838 <xTaskCheckForTimeOut>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d123      	bne.n	8000948 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000902:	f000 f917 	bl	8000b34 <prvIsQueueEmpty>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d017      	beq.n	800093c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	3324      	adds	r3, #36	; 0x24
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fe39 	bl	800158c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800091a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800091c:	f000 f8b8 	bl	8000a90 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000920:	f000 fbb6 	bl	8001090 <xTaskResumeAll>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d189      	bne.n	800083e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <xQueueReceive+0x1bc>)
 800092c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	f3bf 8f4f 	dsb	sy
 8000936:	f3bf 8f6f 	isb	sy
 800093a:	e780      	b.n	800083e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800093c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800093e:	f000 f8a7 	bl	8000a90 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000942:	f000 fba5 	bl	8001090 <xTaskResumeAll>
 8000946:	e77a      	b.n	800083e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800094a:	f000 f8a1 	bl	8000a90 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800094e:	f000 fb9f 	bl	8001090 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000954:	f000 f8ee 	bl	8000b34 <prvIsQueueEmpty>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	f43f af6f 	beq.w	800083e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000960:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000962:	4618      	mov	r0, r3
 8000964:	3730      	adds	r7, #48	; 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	e000ed04 	.word	0xe000ed04

08000970 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000984:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10d      	bne.n	80009aa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d14d      	bne.n	8000a32 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	4618      	mov	r0, r3
 800099c:	f001 f88e 	bl	8001abc <xTaskPriorityDisinherit>
 80009a0:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	e043      	b.n	8000a32 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d119      	bne.n	80009e4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	6858      	ldr	r0, [r3, #4]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	461a      	mov	r2, r3
 80009ba:	68b9      	ldr	r1, [r7, #8]
 80009bc:	f002 f982 	bl	8002cc4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	441a      	add	r2, r3
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	685a      	ldr	r2, [r3, #4]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d32b      	bcc.n	8000a32 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	e026      	b.n	8000a32 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	68d8      	ldr	r0, [r3, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	461a      	mov	r2, r3
 80009ee:	68b9      	ldr	r1, [r7, #8]
 80009f0:	f002 f968 	bl	8002cc4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	425b      	negs	r3, r3
 80009fe:	441a      	add	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	68da      	ldr	r2, [r3, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d207      	bcs.n	8000a20 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	689a      	ldr	r2, [r3, #8]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	425b      	negs	r3, r3
 8000a1a:	441a      	add	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d105      	bne.n	8000a32 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000a3a:	697b      	ldr	r3, [r7, #20]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d018      	beq.n	8000a88 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68da      	ldr	r2, [r3, #12]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	441a      	add	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d303      	bcc.n	8000a78 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68d9      	ldr	r1, [r3, #12]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	461a      	mov	r2, r3
 8000a82:	6838      	ldr	r0, [r7, #0]
 8000a84:	f002 f91e 	bl	8002cc4 <memcpy>
    }
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000a98:	f001 fce6 	bl	8002468 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000aa2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000aa4:	e011      	b.n	8000aca <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d012      	beq.n	8000ad4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3324      	adds	r3, #36	; 0x24
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fdd4 	bl	8001660 <xTaskRemoveFromEventList>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000abe:	f000 ff21 	bl	8001904 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dce9      	bgt.n	8000aa6 <prvUnlockQueue+0x16>
 8000ad2:	e000      	b.n	8000ad6 <prvUnlockQueue+0x46>
                    break;
 8000ad4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	22ff      	movs	r2, #255	; 0xff
 8000ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000ade:	f001 fcf3 	bl	80024c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000ae2:	f001 fcc1 	bl	8002468 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000aec:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000aee:	e011      	b.n	8000b14 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	691b      	ldr	r3, [r3, #16]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d012      	beq.n	8000b1e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3310      	adds	r3, #16
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 fdaf 	bl	8001660 <xTaskRemoveFromEventList>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000b08:	f000 fefc 	bl	8001904 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dce9      	bgt.n	8000af0 <prvUnlockQueue+0x60>
 8000b1c:	e000      	b.n	8000b20 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000b1e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	22ff      	movs	r2, #255	; 0xff
 8000b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000b28:	f001 fcce 	bl	80024c8 <vPortExitCritical>
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000b3c:	f001 fc94 	bl	8002468 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e001      	b.n	8000b52 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000b52:	f001 fcb9 	bl	80024c8 <vPortExitCritical>

    return xReturn;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000b68:	f001 fc7e 	bl	8002468 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d102      	bne.n	8000b7e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	e001      	b.n	8000b82 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000b82:	f001 fca1 	bl	80024c8 <vPortExitCritical>

    return xReturn;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10a      	bne.n	8000bba <vQueueAddToRegistry+0x2a>
        __asm volatile
 8000ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba8:	f383 8811 	msr	BASEPRI, r3
 8000bac:	f3bf 8f6f 	isb	sy
 8000bb0:	f3bf 8f4f 	dsb	sy
 8000bb4:	60fb      	str	r3, [r7, #12]
    }
 8000bb6:	bf00      	nop
 8000bb8:	e7fe      	b.n	8000bb8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d024      	beq.n	8000c0a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e01e      	b.n	8000c04 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000bc6:	4a18      	ldr	r2, [pc, #96]	; (8000c28 <vQueueAddToRegistry+0x98>)
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	4413      	add	r3, r2
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d105      	bne.n	8000be2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <vQueueAddToRegistry+0x98>)
 8000bdc:	4413      	add	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
                    break;
 8000be0:	e013      	b.n	8000c0a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10a      	bne.n	8000bfe <vQueueAddToRegistry+0x6e>
 8000be8:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <vQueueAddToRegistry+0x98>)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d104      	bne.n	8000bfe <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <vQueueAddToRegistry+0x98>)
 8000bfa:	4413      	add	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3301      	adds	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	d9dd      	bls.n	8000bc6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d005      	beq.n	8000c1c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8000c1c:	bf00      	nop
 8000c1e:	371c      	adds	r7, #28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	20000088 	.word	0x20000088

08000c2c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000c3c:	f001 fc14 	bl	8002468 <vPortEnterCritical>
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	d103      	bne.n	8000c56 <vQueueWaitForMessageRestricted+0x2a>
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c62:	d103      	bne.n	8000c6c <vQueueWaitForMessageRestricted+0x40>
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c6c:	f001 fc2c 	bl	80024c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d106      	bne.n	8000c86 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3324      	adds	r3, #36	; 0x24
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	68b9      	ldr	r1, [r7, #8]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fca7 	bl	80015d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff ff02 	bl	8000a90 <prvUnlockQueue>
    }
 8000c8c:	bf00      	nop
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	; 0x30
 8000c98:	af04      	add	r7, sp, #16
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 fcb5 	bl	8002618 <pvPortMalloc>
 8000cae:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d013      	beq.n	8000cde <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000cb6:	2058      	movs	r0, #88	; 0x58
 8000cb8:	f001 fcae 	bl	8002618 <pvPortMalloc>
 8000cbc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d008      	beq.n	8000cd6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000cc4:	2258      	movs	r2, #88	; 0x58
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	69f8      	ldr	r0, [r7, #28]
 8000cca:	f002 f809 	bl	8002ce0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8000cd4:	e005      	b.n	8000ce2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f001 fd58 	bl	800278c <vPortFree>
 8000cdc:	e001      	b.n	8000ce2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d013      	beq.n	8000d10 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000ce8:	88fa      	ldrh	r2, [r7, #6]
 8000cea:	2300      	movs	r3, #0
 8000cec:	9303      	str	r3, [sp, #12]
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f000 f80e 	bl	8000d20 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000d04:	69f8      	ldr	r0, [r7, #28]
 8000d06:	f000 f899 	bl	8000e3c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	e002      	b.n	8000d16 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000d16:	69bb      	ldr	r3, [r7, #24]
    }
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	461a      	mov	r2, r3
 8000d38:	21a5      	movs	r1, #165	; 0xa5
 8000d3a:	f001 ffd1 	bl	8002ce0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	f023 0307 	bic.w	r3, r3, #7
 8000d56:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00a      	beq.n	8000d78 <prvInitialiseNewTask+0x58>
        __asm volatile
 8000d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d66:	f383 8811 	msr	BASEPRI, r3
 8000d6a:	f3bf 8f6f 	isb	sy
 8000d6e:	f3bf 8f4f 	dsb	sy
 8000d72:	617b      	str	r3, [r7, #20]
    }
 8000d74:	bf00      	nop
 8000d76:	e7fe      	b.n	8000d76 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d01e      	beq.n	8000dbc <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	e012      	b.n	8000daa <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	4413      	add	r3, r2
 8000d8a:	7819      	ldrb	r1, [r3, #0]
 8000d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	4413      	add	r3, r2
 8000d92:	3334      	adds	r3, #52	; 0x34
 8000d94:	460a      	mov	r2, r1
 8000d96:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	3301      	adds	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	2b09      	cmp	r3, #9
 8000dae:	d9e9      	bls.n	8000d84 <prvInitialiseNewTask+0x64>
 8000db0:	e000      	b.n	8000db4 <prvInitialiseNewTask+0x94>
            {
                break;
 8000db2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	d90a      	bls.n	8000dd8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8000dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc6:	f383 8811 	msr	BASEPRI, r3
 8000dca:	f3bf 8f6f 	isb	sy
 8000dce:	f3bf 8f4f 	dsb	sy
 8000dd2:	613b      	str	r3, [r7, #16]
    }
 8000dd4:	bf00      	nop
 8000dd6:	e7fe      	b.n	8000dd6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	d901      	bls.n	8000de2 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000dde:	2304      	movs	r3, #4
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dec:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df0:	3304      	adds	r3, #4
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fa6c 	bl	80002d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfa:	3318      	adds	r3, #24
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fa67 	bl	80002d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e06:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0a:	f1c3 0205 	rsb	r2, r3, #5
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e10:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	68f9      	ldr	r1, [r7, #12]
 8000e1c:	69b8      	ldr	r0, [r7, #24]
 8000e1e:	f001 f9f5 	bl	800220c <pxPortInitialiseStack>
 8000e22:	4602      	mov	r2, r0
 8000e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e26:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e32:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000e44:	f001 fb10 	bl	8002468 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000e48:	4b40      	ldr	r3, [pc, #256]	; (8000f4c <prvAddNewTaskToReadyList+0x110>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a3f      	ldr	r2, [pc, #252]	; (8000f4c <prvAddNewTaskToReadyList+0x110>)
 8000e50:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000e52:	4b3f      	ldr	r3, [pc, #252]	; (8000f50 <prvAddNewTaskToReadyList+0x114>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000e5a:	4a3d      	ldr	r2, [pc, #244]	; (8000f50 <prvAddNewTaskToReadyList+0x114>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000e60:	4b3a      	ldr	r3, [pc, #232]	; (8000f4c <prvAddNewTaskToReadyList+0x110>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d110      	bne.n	8000e8a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000e68:	f000 fd70 	bl	800194c <prvInitialiseTaskLists>
 8000e6c:	e00d      	b.n	8000e8a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000e6e:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <prvAddNewTaskToReadyList+0x118>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d109      	bne.n	8000e8a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <prvAddNewTaskToReadyList+0x114>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d802      	bhi.n	8000e8a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000e84:	4a32      	ldr	r2, [pc, #200]	; (8000f50 <prvAddNewTaskToReadyList+0x114>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000e8a:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <prvAddNewTaskToReadyList+0x11c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a31      	ldr	r2, [pc, #196]	; (8000f58 <prvAddNewTaskToReadyList+0x11c>)
 8000e92:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000e94:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <prvAddNewTaskToReadyList+0x11c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <prvAddNewTaskToReadyList+0x120>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	4a2c      	ldr	r2, [pc, #176]	; (8000f5c <prvAddNewTaskToReadyList+0x120>)
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb2:	492b      	ldr	r1, [pc, #172]	; (8000f60 <prvAddNewTaskToReadyList+0x124>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	3204      	adds	r2, #4
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	1d1a      	adds	r2, r3, #4
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <prvAddNewTaskToReadyList+0x124>)
 8000ef2:	441a      	add	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	615a      	str	r2, [r3, #20]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000efc:	4918      	ldr	r1, [pc, #96]	; (8000f60 <prvAddNewTaskToReadyList+0x124>)
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	1c59      	adds	r1, r3, #1
 8000f0c:	4814      	ldr	r0, [pc, #80]	; (8000f60 <prvAddNewTaskToReadyList+0x124>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4403      	add	r3, r0
 8000f18:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000f1a:	f001 fad5 	bl	80024c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <prvAddNewTaskToReadyList+0x118>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00e      	beq.n	8000f44 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <prvAddNewTaskToReadyList+0x114>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <prvAddNewTaskToReadyList+0x128>)
 8000f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	f3bf 8f4f 	dsb	sy
 8000f40:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200001a0 	.word	0x200001a0
 8000f50:	200000c8 	.word	0x200000c8
 8000f54:	200001ac 	.word	0x200001ac
 8000f58:	200001bc 	.word	0x200001bc
 8000f5c:	200001a8 	.word	0x200001a8
 8000f60:	200000cc 	.word	0x200000cc
 8000f64:	e000ed04 	.word	0xe000ed04

08000f68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d017      	beq.n	8000faa <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <vTaskDelay+0x60>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <vTaskDelay+0x30>
        __asm volatile
 8000f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f86:	f383 8811 	msr	BASEPRI, r3
 8000f8a:	f3bf 8f6f 	isb	sy
 8000f8e:	f3bf 8f4f 	dsb	sy
 8000f92:	60bb      	str	r3, [r7, #8]
    }
 8000f94:	bf00      	nop
 8000f96:	e7fe      	b.n	8000f96 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000f98:	f000 f86c 	bl	8001074 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fe30 	bl	8001c04 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000fa4:	f000 f874 	bl	8001090 <xTaskResumeAll>
 8000fa8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d107      	bne.n	8000fc0 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <vTaskDelay+0x64>)
 8000fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	f3bf 8f4f 	dsb	sy
 8000fbc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200001c8 	.word	0x200001c8
 8000fcc:	e000ed04 	.word	0xe000ed04

08000fd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <vTaskStartScheduler+0x88>)
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2282      	movs	r2, #130	; 0x82
 8000fe2:	491e      	ldr	r1, [pc, #120]	; (800105c <vTaskStartScheduler+0x8c>)
 8000fe4:	481e      	ldr	r0, [pc, #120]	; (8001060 <vTaskStartScheduler+0x90>)
 8000fe6:	f7ff fe55 	bl	8000c94 <xTaskCreate>
 8000fea:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d102      	bne.n	8000ff8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8000ff2:	f000 fe87 	bl	8001d04 <xTimerCreateTimerTask>
 8000ff6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d116      	bne.n	800102c <vTaskStartScheduler+0x5c>
        __asm volatile
 8000ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001002:	f383 8811 	msr	BASEPRI, r3
 8001006:	f3bf 8f6f 	isb	sy
 800100a:	f3bf 8f4f 	dsb	sy
 800100e:	60bb      	str	r3, [r7, #8]
    }
 8001010:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <vTaskStartScheduler+0x94>)
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <vTaskStartScheduler+0x98>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <vTaskStartScheduler+0x9c>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001026:	f001 f97d 	bl	8002324 <xPortStartScheduler>
 800102a:	e00e      	b.n	800104a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001032:	d10a      	bne.n	800104a <vTaskStartScheduler+0x7a>
        __asm volatile
 8001034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001038:	f383 8811 	msr	BASEPRI, r3
 800103c:	f3bf 8f6f 	isb	sy
 8001040:	f3bf 8f4f 	dsb	sy
 8001044:	607b      	str	r3, [r7, #4]
    }
 8001046:	bf00      	nop
 8001048:	e7fe      	b.n	8001048 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <vTaskStartScheduler+0xa0>)
 800104c:	681b      	ldr	r3, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001c4 	.word	0x200001c4
 800105c:	08003d10 	.word	0x08003d10
 8001060:	0800191d 	.word	0x0800191d
 8001064:	200001c0 	.word	0x200001c0
 8001068:	200001ac 	.word	0x200001ac
 800106c:	200001a4 	.word	0x200001a4
 8001070:	20000000 	.word	0x20000000

08001074 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <vTaskSuspendAll+0x18>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4a03      	ldr	r2, [pc, #12]	; (800108c <vTaskSuspendAll+0x18>)
 8001080:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	200001c8 	.word	0x200001c8

08001090 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800109e:	4b71      	ldr	r3, [pc, #452]	; (8001264 <xTaskResumeAll+0x1d4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10a      	bne.n	80010bc <xTaskResumeAll+0x2c>
        __asm volatile
 80010a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010aa:	f383 8811 	msr	BASEPRI, r3
 80010ae:	f3bf 8f6f 	isb	sy
 80010b2:	f3bf 8f4f 	dsb	sy
 80010b6:	607b      	str	r3, [r7, #4]
    }
 80010b8:	bf00      	nop
 80010ba:	e7fe      	b.n	80010ba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80010bc:	f001 f9d4 	bl	8002468 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80010c0:	4b68      	ldr	r3, [pc, #416]	; (8001264 <xTaskResumeAll+0x1d4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4a67      	ldr	r2, [pc, #412]	; (8001264 <xTaskResumeAll+0x1d4>)
 80010c8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010ca:	4b66      	ldr	r3, [pc, #408]	; (8001264 <xTaskResumeAll+0x1d4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f040 80c0 	bne.w	8001254 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80010d4:	4b64      	ldr	r3, [pc, #400]	; (8001268 <xTaskResumeAll+0x1d8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80bb 	beq.w	8001254 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010de:	e08a      	b.n	80011f6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010e0:	4b62      	ldr	r3, [pc, #392]	; (800126c <xTaskResumeAll+0x1dc>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	6a12      	ldr	r2, [r2, #32]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	69d2      	ldr	r2, [r2, #28]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3318      	adds	r3, #24
 800110a:	429a      	cmp	r2, r3
 800110c:	d103      	bne.n	8001116 <xTaskResumeAll+0x86>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	6a1a      	ldr	r2, [r3, #32]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	1e5a      	subs	r2, r3, #1
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	68d2      	ldr	r2, [r2, #12]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	6892      	ldr	r2, [r2, #8]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	3304      	adds	r3, #4
 8001148:	429a      	cmp	r2, r3
 800114a:	d103      	bne.n	8001154 <xTaskResumeAll+0xc4>
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	1e5a      	subs	r2, r3, #1
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	2201      	movs	r2, #1
 800116a:	409a      	lsls	r2, r3
 800116c:	4b40      	ldr	r3, [pc, #256]	; (8001270 <xTaskResumeAll+0x1e0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4313      	orrs	r3, r2
 8001172:	4a3f      	ldr	r2, [pc, #252]	; (8001270 <xTaskResumeAll+0x1e0>)
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800117a:	493e      	ldr	r1, [pc, #248]	; (8001274 <xTaskResumeAll+0x1e4>)
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	3304      	adds	r3, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	3204      	adds	r2, #4
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	1d1a      	adds	r2, r3, #4
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4a2e      	ldr	r2, [pc, #184]	; (8001274 <xTaskResumeAll+0x1e4>)
 80011ba:	441a      	add	r2, r3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	615a      	str	r2, [r3, #20]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c4:	492b      	ldr	r1, [pc, #172]	; (8001274 <xTaskResumeAll+0x1e4>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	1c59      	adds	r1, r3, #1
 80011d4:	4827      	ldr	r0, [pc, #156]	; (8001274 <xTaskResumeAll+0x1e4>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4403      	add	r3, r0
 80011e0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <xTaskResumeAll+0x1e8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d302      	bcc.n	80011f6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <xTaskResumeAll+0x1ec>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <xTaskResumeAll+0x1dc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f47f af70 	bne.w	80010e0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001206:	f000 fc1f 	bl	8001a48 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <xTaskResumeAll+0x1f0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d010      	beq.n	8001238 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001216:	f000 f847 	bl	80012a8 <xTaskIncrementTick>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <xTaskResumeAll+0x1ec>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3b01      	subs	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f1      	bne.n	8001216 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <xTaskResumeAll+0x1f0>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <xTaskResumeAll+0x1ec>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d009      	beq.n	8001254 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <xTaskResumeAll+0x1f4>)
 8001246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	f3bf 8f4f 	dsb	sy
 8001250:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001254:	f001 f938 	bl	80024c8 <vPortExitCritical>

    return xAlreadyYielded;
 8001258:	69bb      	ldr	r3, [r7, #24]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3720      	adds	r7, #32
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200001c8 	.word	0x200001c8
 8001268:	200001a0 	.word	0x200001a0
 800126c:	20000160 	.word	0x20000160
 8001270:	200001a8 	.word	0x200001a8
 8001274:	200000cc 	.word	0x200000cc
 8001278:	200000c8 	.word	0x200000c8
 800127c:	200001b4 	.word	0x200001b4
 8001280:	200001b0 	.word	0x200001b0
 8001284:	e000ed04 	.word	0xe000ed04

08001288 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <xTaskGetTickCount+0x1c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200001a4 	.word	0x200001a4

080012a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012b2:	4b7d      	ldr	r3, [pc, #500]	; (80014a8 <xTaskIncrementTick+0x200>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 80ec 	bne.w	8001494 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80012bc:	4b7b      	ldr	r3, [pc, #492]	; (80014ac <xTaskIncrementTick+0x204>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80012c4:	4a79      	ldr	r2, [pc, #484]	; (80014ac <xTaskIncrementTick+0x204>)
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d120      	bne.n	8001312 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80012d0:	4b77      	ldr	r3, [pc, #476]	; (80014b0 <xTaskIncrementTick+0x208>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00a      	beq.n	80012f0 <xTaskIncrementTick+0x48>
        __asm volatile
 80012da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012de:	f383 8811 	msr	BASEPRI, r3
 80012e2:	f3bf 8f6f 	isb	sy
 80012e6:	f3bf 8f4f 	dsb	sy
 80012ea:	607b      	str	r3, [r7, #4]
    }
 80012ec:	bf00      	nop
 80012ee:	e7fe      	b.n	80012ee <xTaskIncrementTick+0x46>
 80012f0:	4b6f      	ldr	r3, [pc, #444]	; (80014b0 <xTaskIncrementTick+0x208>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	4b6f      	ldr	r3, [pc, #444]	; (80014b4 <xTaskIncrementTick+0x20c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a6d      	ldr	r2, [pc, #436]	; (80014b0 <xTaskIncrementTick+0x208>)
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4a6d      	ldr	r2, [pc, #436]	; (80014b4 <xTaskIncrementTick+0x20c>)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b6c      	ldr	r3, [pc, #432]	; (80014b8 <xTaskIncrementTick+0x210>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	4a6b      	ldr	r2, [pc, #428]	; (80014b8 <xTaskIncrementTick+0x210>)
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	f000 fb9b 	bl	8001a48 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001312:	4b6a      	ldr	r3, [pc, #424]	; (80014bc <xTaskIncrementTick+0x214>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a3a      	ldr	r2, [r7, #32]
 8001318:	429a      	cmp	r2, r3
 800131a:	f0c0 80a6 	bcc.w	800146a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800131e:	4b64      	ldr	r3, [pc, #400]	; (80014b0 <xTaskIncrementTick+0x208>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d104      	bne.n	8001332 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001328:	4b64      	ldr	r3, [pc, #400]	; (80014bc <xTaskIncrementTick+0x214>)
 800132a:	f04f 32ff 	mov.w	r2, #4294967295
 800132e:	601a      	str	r2, [r3, #0]
                    break;
 8001330:	e09b      	b.n	800146a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001332:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <xTaskIncrementTick+0x208>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001342:	6a3a      	ldr	r2, [r7, #32]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	429a      	cmp	r2, r3
 8001348:	d203      	bcs.n	8001352 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800134a:	4a5c      	ldr	r2, [pc, #368]	; (80014bc <xTaskIncrementTick+0x214>)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001350:	e08b      	b.n	800146a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	68d2      	ldr	r2, [r2, #12]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	6892      	ldr	r2, [r2, #8]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	3304      	adds	r3, #4
 8001374:	429a      	cmp	r2, r3
 8001376:	d103      	bne.n	8001380 <xTaskIncrementTick+0xd8>
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1e5a      	subs	r2, r3, #1
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01e      	beq.n	80013d6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	6a12      	ldr	r2, [r2, #32]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	69d2      	ldr	r2, [r2, #28]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	3318      	adds	r3, #24
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d103      	bne.n	80013c6 <xTaskIncrementTick+0x11e>
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	2201      	movs	r2, #1
 80013dc:	409a      	lsls	r2, r3
 80013de:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <xTaskIncrementTick+0x218>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	4a36      	ldr	r2, [pc, #216]	; (80014c0 <xTaskIncrementTick+0x218>)
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ec:	4935      	ldr	r1, [pc, #212]	; (80014c4 <xTaskIncrementTick+0x21c>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	3304      	adds	r3, #4
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	3204      	adds	r2, #4
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	1d1a      	adds	r2, r3, #4
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <xTaskIncrementTick+0x21c>)
 800142c:	441a      	add	r2, r3
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	615a      	str	r2, [r3, #20]
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001436:	4923      	ldr	r1, [pc, #140]	; (80014c4 <xTaskIncrementTick+0x21c>)
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	1c59      	adds	r1, r3, #1
 8001446:	481f      	ldr	r0, [pc, #124]	; (80014c4 <xTaskIncrementTick+0x21c>)
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4403      	add	r3, r0
 8001452:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <xTaskIncrementTick+0x220>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	429a      	cmp	r2, r3
 8001460:	f67f af5d 	bls.w	800131e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001464:	2301      	movs	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001468:	e759      	b.n	800131e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <xTaskIncrementTick+0x220>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001470:	4914      	ldr	r1, [pc, #80]	; (80014c4 <xTaskIncrementTick+0x21c>)
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d901      	bls.n	8001486 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8001482:	2301      	movs	r3, #1
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <xTaskIncrementTick+0x224>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800148e:	2301      	movs	r3, #1
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
 8001492:	e004      	b.n	800149e <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <xTaskIncrementTick+0x228>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <xTaskIncrementTick+0x228>)
 800149c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3728      	adds	r7, #40	; 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200001c8 	.word	0x200001c8
 80014ac:	200001a4 	.word	0x200001a4
 80014b0:	20000158 	.word	0x20000158
 80014b4:	2000015c 	.word	0x2000015c
 80014b8:	200001b8 	.word	0x200001b8
 80014bc:	200001c0 	.word	0x200001c0
 80014c0:	200001a8 	.word	0x200001a8
 80014c4:	200000cc 	.word	0x200000cc
 80014c8:	200000c8 	.word	0x200000c8
 80014cc:	200001b4 	.word	0x200001b4
 80014d0:	200001b0 	.word	0x200001b0

080014d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <vTaskSwitchContext+0xa4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <vTaskSwitchContext+0xa8>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80014e8:	e03f      	b.n	800156a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <vTaskSwitchContext+0xa8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <vTaskSwitchContext+0xac>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	fab3 f383 	clz	r3, r3
 80014fc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80014fe:	7afb      	ldrb	r3, [r7, #11]
 8001500:	f1c3 031f 	rsb	r3, r3, #31
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	491f      	ldr	r1, [pc, #124]	; (8001584 <vTaskSwitchContext+0xb0>)
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10a      	bne.n	8001530 <vTaskSwitchContext+0x5c>
        __asm volatile
 800151a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151e:	f383 8811 	msr	BASEPRI, r3
 8001522:	f3bf 8f6f 	isb	sy
 8001526:	f3bf 8f4f 	dsb	sy
 800152a:	607b      	str	r3, [r7, #4]
    }
 800152c:	bf00      	nop
 800152e:	e7fe      	b.n	800152e <vTaskSwitchContext+0x5a>
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <vTaskSwitchContext+0xb0>)
 800153c:	4413      	add	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	3308      	adds	r3, #8
 8001552:	429a      	cmp	r2, r3
 8001554:	d104      	bne.n	8001560 <vTaskSwitchContext+0x8c>
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <vTaskSwitchContext+0xb4>)
 8001568:	6013      	str	r3, [r2, #0]
}
 800156a:	bf00      	nop
 800156c:	371c      	adds	r7, #28
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200001c8 	.word	0x200001c8
 800157c:	200001b4 	.word	0x200001b4
 8001580:	200001a8 	.word	0x200001a8
 8001584:	200000cc 	.word	0x200000cc
 8001588:	200000c8 	.word	0x200000c8

0800158c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10a      	bne.n	80015b2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800159c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a0:	f383 8811 	msr	BASEPRI, r3
 80015a4:	f3bf 8f6f 	isb	sy
 80015a8:	f3bf 8f4f 	dsb	sy
 80015ac:	60fb      	str	r3, [r7, #12]
    }
 80015ae:	bf00      	nop
 80015b0:	e7fe      	b.n	80015b0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <vTaskPlaceOnEventList+0x44>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3318      	adds	r3, #24
 80015b8:	4619      	mov	r1, r3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7fe fe95 	bl	80002ea <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80015c0:	2101      	movs	r1, #1
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f000 fb1e 	bl	8001c04 <prvAddCurrentTaskToDelayedList>
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200000c8 	.word	0x200000c8

080015d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10a      	bne.n	80015fc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80015e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ea:	f383 8811 	msr	BASEPRI, r3
 80015ee:	f3bf 8f6f 	isb	sy
 80015f2:	f3bf 8f4f 	dsb	sy
 80015f6:	613b      	str	r3, [r7, #16]
    }
 80015f8:	bf00      	nop
 80015fa:	e7fe      	b.n	80015fa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <vTaskPlaceOnEventListRestricted+0x88>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	61da      	str	r2, [r3, #28]
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <vTaskPlaceOnEventListRestricted+0x88>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	6892      	ldr	r2, [r2, #8]
 8001612:	621a      	str	r2, [r3, #32]
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <vTaskPlaceOnEventListRestricted+0x88>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	3218      	adds	r2, #24
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <vTaskPlaceOnEventListRestricted+0x88>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f103 0218 	add.w	r2, r3, #24
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <vTaskPlaceOnEventListRestricted+0x88>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	68b8      	ldr	r0, [r7, #8]
 800164e:	f000 fad9 	bl	8001c04 <prvAddCurrentTaskToDelayedList>
    }
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200000c8 	.word	0x200000c8

08001660 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001660:	b480      	push	{r7}
 8001662:	b08b      	sub	sp, #44	; 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10a      	bne.n	800168c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167a:	f383 8811 	msr	BASEPRI, r3
 800167e:	f3bf 8f6f 	isb	sy
 8001682:	f3bf 8f4f 	dsb	sy
 8001686:	60fb      	str	r3, [r7, #12]
    }
 8001688:	bf00      	nop
 800168a:	e7fe      	b.n	800168a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	6a3a      	ldr	r2, [r7, #32]
 8001698:	6a12      	ldr	r2, [r2, #32]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	6a3a      	ldr	r2, [r7, #32]
 80016a2:	69d2      	ldr	r2, [r2, #28]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	3318      	adds	r3, #24
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d103      	bne.n	80016ba <xTaskRemoveFromEventList+0x5a>
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	6a1a      	ldr	r2, [r3, #32]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1e5a      	subs	r2, r3, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016ca:	4b4a      	ldr	r3, [pc, #296]	; (80017f4 <xTaskRemoveFromEventList+0x194>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d15e      	bne.n	8001790 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	6a3a      	ldr	r2, [r7, #32]
 80016de:	68d2      	ldr	r2, [r2, #12]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	6a3a      	ldr	r2, [r7, #32]
 80016e8:	6892      	ldr	r2, [r2, #8]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	3304      	adds	r3, #4
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d103      	bne.n	8001700 <xTaskRemoveFromEventList+0xa0>
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	1e5a      	subs	r2, r3, #1
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	2201      	movs	r2, #1
 8001716:	409a      	lsls	r2, r3
 8001718:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <xTaskRemoveFromEventList+0x198>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4313      	orrs	r3, r2
 800171e:	4a36      	ldr	r2, [pc, #216]	; (80017f8 <xTaskRemoveFromEventList+0x198>)
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001726:	4935      	ldr	r1, [pc, #212]	; (80017fc <xTaskRemoveFromEventList+0x19c>)
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	3304      	adds	r3, #4
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	6a3a      	ldr	r2, [r7, #32]
 800174c:	3204      	adds	r2, #4
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	1d1a      	adds	r2, r3, #4
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4a25      	ldr	r2, [pc, #148]	; (80017fc <xTaskRemoveFromEventList+0x19c>)
 8001766:	441a      	add	r2, r3
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001770:	4922      	ldr	r1, [pc, #136]	; (80017fc <xTaskRemoveFromEventList+0x19c>)
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	1c59      	adds	r1, r3, #1
 8001780:	481e      	ldr	r0, [pc, #120]	; (80017fc <xTaskRemoveFromEventList+0x19c>)
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4403      	add	r3, r0
 800178c:	6019      	str	r1, [r3, #0]
 800178e:	e01b      	b.n	80017c8 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <xTaskRemoveFromEventList+0x1a0>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	61da      	str	r2, [r3, #28]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	621a      	str	r2, [r3, #32]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	6a3a      	ldr	r2, [r7, #32]
 80017aa:	3218      	adds	r2, #24
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f103 0218 	add.w	r2, r3, #24
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	4a11      	ldr	r2, [pc, #68]	; (8001800 <xTaskRemoveFromEventList+0x1a0>)
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <xTaskRemoveFromEventList+0x1a0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <xTaskRemoveFromEventList+0x1a0>)
 80017c6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <xTaskRemoveFromEventList+0x1a4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d905      	bls.n	80017e2 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <xTaskRemoveFromEventList+0x1a8>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e001      	b.n	80017e6 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	372c      	adds	r7, #44	; 0x2c
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	200001c8 	.word	0x200001c8
 80017f8:	200001a8 	.word	0x200001a8
 80017fc:	200000cc 	.word	0x200000cc
 8001800:	20000160 	.word	0x20000160
 8001804:	200000c8 	.word	0x200000c8
 8001808:	200001b4 	.word	0x200001b4

0800180c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <vTaskInternalSetTimeOutState+0x24>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <vTaskInternalSetTimeOutState+0x28>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	605a      	str	r2, [r3, #4]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	200001b8 	.word	0x200001b8
 8001834:	200001a4 	.word	0x200001a4

08001838 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184c:	f383 8811 	msr	BASEPRI, r3
 8001850:	f3bf 8f6f 	isb	sy
 8001854:	f3bf 8f4f 	dsb	sy
 8001858:	613b      	str	r3, [r7, #16]
    }
 800185a:	bf00      	nop
 800185c:	e7fe      	b.n	800185c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10a      	bne.n	800187a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001868:	f383 8811 	msr	BASEPRI, r3
 800186c:	f3bf 8f6f 	isb	sy
 8001870:	f3bf 8f4f 	dsb	sy
 8001874:	60fb      	str	r3, [r7, #12]
    }
 8001876:	bf00      	nop
 8001878:	e7fe      	b.n	8001878 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800187a:	f000 fdf5 	bl	8002468 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <xTaskCheckForTimeOut+0xc4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001896:	d102      	bne.n	800189e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	e026      	b.n	80018ec <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <xTaskCheckForTimeOut+0xc8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d00a      	beq.n	80018c0 <xTaskCheckForTimeOut+0x88>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d305      	bcc.n	80018c0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e015      	b.n	80018ec <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d20b      	bcs.n	80018e2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	1ad2      	subs	r2, r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ff98 	bl	800180c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	e004      	b.n	80018ec <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80018ec:	f000 fdec 	bl	80024c8 <vPortExitCritical>

    return xReturn;
 80018f0:	69fb      	ldr	r3, [r7, #28]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200001a4 	.word	0x200001a4
 8001900:	200001b8 	.word	0x200001b8

08001904 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <vTaskMissedYield+0x14>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	200001b4 	.word	0x200001b4

0800191c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001924:	f000 f852 	bl	80019cc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <prvIdleTask+0x28>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d9f9      	bls.n	8001924 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <prvIdleTask+0x2c>)
 8001932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	f3bf 8f4f 	dsb	sy
 800193c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001940:	e7f0      	b.n	8001924 <prvIdleTask+0x8>
 8001942:	bf00      	nop
 8001944:	200000cc 	.word	0x200000cc
 8001948:	e000ed04 	.word	0xe000ed04

0800194c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	e00c      	b.n	8001972 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <prvInitialiseTaskLists+0x60>)
 8001964:	4413      	add	r3, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fc92 	bl	8000290 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3301      	adds	r3, #1
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b04      	cmp	r3, #4
 8001976:	d9ef      	bls.n	8001958 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <prvInitialiseTaskLists+0x64>)
 800197a:	f7fe fc89 	bl	8000290 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800197e:	480d      	ldr	r0, [pc, #52]	; (80019b4 <prvInitialiseTaskLists+0x68>)
 8001980:	f7fe fc86 	bl	8000290 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <prvInitialiseTaskLists+0x6c>)
 8001986:	f7fe fc83 	bl	8000290 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800198a:	480c      	ldr	r0, [pc, #48]	; (80019bc <prvInitialiseTaskLists+0x70>)
 800198c:	f7fe fc80 	bl	8000290 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <prvInitialiseTaskLists+0x74>)
 8001992:	f7fe fc7d 	bl	8000290 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <prvInitialiseTaskLists+0x78>)
 8001998:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <prvInitialiseTaskLists+0x64>)
 800199a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <prvInitialiseTaskLists+0x7c>)
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <prvInitialiseTaskLists+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200000cc 	.word	0x200000cc
 80019b0:	20000130 	.word	0x20000130
 80019b4:	20000144 	.word	0x20000144
 80019b8:	20000160 	.word	0x20000160
 80019bc:	20000174 	.word	0x20000174
 80019c0:	2000018c 	.word	0x2000018c
 80019c4:	20000158 	.word	0x20000158
 80019c8:	2000015c 	.word	0x2000015c

080019cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80019d2:	e019      	b.n	8001a08 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80019d4:	f000 fd48 	bl	8002468 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <prvCheckTasksWaitingTermination+0x50>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3304      	adds	r3, #4
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fcb9 	bl	800035c <uxListRemove>
                --uxCurrentNumberOfTasks;
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <prvCheckTasksWaitingTermination+0x54>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <prvCheckTasksWaitingTermination+0x54>)
 80019f2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <prvCheckTasksWaitingTermination+0x58>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <prvCheckTasksWaitingTermination+0x58>)
 80019fc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80019fe:	f000 fd63 	bl	80024c8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f810 	bl	8001a28 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <prvCheckTasksWaitingTermination+0x58>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e1      	bne.n	80019d4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000174 	.word	0x20000174
 8001a20:	200001a0 	.word	0x200001a0
 8001a24:	20000188 	.word	0x20000188

08001a28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fea9 	bl	800278c <vPortFree>
            vPortFree( pxTCB );
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fea6 	bl	800278c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <prvResetNextTaskUnblockTime+0x30>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d104      	bne.n	8001a60 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <prvResetNextTaskUnblockTime+0x34>)
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001a5e:	e005      	b.n	8001a6c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <prvResetNextTaskUnblockTime+0x30>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <prvResetNextTaskUnblockTime+0x34>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000158 	.word	0x20000158
 8001a7c:	200001c0 	.word	0x200001c0

08001a80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <xTaskGetSchedulerState+0x34>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	e008      	b.n	8001aa6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <xTaskGetSchedulerState+0x38>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	e001      	b.n	8001aa6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001aa6:	687b      	ldr	r3, [r7, #4]
    }
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	200001ac 	.word	0x200001ac
 8001ab8:	200001c8 	.word	0x200001c8

08001abc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 808c 	beq.w	8001bec <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001ad4:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <xTaskPriorityDisinherit+0x13c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d00a      	beq.n	8001af4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8001ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae2:	f383 8811 	msr	BASEPRI, r3
 8001ae6:	f3bf 8f6f 	isb	sy
 8001aea:	f3bf 8f4f 	dsb	sy
 8001aee:	613b      	str	r3, [r7, #16]
    }
 8001af0:	bf00      	nop
 8001af2:	e7fe      	b.n	8001af2 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10a      	bne.n	8001b12 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8001afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b00:	f383 8811 	msr	BASEPRI, r3
 8001b04:	f3bf 8f6f 	isb	sy
 8001b08:	f3bf 8f4f 	dsb	sy
 8001b0c:	60fb      	str	r3, [r7, #12]
    }
 8001b0e:	bf00      	nop
 8001b10:	e7fe      	b.n	8001b10 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	1e5a      	subs	r2, r3, #1
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d061      	beq.n	8001bec <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d15d      	bne.n	8001bec <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	3304      	adds	r3, #4
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fc11 	bl	800035c <uxListRemove>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10a      	bne.n	8001b56 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	2201      	movs	r2, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <xTaskPriorityDisinherit+0x140>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4013      	ands	r3, r2
 8001b52:	4a2a      	ldr	r2, [pc, #168]	; (8001bfc <xTaskPriorityDisinherit+0x140>)
 8001b54:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	f1c3 0205 	rsb	r2, r3, #5
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	2201      	movs	r2, #1
 8001b70:	409a      	lsls	r2, r3
 8001b72:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <xTaskPriorityDisinherit+0x140>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <xTaskPriorityDisinherit+0x140>)
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b80:	491f      	ldr	r1, [pc, #124]	; (8001c00 <xTaskPriorityDisinherit+0x144>)
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	3204      	adds	r2, #4
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	1d1a      	adds	r2, r3, #4
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <xTaskPriorityDisinherit+0x144>)
 8001bc0:	441a      	add	r2, r3
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	615a      	str	r2, [r3, #20]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bca:	490d      	ldr	r1, [pc, #52]	; (8001c00 <xTaskPriorityDisinherit+0x144>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	1c59      	adds	r1, r3, #1
 8001bda:	4809      	ldr	r0, [pc, #36]	; (8001c00 <xTaskPriorityDisinherit+0x144>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4403      	add	r3, r0
 8001be6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001be8:	2301      	movs	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001bec:	69fb      	ldr	r3, [r7, #28]
    }
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200000c8 	.word	0x200000c8
 8001bfc:	200001a8 	.word	0x200001a8
 8001c00:	200000cc 	.word	0x200000cc

08001c04 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001c0e:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fb9e 	bl	800035c <uxListRemove>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10b      	bne.n	8001c3e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <prvAddCurrentTaskToDelayedList+0xec>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <prvAddCurrentTaskToDelayedList+0xec>)
 8001c3c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c44:	d124      	bne.n	8001c90 <prvAddCurrentTaskToDelayedList+0x8c>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d021      	beq.n	8001c90 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c4c:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	6892      	ldr	r2, [r2, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	3204      	adds	r2, #4
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	1d1a      	adds	r2, r3, #4
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c80:	615a      	str	r2, [r3, #20]
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001c8e:	e026      	b.n	8001cde <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d209      	bcs.n	8001cbc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f7fe fb18 	bl	80002ea <vListInsert>
}
 8001cba:	e010      	b.n	8001cde <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <prvAddCurrentTaskToDelayedList+0xf8>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <prvAddCurrentTaskToDelayedList+0xe8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4610      	mov	r0, r2
 8001cca:	f7fe fb0e 	bl	80002ea <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d202      	bcs.n	8001cde <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001cd8:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6013      	str	r3, [r2, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200001a4 	.word	0x200001a4
 8001cec:	200000c8 	.word	0x200000c8
 8001cf0:	200001a8 	.word	0x200001a8
 8001cf4:	2000018c 	.word	0x2000018c
 8001cf8:	2000015c 	.word	0x2000015c
 8001cfc:	20000158 	.word	0x20000158
 8001d00:	200001c0 	.word	0x200001c0

08001d04 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001d0e:	f000 fa47 	bl	80021a0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <xTimerCreateTimerTask+0x54>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <xTimerCreateTimerTask+0x58>)
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	2302      	movs	r3, #2
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d28:	490d      	ldr	r1, [pc, #52]	; (8001d60 <xTimerCreateTimerTask+0x5c>)
 8001d2a:	480e      	ldr	r0, [pc, #56]	; (8001d64 <xTimerCreateTimerTask+0x60>)
 8001d2c:	f7fe ffb2 	bl	8000c94 <xTaskCreate>
 8001d30:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10a      	bne.n	8001d4e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3c:	f383 8811 	msr	BASEPRI, r3
 8001d40:	f3bf 8f6f 	isb	sy
 8001d44:	f3bf 8f4f 	dsb	sy
 8001d48:	603b      	str	r3, [r7, #0]
    }
 8001d4a:	bf00      	nop
 8001d4c:	e7fe      	b.n	8001d4c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001d4e:	687b      	ldr	r3, [r7, #4]
    }
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200001fc 	.word	0x200001fc
 8001d5c:	20000200 	.word	0x20000200
 8001d60:	08003d18 	.word	0x08003d18
 8001d64:	08001e0d 	.word	0x08001e0d

08001d68 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001d74:	e008      	b.n	8001d88 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	18d1      	adds	r1, r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f8dd 	bl	8001f54 <prvInsertTimerInActiveList>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1ea      	bne.n	8001d76 <prvReloadTimer+0xe>
        }
    }
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <prvProcessExpiredTimer+0x5c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fac9 	bl	800035c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7ff ffc3 	bl	8001d68 <prvReloadTimer>
 8001de2:	e008      	b.n	8001df6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dea:	f023 0301 	bic.w	r3, r3, #1
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	4798      	blx	r3
    }
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200001f4 	.word	0x200001f4

08001e0c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 f857 	bl	8001ecc <prvGetNextExpireTime>
 8001e1e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4619      	mov	r1, r3
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 f803 	bl	8001e30 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001e2a:	f000 f8d5 	bl	8001fd8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001e2e:	e7f1      	b.n	8001e14 <prvTimerTask+0x8>

08001e30 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001e3a:	f7ff f91b 	bl	8001074 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f866 	bl	8001f14 <prvSampleTimeNow>
 8001e48:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d130      	bne.n	8001eb2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10a      	bne.n	8001e6c <prvProcessTimerOrBlockTask+0x3c>
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d806      	bhi.n	8001e6c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001e5e:	f7ff f917 	bl	8001090 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ffa1 	bl	8001dac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001e6a:	e024      	b.n	8001eb6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <prvProcessTimerOrBlockTask+0x90>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <prvProcessTimerOrBlockTask+0x50>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <prvProcessTimerOrBlockTask+0x52>
 8001e80:	2300      	movs	r3, #0
 8001e82:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <prvProcessTimerOrBlockTask+0x94>)
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7fe fecb 	bl	8000c2c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001e96:	f7ff f8fb 	bl	8001090 <xTaskResumeAll>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10a      	bne.n	8001eb6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <prvProcessTimerOrBlockTask+0x98>)
 8001ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	f3bf 8f4f 	dsb	sy
 8001eac:	f3bf 8f6f 	isb	sy
    }
 8001eb0:	e001      	b.n	8001eb6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001eb2:	f7ff f8ed 	bl	8001090 <xTaskResumeAll>
    }
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200001f8 	.word	0x200001f8
 8001ec4:	200001fc 	.word	0x200001fc
 8001ec8:	e000ed04 	.word	0xe000ed04

08001ecc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <prvGetNextExpireTime+0x44>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <prvGetNextExpireTime+0x16>
 8001ede:	2201      	movs	r2, #1
 8001ee0:	e000      	b.n	8001ee4 <prvGetNextExpireTime+0x18>
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d105      	bne.n	8001efc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <prvGetNextExpireTime+0x44>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e001      	b.n	8001f00 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001f00:	68fb      	ldr	r3, [r7, #12]
    }
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	200001f4 	.word	0x200001f4

08001f14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001f1c:	f7ff f9b4 	bl	8001288 <xTaskGetTickCount>
 8001f20:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <prvSampleTimeNow+0x3c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d205      	bcs.n	8001f38 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001f2c:	f000 f912 	bl	8002154 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e002      	b.n	8001f3e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <prvSampleTimeNow+0x3c>)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001f44:	68fb      	ldr	r3, [r7, #12]
    }
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000204 	.word	0x20000204

08001f54 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d812      	bhi.n	8001fa0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	1ad2      	subs	r2, r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d302      	bcc.n	8001f8e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	e01b      	b.n	8001fc6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <prvInsertTimerInActiveList+0x7c>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3304      	adds	r3, #4
 8001f96:	4619      	mov	r1, r3
 8001f98:	4610      	mov	r0, r2
 8001f9a:	f7fe f9a6 	bl	80002ea <vListInsert>
 8001f9e:	e012      	b.n	8001fc6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d206      	bcs.n	8001fb6 <prvInsertTimerInActiveList+0x62>
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d302      	bcc.n	8001fb6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	e007      	b.n	8001fc6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <prvInsertTimerInActiveList+0x80>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	f7fe f992 	bl	80002ea <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001fc6:	697b      	ldr	r3, [r7, #20]
    }
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200001f8 	.word	0x200001f8
 8001fd4:	200001f4 	.word	0x200001f4

08001fd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001fde:	e0a6      	b.n	800212e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f2c0 80a2 	blt.w	800212c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe f9af 	bl	800035c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff87 	bl	8001f14 <prvSampleTimeNow>
 8002006:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	3b01      	subs	r3, #1
 800200c:	2b08      	cmp	r3, #8
 800200e:	f200 808e 	bhi.w	800212e <prvProcessReceivedCommands+0x156>
 8002012:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <prvProcessReceivedCommands+0x40>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	0800203d 	.word	0x0800203d
 800201c:	0800203d 	.word	0x0800203d
 8002020:	080020a5 	.word	0x080020a5
 8002024:	080020b9 	.word	0x080020b9
 8002028:	08002103 	.word	0x08002103
 800202c:	0800203d 	.word	0x0800203d
 8002030:	0800203d 	.word	0x0800203d
 8002034:	080020a5 	.word	0x080020a5
 8002038:	080020b9 	.word	0x080020b9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	18d1      	adds	r1, r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	69f8      	ldr	r0, [r7, #28]
 800205c:	f7ff ff7a 	bl	8001f54 <prvInsertTimerInActiveList>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d063      	beq.n	800212e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d009      	beq.n	8002088 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	4413      	add	r3, r2
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4619      	mov	r1, r3
 8002080:	69f8      	ldr	r0, [r7, #28]
 8002082:	f7ff fe71 	bl	8001d68 <prvReloadTimer>
 8002086:	e008      	b.n	800209a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	b2da      	uxtb	r2, r3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	69f8      	ldr	r0, [r7, #28]
 80020a0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80020a2:	e044      	b.n	800212e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80020b6:	e03a      	b.n	800212e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <prvProcessReceivedCommands+0x116>
        __asm volatile
 80020d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	617b      	str	r3, [r7, #20]
    }
 80020ea:	bf00      	nop
 80020ec:	e7fe      	b.n	80020ec <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	18d1      	adds	r1, r2, r3
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	69f8      	ldr	r0, [r7, #28]
 80020fc:	f7ff ff2a 	bl	8001f54 <prvInsertTimerInActiveList>
                        break;
 8002100:	e015      	b.n	800212e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d103      	bne.n	8002118 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002110:	69f8      	ldr	r0, [r7, #28]
 8002112:	f000 fb3b 	bl	800278c <vPortFree>
 8002116:	e00a      	b.n	800212e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800212a:	e000      	b.n	800212e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800212c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <prvProcessReceivedCommands+0x178>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f107 0108 	add.w	r1, r7, #8
 8002136:	2200      	movs	r2, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fb39 	bl	80007b0 <xQueueReceive>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	f47f af4d 	bne.w	8001fe0 <prvProcessReceivedCommands+0x8>
        }
    }
 8002146:	bf00      	nop
 8002148:	bf00      	nop
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	200001fc 	.word	0x200001fc

08002154 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800215a:	e009      	b.n	8002170 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <prvSwitchTimerLists+0x44>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002166:	f04f 31ff 	mov.w	r1, #4294967295
 800216a:	6838      	ldr	r0, [r7, #0]
 800216c:	f7ff fe1e 	bl	8001dac <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <prvSwitchTimerLists+0x44>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <prvSwitchTimerLists+0x44>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <prvSwitchTimerLists+0x48>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <prvSwitchTimerLists+0x44>)
 8002186:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <prvSwitchTimerLists+0x48>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
    }
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200001f4 	.word	0x200001f4
 800219c:	200001f8 	.word	0x200001f8

080021a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80021a4:	f000 f960 	bl	8002468 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <prvCheckForValidListAndQueue+0x54>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d11d      	bne.n	80021ec <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80021b0:	4811      	ldr	r0, [pc, #68]	; (80021f8 <prvCheckForValidListAndQueue+0x58>)
 80021b2:	f7fe f86d 	bl	8000290 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80021b6:	4811      	ldr	r0, [pc, #68]	; (80021fc <prvCheckForValidListAndQueue+0x5c>)
 80021b8:	f7fe f86a 	bl	8000290 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80021bc:	4b10      	ldr	r3, [pc, #64]	; (8002200 <prvCheckForValidListAndQueue+0x60>)
 80021be:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <prvCheckForValidListAndQueue+0x58>)
 80021c0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <prvCheckForValidListAndQueue+0x64>)
 80021c4:	4a0d      	ldr	r2, [pc, #52]	; (80021fc <prvCheckForValidListAndQueue+0x5c>)
 80021c6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80021c8:	2200      	movs	r2, #0
 80021ca:	210c      	movs	r1, #12
 80021cc:	200a      	movs	r0, #10
 80021ce:	f7fe f97f 	bl	80004d0 <xQueueGenericCreate>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <prvCheckForValidListAndQueue+0x54>)
 80021d6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <prvCheckForValidListAndQueue+0x54>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <prvCheckForValidListAndQueue+0x54>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4908      	ldr	r1, [pc, #32]	; (8002208 <prvCheckForValidListAndQueue+0x68>)
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe fcd2 	bl	8000b90 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80021ec:	f000 f96c 	bl	80024c8 <vPortExitCritical>
    }
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	200001fc 	.word	0x200001fc
 80021f8:	200001cc 	.word	0x200001cc
 80021fc:	200001e0 	.word	0x200001e0
 8002200:	200001f4 	.word	0x200001f4
 8002204:	200001f8 	.word	0x200001f8
 8002208:	08003d20 	.word	0x08003d20

0800220c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3b04      	subs	r3, #4
 800221c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002224:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3b04      	subs	r3, #4
 800222a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f023 0201 	bic.w	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3b04      	subs	r3, #4
 800223a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <pxPortInitialiseStack+0x64>)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3b14      	subs	r3, #20
 8002246:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3b04      	subs	r3, #4
 8002252:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f06f 0202 	mvn.w	r2, #2
 800225a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3b20      	subs	r3, #32
 8002260:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	08002275 	.word	0x08002275

08002274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <prvTaskExitError+0x54>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002286:	d00a      	beq.n	800229e <prvTaskExitError+0x2a>
        __asm volatile
 8002288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	60fb      	str	r3, [r7, #12]
    }
 800229a:	bf00      	nop
 800229c:	e7fe      	b.n	800229c <prvTaskExitError+0x28>
        __asm volatile
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	60bb      	str	r3, [r7, #8]
    }
 80022b0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80022b2:	bf00      	nop
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0fc      	beq.n	80022b4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80022ba:	bf00      	nop
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	20000004 	.word	0x20000004
 80022cc:	00000000 	.word	0x00000000

080022d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <pxCurrentTCBConst2>)
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	6808      	ldr	r0, [r1, #0]
 80022d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022da:	f380 8809 	msr	PSP, r0
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f380 8811 	msr	BASEPRI, r0
 80022ea:	4770      	bx	lr
 80022ec:	f3af 8000 	nop.w

080022f0 <pxCurrentTCBConst2>:
 80022f0:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop

080022f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80022f8:	4808      	ldr	r0, [pc, #32]	; (800231c <prvPortStartFirstTask+0x24>)
 80022fa:	6800      	ldr	r0, [r0, #0]
 80022fc:	6800      	ldr	r0, [r0, #0]
 80022fe:	f380 8808 	msr	MSP, r0
 8002302:	f04f 0000 	mov.w	r0, #0
 8002306:	f380 8814 	msr	CONTROL, r0
 800230a:	b662      	cpsie	i
 800230c:	b661      	cpsie	f
 800230e:	f3bf 8f4f 	dsb	sy
 8002312:	f3bf 8f6f 	isb	sy
 8002316:	df00      	svc	0
 8002318:	bf00      	nop
 800231a:	0000      	.short	0x0000
 800231c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop

08002324 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800232a:	4b46      	ldr	r3, [pc, #280]	; (8002444 <xPortStartScheduler+0x120>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a46      	ldr	r2, [pc, #280]	; (8002448 <xPortStartScheduler+0x124>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d10a      	bne.n	800234a <xPortStartScheduler+0x26>
        __asm volatile
 8002334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	613b      	str	r3, [r7, #16]
    }
 8002346:	bf00      	nop
 8002348:	e7fe      	b.n	8002348 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800234a:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <xPortStartScheduler+0x120>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a3f      	ldr	r2, [pc, #252]	; (800244c <xPortStartScheduler+0x128>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d10a      	bne.n	800236a <xPortStartScheduler+0x46>
        __asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	60fb      	str	r3, [r7, #12]
    }
 8002366:	bf00      	nop
 8002368:	e7fe      	b.n	8002368 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800236a:	4b39      	ldr	r3, [pc, #228]	; (8002450 <xPortStartScheduler+0x12c>)
 800236c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	22ff      	movs	r2, #255	; 0xff
 800237a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <xPortStartScheduler+0x130>)
 8002390:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002392:	4b31      	ldr	r3, [pc, #196]	; (8002458 <xPortStartScheduler+0x134>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002398:	e009      	b.n	80023ae <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800239a:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <xPortStartScheduler+0x134>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3b01      	subs	r3, #1
 80023a0:	4a2d      	ldr	r2, [pc, #180]	; (8002458 <xPortStartScheduler+0x134>)
 80023a2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	2b80      	cmp	r3, #128	; 0x80
 80023b8:	d0ef      	beq.n	800239a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80023ba:	4b27      	ldr	r3, [pc, #156]	; (8002458 <xPortStartScheduler+0x134>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f1c3 0307 	rsb	r3, r3, #7
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d00a      	beq.n	80023dc <xPortStartScheduler+0xb8>
        __asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	60bb      	str	r3, [r7, #8]
    }
 80023d8:	bf00      	nop
 80023da:	e7fe      	b.n	80023da <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80023dc:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <xPortStartScheduler+0x134>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <xPortStartScheduler+0x134>)
 80023e4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <xPortStartScheduler+0x134>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023ee:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <xPortStartScheduler+0x134>)
 80023f0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <xPortStartScheduler+0x138>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <xPortStartScheduler+0x138>)
 8002400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002404:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <xPortStartScheduler+0x138>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a14      	ldr	r2, [pc, #80]	; (800245c <xPortStartScheduler+0x138>)
 800240c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002410:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002412:	f000 f8db 	bl	80025cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <xPortStartScheduler+0x13c>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800241c:	f000 f8f0 	bl	8002600 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <xPortStartScheduler+0x140>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <xPortStartScheduler+0x140>)
 8002426:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800242a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800242c:	f7ff ff64 	bl	80022f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002430:	f7ff f850 	bl	80014d4 <vTaskSwitchContext>
    prvTaskExitError();
 8002434:	f7ff ff1e 	bl	8002274 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00
 8002448:	410fc271 	.word	0x410fc271
 800244c:	410fc270 	.word	0x410fc270
 8002450:	e000e400 	.word	0xe000e400
 8002454:	20000208 	.word	0x20000208
 8002458:	2000020c 	.word	0x2000020c
 800245c:	e000ed20 	.word	0xe000ed20
 8002460:	20000004 	.word	0x20000004
 8002464:	e000ef34 	.word	0xe000ef34

08002468 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
        __asm volatile
 800246e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	607b      	str	r3, [r7, #4]
    }
 8002480:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <vPortEnterCritical+0x58>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <vPortEnterCritical+0x58>)
 800248a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <vPortEnterCritical+0x58>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10f      	bne.n	80024b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <vPortEnterCritical+0x5c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	603b      	str	r3, [r7, #0]
    }
 80024b0:	bf00      	nop
 80024b2:	e7fe      	b.n	80024b2 <vPortEnterCritical+0x4a>
    }
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	20000004 	.word	0x20000004
 80024c4:	e000ed04 	.word	0xe000ed04

080024c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <vPortExitCritical+0x50>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10a      	bne.n	80024ec <vPortExitCritical+0x24>
        __asm volatile
 80024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	607b      	str	r3, [r7, #4]
    }
 80024e8:	bf00      	nop
 80024ea:	e7fe      	b.n	80024ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <vPortExitCritical+0x50>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <vPortExitCritical+0x50>)
 80024f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <vPortExitCritical+0x50>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d105      	bne.n	800250a <vPortExitCritical+0x42>
 80024fe:	2300      	movs	r3, #0
 8002500:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002508:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000004 	.word	0x20000004
 800251c:	00000000 	.word	0x00000000

08002520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002520:	f3ef 8009 	mrs	r0, PSP
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <pxCurrentTCBConst>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f01e 0f10 	tst.w	lr, #16
 8002530:	bf08      	it	eq
 8002532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800253a:	6010      	str	r0, [r2, #0]
 800253c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002544:	f380 8811 	msr	BASEPRI, r0
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f7fe ffc0 	bl	80014d4 <vTaskSwitchContext>
 8002554:	f04f 0000 	mov.w	r0, #0
 8002558:	f380 8811 	msr	BASEPRI, r0
 800255c:	bc09      	pop	{r0, r3}
 800255e:	6819      	ldr	r1, [r3, #0]
 8002560:	6808      	ldr	r0, [r1, #0]
 8002562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002566:	f01e 0f10 	tst.w	lr, #16
 800256a:	bf08      	it	eq
 800256c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002570:	f380 8809 	msr	PSP, r0
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	f3af 8000 	nop.w

08002580 <pxCurrentTCBConst>:
 8002580:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop

08002588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
        __asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	607b      	str	r3, [r7, #4]
    }
 80025a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80025a2:	f7fe fe81 	bl	80012a8 <xTaskIncrementTick>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <SysTick_Handler+0x40>)
 80025ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	2300      	movs	r3, #0
 80025b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f383 8811 	msr	BASEPRI, r3
    }
 80025be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	e000ed04 	.word	0xe000ed04

080025cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <vPortSetupTimerInterrupt+0x28>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <vPortSetupTimerInterrupt+0x2c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80025dc:	4b07      	ldr	r3, [pc, #28]	; (80025fc <vPortSetupTimerInterrupt+0x30>)
 80025de:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80025e2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <vPortSetupTimerInterrupt+0x28>)
 80025e6:	2207      	movs	r2, #7
 80025e8:	601a      	str	r2, [r3, #0]
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e010 	.word	0xe000e010
 80025f8:	e000e018 	.word	0xe000e018
 80025fc:	e000e014 	.word	0xe000e014

08002600 <vPortEnableVFP>:

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002600:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002610 <vPortEnableVFP+0x10>
 8002604:	6801      	ldr	r1, [r0, #0]
 8002606:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800260a:	6001      	str	r1, [r0, #0]
 800260c:	4770      	bx	lr
 800260e:	0000      	.short	0x0000
 8002610:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop

08002618 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002624:	f7fe fd26 	bl	8001074 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <pvPortMalloc+0x160>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002630:	f000 f908 	bl	8002844 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d012      	beq.n	8002660 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800263a:	2208      	movs	r2, #8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	3308      	adds	r3, #8
 8002646:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	43db      	mvns	r3, r3
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	429a      	cmp	r2, r3
 8002650:	d804      	bhi.n	800265c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	e001      	b.n	8002660 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db70      	blt.n	8002748 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d06d      	beq.n	8002748 <pvPortMalloc+0x130>
 800266c:	4b43      	ldr	r3, [pc, #268]	; (800277c <pvPortMalloc+0x164>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	429a      	cmp	r2, r3
 8002674:	d868      	bhi.n	8002748 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002676:	4b42      	ldr	r3, [pc, #264]	; (8002780 <pvPortMalloc+0x168>)
 8002678:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <pvPortMalloc+0x168>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002680:	e004      	b.n	800268c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	429a      	cmp	r2, r3
 8002694:	d903      	bls.n	800269e <pvPortMalloc+0x86>
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f1      	bne.n	8002682 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800269e:	4b36      	ldr	r3, [pc, #216]	; (8002778 <pvPortMalloc+0x160>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d04f      	beq.n	8002748 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2208      	movs	r2, #8
 80026ae:	4413      	add	r3, r2
 80026b0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	1ad2      	subs	r2, r2, r3
 80026c2:	2308      	movs	r3, #8
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d91f      	bls.n	800270a <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80026ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4413      	add	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <pvPortMalloc+0xda>
        __asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	613b      	str	r3, [r7, #16]
    }
 80026ee:	bf00      	nop
 80026f0:	e7fe      	b.n	80026f0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	1ad2      	subs	r2, r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002704:	6978      	ldr	r0, [r7, #20]
 8002706:	f000 f8f9 	bl	80028fc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <pvPortMalloc+0x164>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	4a19      	ldr	r2, [pc, #100]	; (800277c <pvPortMalloc+0x164>)
 8002716:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002718:	4b18      	ldr	r3, [pc, #96]	; (800277c <pvPortMalloc+0x164>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <pvPortMalloc+0x16c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d203      	bcs.n	800272c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002724:	4b15      	ldr	r3, [pc, #84]	; (800277c <pvPortMalloc+0x164>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a16      	ldr	r2, [pc, #88]	; (8002784 <pvPortMalloc+0x16c>)
 800272a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <pvPortMalloc+0x170>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	4a10      	ldr	r2, [pc, #64]	; (8002788 <pvPortMalloc+0x170>)
 8002746:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002748:	f7fe fca2 	bl	8001090 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <pvPortMalloc+0x154>
        __asm volatile
 8002756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275a:	f383 8811 	msr	BASEPRI, r3
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	60fb      	str	r3, [r7, #12]
    }
 8002768:	bf00      	nop
 800276a:	e7fe      	b.n	800276a <pvPortMalloc+0x152>
    return pvReturn;
 800276c:	69fb      	ldr	r3, [r7, #28]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3728      	adds	r7, #40	; 0x28
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20012e18 	.word	0x20012e18
 800277c:	20012e1c 	.word	0x20012e1c
 8002780:	20012e10 	.word	0x20012e10
 8002784:	20012e20 	.word	0x20012e20
 8002788:	20012e24 	.word	0x20012e24

0800278c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d049      	beq.n	8002832 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800279e:	2308      	movs	r3, #8
 80027a0:	425b      	negs	r3, r3
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4413      	add	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	db0a      	blt.n	80027ca <vPortFree+0x3e>
        __asm volatile
 80027b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	60fb      	str	r3, [r7, #12]
    }
 80027c6:	bf00      	nop
 80027c8:	e7fe      	b.n	80027c8 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <vPortFree+0x5c>
        __asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	60bb      	str	r3, [r7, #8]
    }
 80027e4:	bf00      	nop
 80027e6:	e7fe      	b.n	80027e6 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	0fdb      	lsrs	r3, r3, #31
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01c      	beq.n	8002832 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d118      	bne.n	8002832 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800280c:	f7fe fc32 	bl	8001074 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <vPortFree+0xb0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4413      	add	r3, r2
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <vPortFree+0xb0>)
 800281c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800281e:	6938      	ldr	r0, [r7, #16]
 8002820:	f000 f86c 	bl	80028fc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <vPortFree+0xb4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <vPortFree+0xb4>)
 800282c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800282e:	f7fe fc2f 	bl	8001090 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20012e1c 	.word	0x20012e1c
 8002840:	20012e28 	.word	0x20012e28

08002844 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800284a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800284e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002850:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <prvHeapInit+0xa4>)
 8002852:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3307      	adds	r3, #7
 8002862:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0307 	bic.w	r3, r3, #7
 800286a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <prvHeapInit+0xa4>)
 8002874:	4413      	add	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800287c:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <prvHeapInit+0xa8>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <prvHeapInit+0xa8>)
 8002884:	2200      	movs	r2, #0
 8002886:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	4413      	add	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002890:	2208      	movs	r2, #8
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0307 	bic.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <prvHeapInit+0xac>)
 80028a4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <prvHeapInit+0xac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2200      	movs	r2, #0
 80028ac:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <prvHeapInit+0xac>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	1ad2      	subs	r2, r2, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <prvHeapInit+0xac>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <prvHeapInit+0xb0>)
 80028d2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <prvHeapInit+0xb4>)
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	20000210 	.word	0x20000210
 80028ec:	20012e10 	.word	0x20012e10
 80028f0:	20012e18 	.word	0x20012e18
 80028f4:	20012e20 	.word	0x20012e20
 80028f8:	20012e1c 	.word	0x20012e1c

080028fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002904:	4b28      	ldr	r3, [pc, #160]	; (80029a8 <prvInsertBlockIntoFreeList+0xac>)
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e002      	b.n	8002910 <prvInsertBlockIntoFreeList+0x14>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d8f7      	bhi.n	800290a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4413      	add	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	d108      	bne.n	800293e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	441a      	add	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	441a      	add	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d118      	bne.n	8002984 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <prvInsertBlockIntoFreeList+0xb0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d00d      	beq.n	800297a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e008      	b.n	800298c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <prvInsertBlockIntoFreeList+0xb0>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e003      	b.n	800298c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	d002      	beq.n	800299a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20012e10 	.word	0x20012e10
 80029ac:	20012e18 	.word	0x20012e18

080029b0 <main>:

#include "my_tasks.h"
#include "main.h"

int main()
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
	taskSetup();
 80029b4:	f000 f805 	bl	80029c2 <taskSetup>
	initTasks();
 80029b8:	f000 f886 	bl	8002ac8 <initTasks>
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <taskSetup>:
int sendValue = 0;
int receivedValue;
/**
 * @brief This function is called, to setup/create required tasks
 */
void taskSetup(void) {
 80029c2:	b580      	push	{r7, lr}
 80029c4:	af00      	add	r7, sp, #0
	senderTaskCreate();
 80029c6:	f000 f805 	bl	80029d4 <senderTaskCreate>
	receiverTaskCreate();
 80029ca:	f000 f845 	bl	8002a58 <receiverTaskCreate>
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <senderTaskCreate>:

/**
 * @brief This function will create a sender queue task
 */
void senderTaskCreate(void) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af02      	add	r7, sp, #8
	xTaskCreate(
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <senderTaskCreate+0x20>)
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	2301      	movs	r3, #1
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	2300      	movs	r3, #0
 80029e4:	2282      	movs	r2, #130	; 0x82
 80029e6:	4904      	ldr	r1, [pc, #16]	; (80029f8 <senderTaskCreate+0x24>)
 80029e8:	4804      	ldr	r0, [pc, #16]	; (80029fc <senderTaskCreate+0x28>)
 80029ea:	f7fe f953 	bl	8000c94 <xTaskCreate>
			"Sender Queue Task",		// Name for a task
			configMINIMAL_STACK_SIZE,	// Stack size for a task
			NULL,						// Parameter of a task
			tskIDLE_PRIORITY + 1,		// Priority of a task
			&xsenderTaskHandle);		// Task handle
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20012e2c 	.word	0x20012e2c
 80029f8:	08003d28 	.word	0x08003d28
 80029fc:	08002a01 	.word	0x08002a01

08002a00 <senderTask>:

/**
 * @brief This is a function of senderTask
 */
void senderTask(void *pvParameter) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

	BaseType_t xStatus;

	while (1) {
		/* Send data to a Queue */
		xStatus = xQueueSend(xQueueTaskHandle, &sendValue, 0);
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <senderTask+0x48>)
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2200      	movs	r2, #0
 8002a10:	490e      	ldr	r1, [pc, #56]	; (8002a4c <senderTask+0x4c>)
 8002a12:	f7fd fdcf 	bl	80005b4 <xQueueGenericSend>
 8002a16:	60f8      	str	r0, [r7, #12]

		/* Check whether the data sent successfully or not to Queue */
		if(xStatus == pdPASS) {
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10b      	bne.n	8002a36 <senderTask+0x36>
			printf("Data sent: %d\n", sendValue);
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <senderTask+0x4c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4619      	mov	r1, r3
 8002a24:	480a      	ldr	r0, [pc, #40]	; (8002a50 <senderTask+0x50>)
 8002a26:	f000 f963 	bl	8002cf0 <iprintf>
			sendValue++;
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <senderTask+0x4c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <senderTask+0x4c>)
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e002      	b.n	8002a3c <senderTask+0x3c>
		} else {
			printf("Failed to send\n");
 8002a36:	4807      	ldr	r0, [pc, #28]	; (8002a54 <senderTask+0x54>)
 8002a38:	f000 f9e0 	bl	8002dfc <puts>
		}

		/* Delay for 1Second */
		vTaskDelay(pdMS_TO_TICKS(1000));
 8002a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a40:	f7fe fa92 	bl	8000f68 <vTaskDelay>
		xStatus = xQueueSend(xQueueTaskHandle, &sendValue, 0);
 8002a44:	e7e0      	b.n	8002a08 <senderTask+0x8>
 8002a46:	bf00      	nop
 8002a48:	20012e34 	.word	0x20012e34
 8002a4c:	20012e38 	.word	0x20012e38
 8002a50:	08003d3c 	.word	0x08003d3c
 8002a54:	08003d4c 	.word	0x08003d4c

08002a58 <receiverTaskCreate>:
}

/**
 * @brief This function will create a Queue Reciever Task
 */
void receiverTaskCreate(void) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af02      	add	r7, sp, #8
	xTaskCreate(
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <receiverTaskCreate+0x20>)
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	2301      	movs	r3, #1
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2300      	movs	r3, #0
 8002a68:	2282      	movs	r2, #130	; 0x82
 8002a6a:	4904      	ldr	r1, [pc, #16]	; (8002a7c <receiverTaskCreate+0x24>)
 8002a6c:	4804      	ldr	r0, [pc, #16]	; (8002a80 <receiverTaskCreate+0x28>)
 8002a6e:	f7fe f911 	bl	8000c94 <xTaskCreate>
			"Receiver Queue Task",		// Name of a task
			configMINIMAL_STACK_SIZE,	// Stack size for a task
			NULL,						// Task parameters
			tskIDLE_PRIORITY + 1,		// Priority of a task
			&xreceiverTaskHandle);		// Task handle
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20012e30 	.word	0x20012e30
 8002a7c:	08003d5c 	.word	0x08003d5c
 8002a80:	08002a85 	.word	0x08002a85

08002a84 <receiverTask>:

/**
 * @brief This is a function of receiverTask
 */
void receiverTask(void *pvParameter) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]


	while (1) {
		// Receive a value from the Queue
		if(xQueueReceive(xQueueTaskHandle, &receivedValue, portMAX_DELAY)) {
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <receiverTask+0x34>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	4909      	ldr	r1, [pc, #36]	; (8002abc <receiverTask+0x38>)
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fe8a 	bl	80007b0 <xQueueReceive>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <receiverTask+0x2c>
			printf("Received Value: %d\n", receivedValue);
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <receiverTask+0x38>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <receiverTask+0x3c>)
 8002aaa:	f000 f921 	bl	8002cf0 <iprintf>
 8002aae:	e7ed      	b.n	8002a8c <receiverTask+0x8>
		} else {
			printf("Failed to Received\n");
 8002ab0:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <receiverTask+0x40>)
 8002ab2:	f000 f9a3 	bl	8002dfc <puts>
		if(xQueueReceive(xQueueTaskHandle, &receivedValue, portMAX_DELAY)) {
 8002ab6:	e7e9      	b.n	8002a8c <receiverTask+0x8>
 8002ab8:	20012e34 	.word	0x20012e34
 8002abc:	20012e3c 	.word	0x20012e3c
 8002ac0:	08003d70 	.word	0x08003d70
 8002ac4:	08003d84 	.word	0x08003d84

08002ac8 <initTasks>:
}

/**
 * @brief This function is called, to start the task scheduler
 */
void initTasks(void) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	vTaskStartScheduler();
 8002acc:	f7fe fa80 	bl	8000fd0 <vTaskStartScheduler>
}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	e00a      	b.n	8002afc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ae6:	f3af 8000 	nop.w
 8002aea:	4601      	mov	r1, r0
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	60ba      	str	r2, [r7, #8]
 8002af2:	b2ca      	uxtb	r2, r1
 8002af4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3301      	adds	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	dbf0      	blt.n	8002ae6 <_read+0x12>
  }

  return len;
 8002b04:	687b      	ldr	r3, [r7, #4]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b086      	sub	sp, #24
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e009      	b.n	8002b34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	60ba      	str	r2, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	dbf1      	blt.n	8002b20 <_write+0x12>
  }
  return len;
 8002b3c:	687b      	ldr	r3, [r7, #4]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <_close>:

int _close(int file)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b6e:	605a      	str	r2, [r3, #4]
  return 0;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <_isatty>:

int _isatty(int file)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb8:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <_sbrk+0x5c>)
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <_sbrk+0x60>)
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <_sbrk+0x64>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <_sbrk+0x64>)
 8002bce:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <_sbrk+0x68>)
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <_sbrk+0x64>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d207      	bcs.n	8002bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be0:	f000 f846 	bl	8002c70 <__errno>
 8002be4:	4603      	mov	r3, r0
 8002be6:	220c      	movs	r2, #12
 8002be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	e009      	b.n	8002c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <_sbrk+0x64>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bf6:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <_sbrk+0x64>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <_sbrk+0x64>)
 8002c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20020000 	.word	0x20020000
 8002c10:	00000400 	.word	0x00000400
 8002c14:	20012e40 	.word	0x20012e40
 8002c18:	20012e58 	.word	0x20012e58

08002c1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c1c:	480d      	ldr	r0, [pc, #52]	; (8002c54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c24:	480c      	ldr	r0, [pc, #48]	; (8002c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c26:	490d      	ldr	r1, [pc, #52]	; (8002c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <LoopForever+0xe>)
  movs r3, #0
 8002c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c2c:	e002      	b.n	8002c34 <LoopCopyDataInit>

08002c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c32:	3304      	adds	r3, #4

08002c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c38:	d3f9      	bcc.n	8002c2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c3c:	4c0a      	ldr	r4, [pc, #40]	; (8002c68 <LoopForever+0x16>)
  movs r3, #0
 8002c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c40:	e001      	b.n	8002c46 <LoopFillZerobss>

08002c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c44:	3204      	adds	r2, #4

08002c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c48:	d3fb      	bcc.n	8002c42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c4a:	f000 f817 	bl	8002c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c4e:	f7ff feaf 	bl	80029b0 <main>

08002c52 <LoopForever>:

LoopForever:
  b LoopForever
 8002c52:	e7fe      	b.n	8002c52 <LoopForever>
  ldr   r0, =_estack
 8002c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c5c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002c60:	08003e38 	.word	0x08003e38
  ldr r2, =_sbss
 8002c64:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002c68:	20012e54 	.word	0x20012e54

08002c6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c6c:	e7fe      	b.n	8002c6c <ADC_IRQHandler>
	...

08002c70 <__errno>:
 8002c70:	4b01      	ldr	r3, [pc, #4]	; (8002c78 <__errno+0x8>)
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000008 	.word	0x20000008

08002c7c <__libc_init_array>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	4d0d      	ldr	r5, [pc, #52]	; (8002cb4 <__libc_init_array+0x38>)
 8002c80:	4c0d      	ldr	r4, [pc, #52]	; (8002cb8 <__libc_init_array+0x3c>)
 8002c82:	1b64      	subs	r4, r4, r5
 8002c84:	10a4      	asrs	r4, r4, #2
 8002c86:	2600      	movs	r6, #0
 8002c88:	42a6      	cmp	r6, r4
 8002c8a:	d109      	bne.n	8002ca0 <__libc_init_array+0x24>
 8002c8c:	4d0b      	ldr	r5, [pc, #44]	; (8002cbc <__libc_init_array+0x40>)
 8002c8e:	4c0c      	ldr	r4, [pc, #48]	; (8002cc0 <__libc_init_array+0x44>)
 8002c90:	f001 f832 	bl	8003cf8 <_init>
 8002c94:	1b64      	subs	r4, r4, r5
 8002c96:	10a4      	asrs	r4, r4, #2
 8002c98:	2600      	movs	r6, #0
 8002c9a:	42a6      	cmp	r6, r4
 8002c9c:	d105      	bne.n	8002caa <__libc_init_array+0x2e>
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca4:	4798      	blx	r3
 8002ca6:	3601      	adds	r6, #1
 8002ca8:	e7ee      	b.n	8002c88 <__libc_init_array+0xc>
 8002caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cae:	4798      	blx	r3
 8002cb0:	3601      	adds	r6, #1
 8002cb2:	e7f2      	b.n	8002c9a <__libc_init_array+0x1e>
 8002cb4:	08003e30 	.word	0x08003e30
 8002cb8:	08003e30 	.word	0x08003e30
 8002cbc:	08003e30 	.word	0x08003e30
 8002cc0:	08003e34 	.word	0x08003e34

08002cc4 <memcpy>:
 8002cc4:	440a      	add	r2, r1
 8002cc6:	4291      	cmp	r1, r2
 8002cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ccc:	d100      	bne.n	8002cd0 <memcpy+0xc>
 8002cce:	4770      	bx	lr
 8002cd0:	b510      	push	{r4, lr}
 8002cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cda:	4291      	cmp	r1, r2
 8002cdc:	d1f9      	bne.n	8002cd2 <memcpy+0xe>
 8002cde:	bd10      	pop	{r4, pc}

08002ce0 <memset>:
 8002ce0:	4402      	add	r2, r0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d100      	bne.n	8002cea <memset+0xa>
 8002ce8:	4770      	bx	lr
 8002cea:	f803 1b01 	strb.w	r1, [r3], #1
 8002cee:	e7f9      	b.n	8002ce4 <memset+0x4>

08002cf0 <iprintf>:
 8002cf0:	b40f      	push	{r0, r1, r2, r3}
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <iprintf+0x2c>)
 8002cf4:	b513      	push	{r0, r1, r4, lr}
 8002cf6:	681c      	ldr	r4, [r3, #0]
 8002cf8:	b124      	cbz	r4, 8002d04 <iprintf+0x14>
 8002cfa:	69a3      	ldr	r3, [r4, #24]
 8002cfc:	b913      	cbnz	r3, 8002d04 <iprintf+0x14>
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f000 fa5e 	bl	80031c0 <__sinit>
 8002d04:	ab05      	add	r3, sp, #20
 8002d06:	9a04      	ldr	r2, [sp, #16]
 8002d08:	68a1      	ldr	r1, [r4, #8]
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f000 fc67 	bl	80035e0 <_vfiprintf_r>
 8002d12:	b002      	add	sp, #8
 8002d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d18:	b004      	add	sp, #16
 8002d1a:	4770      	bx	lr
 8002d1c:	20000008 	.word	0x20000008

08002d20 <_puts_r>:
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	460e      	mov	r6, r1
 8002d24:	4605      	mov	r5, r0
 8002d26:	b118      	cbz	r0, 8002d30 <_puts_r+0x10>
 8002d28:	6983      	ldr	r3, [r0, #24]
 8002d2a:	b90b      	cbnz	r3, 8002d30 <_puts_r+0x10>
 8002d2c:	f000 fa48 	bl	80031c0 <__sinit>
 8002d30:	69ab      	ldr	r3, [r5, #24]
 8002d32:	68ac      	ldr	r4, [r5, #8]
 8002d34:	b913      	cbnz	r3, 8002d3c <_puts_r+0x1c>
 8002d36:	4628      	mov	r0, r5
 8002d38:	f000 fa42 	bl	80031c0 <__sinit>
 8002d3c:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <_puts_r+0xd0>)
 8002d3e:	429c      	cmp	r4, r3
 8002d40:	d120      	bne.n	8002d84 <_puts_r+0x64>
 8002d42:	686c      	ldr	r4, [r5, #4]
 8002d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d46:	07db      	lsls	r3, r3, #31
 8002d48:	d405      	bmi.n	8002d56 <_puts_r+0x36>
 8002d4a:	89a3      	ldrh	r3, [r4, #12]
 8002d4c:	0598      	lsls	r0, r3, #22
 8002d4e:	d402      	bmi.n	8002d56 <_puts_r+0x36>
 8002d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d52:	f000 fad3 	bl	80032fc <__retarget_lock_acquire_recursive>
 8002d56:	89a3      	ldrh	r3, [r4, #12]
 8002d58:	0719      	lsls	r1, r3, #28
 8002d5a:	d51d      	bpl.n	8002d98 <_puts_r+0x78>
 8002d5c:	6923      	ldr	r3, [r4, #16]
 8002d5e:	b1db      	cbz	r3, 8002d98 <_puts_r+0x78>
 8002d60:	3e01      	subs	r6, #1
 8002d62:	68a3      	ldr	r3, [r4, #8]
 8002d64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	60a3      	str	r3, [r4, #8]
 8002d6c:	bb39      	cbnz	r1, 8002dbe <_puts_r+0x9e>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	da38      	bge.n	8002de4 <_puts_r+0xc4>
 8002d72:	4622      	mov	r2, r4
 8002d74:	210a      	movs	r1, #10
 8002d76:	4628      	mov	r0, r5
 8002d78:	f000 f848 	bl	8002e0c <__swbuf_r>
 8002d7c:	3001      	adds	r0, #1
 8002d7e:	d011      	beq.n	8002da4 <_puts_r+0x84>
 8002d80:	250a      	movs	r5, #10
 8002d82:	e011      	b.n	8002da8 <_puts_r+0x88>
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <_puts_r+0xd4>)
 8002d86:	429c      	cmp	r4, r3
 8002d88:	d101      	bne.n	8002d8e <_puts_r+0x6e>
 8002d8a:	68ac      	ldr	r4, [r5, #8]
 8002d8c:	e7da      	b.n	8002d44 <_puts_r+0x24>
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <_puts_r+0xd8>)
 8002d90:	429c      	cmp	r4, r3
 8002d92:	bf08      	it	eq
 8002d94:	68ec      	ldreq	r4, [r5, #12]
 8002d96:	e7d5      	b.n	8002d44 <_puts_r+0x24>
 8002d98:	4621      	mov	r1, r4
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f000 f888 	bl	8002eb0 <__swsetup_r>
 8002da0:	2800      	cmp	r0, #0
 8002da2:	d0dd      	beq.n	8002d60 <_puts_r+0x40>
 8002da4:	f04f 35ff 	mov.w	r5, #4294967295
 8002da8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002daa:	07da      	lsls	r2, r3, #31
 8002dac:	d405      	bmi.n	8002dba <_puts_r+0x9a>
 8002dae:	89a3      	ldrh	r3, [r4, #12]
 8002db0:	059b      	lsls	r3, r3, #22
 8002db2:	d402      	bmi.n	8002dba <_puts_r+0x9a>
 8002db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002db6:	f000 faa2 	bl	80032fe <__retarget_lock_release_recursive>
 8002dba:	4628      	mov	r0, r5
 8002dbc:	bd70      	pop	{r4, r5, r6, pc}
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	da04      	bge.n	8002dcc <_puts_r+0xac>
 8002dc2:	69a2      	ldr	r2, [r4, #24]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	dc06      	bgt.n	8002dd6 <_puts_r+0xb6>
 8002dc8:	290a      	cmp	r1, #10
 8002dca:	d004      	beq.n	8002dd6 <_puts_r+0xb6>
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	6022      	str	r2, [r4, #0]
 8002dd2:	7019      	strb	r1, [r3, #0]
 8002dd4:	e7c5      	b.n	8002d62 <_puts_r+0x42>
 8002dd6:	4622      	mov	r2, r4
 8002dd8:	4628      	mov	r0, r5
 8002dda:	f000 f817 	bl	8002e0c <__swbuf_r>
 8002dde:	3001      	adds	r0, #1
 8002de0:	d1bf      	bne.n	8002d62 <_puts_r+0x42>
 8002de2:	e7df      	b.n	8002da4 <_puts_r+0x84>
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	250a      	movs	r5, #10
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	6022      	str	r2, [r4, #0]
 8002dec:	701d      	strb	r5, [r3, #0]
 8002dee:	e7db      	b.n	8002da8 <_puts_r+0x88>
 8002df0:	08003dbc 	.word	0x08003dbc
 8002df4:	08003ddc 	.word	0x08003ddc
 8002df8:	08003d9c 	.word	0x08003d9c

08002dfc <puts>:
 8002dfc:	4b02      	ldr	r3, [pc, #8]	; (8002e08 <puts+0xc>)
 8002dfe:	4601      	mov	r1, r0
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	f7ff bf8d 	b.w	8002d20 <_puts_r>
 8002e06:	bf00      	nop
 8002e08:	20000008 	.word	0x20000008

08002e0c <__swbuf_r>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	460e      	mov	r6, r1
 8002e10:	4614      	mov	r4, r2
 8002e12:	4605      	mov	r5, r0
 8002e14:	b118      	cbz	r0, 8002e1e <__swbuf_r+0x12>
 8002e16:	6983      	ldr	r3, [r0, #24]
 8002e18:	b90b      	cbnz	r3, 8002e1e <__swbuf_r+0x12>
 8002e1a:	f000 f9d1 	bl	80031c0 <__sinit>
 8002e1e:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <__swbuf_r+0x98>)
 8002e20:	429c      	cmp	r4, r3
 8002e22:	d12b      	bne.n	8002e7c <__swbuf_r+0x70>
 8002e24:	686c      	ldr	r4, [r5, #4]
 8002e26:	69a3      	ldr	r3, [r4, #24]
 8002e28:	60a3      	str	r3, [r4, #8]
 8002e2a:	89a3      	ldrh	r3, [r4, #12]
 8002e2c:	071a      	lsls	r2, r3, #28
 8002e2e:	d52f      	bpl.n	8002e90 <__swbuf_r+0x84>
 8002e30:	6923      	ldr	r3, [r4, #16]
 8002e32:	b36b      	cbz	r3, 8002e90 <__swbuf_r+0x84>
 8002e34:	6923      	ldr	r3, [r4, #16]
 8002e36:	6820      	ldr	r0, [r4, #0]
 8002e38:	1ac0      	subs	r0, r0, r3
 8002e3a:	6963      	ldr	r3, [r4, #20]
 8002e3c:	b2f6      	uxtb	r6, r6
 8002e3e:	4283      	cmp	r3, r0
 8002e40:	4637      	mov	r7, r6
 8002e42:	dc04      	bgt.n	8002e4e <__swbuf_r+0x42>
 8002e44:	4621      	mov	r1, r4
 8002e46:	4628      	mov	r0, r5
 8002e48:	f000 f926 	bl	8003098 <_fflush_r>
 8002e4c:	bb30      	cbnz	r0, 8002e9c <__swbuf_r+0x90>
 8002e4e:	68a3      	ldr	r3, [r4, #8]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	60a3      	str	r3, [r4, #8]
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	6022      	str	r2, [r4, #0]
 8002e5a:	701e      	strb	r6, [r3, #0]
 8002e5c:	6963      	ldr	r3, [r4, #20]
 8002e5e:	3001      	adds	r0, #1
 8002e60:	4283      	cmp	r3, r0
 8002e62:	d004      	beq.n	8002e6e <__swbuf_r+0x62>
 8002e64:	89a3      	ldrh	r3, [r4, #12]
 8002e66:	07db      	lsls	r3, r3, #31
 8002e68:	d506      	bpl.n	8002e78 <__swbuf_r+0x6c>
 8002e6a:	2e0a      	cmp	r6, #10
 8002e6c:	d104      	bne.n	8002e78 <__swbuf_r+0x6c>
 8002e6e:	4621      	mov	r1, r4
 8002e70:	4628      	mov	r0, r5
 8002e72:	f000 f911 	bl	8003098 <_fflush_r>
 8002e76:	b988      	cbnz	r0, 8002e9c <__swbuf_r+0x90>
 8002e78:	4638      	mov	r0, r7
 8002e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <__swbuf_r+0x9c>)
 8002e7e:	429c      	cmp	r4, r3
 8002e80:	d101      	bne.n	8002e86 <__swbuf_r+0x7a>
 8002e82:	68ac      	ldr	r4, [r5, #8]
 8002e84:	e7cf      	b.n	8002e26 <__swbuf_r+0x1a>
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <__swbuf_r+0xa0>)
 8002e88:	429c      	cmp	r4, r3
 8002e8a:	bf08      	it	eq
 8002e8c:	68ec      	ldreq	r4, [r5, #12]
 8002e8e:	e7ca      	b.n	8002e26 <__swbuf_r+0x1a>
 8002e90:	4621      	mov	r1, r4
 8002e92:	4628      	mov	r0, r5
 8002e94:	f000 f80c 	bl	8002eb0 <__swsetup_r>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	d0cb      	beq.n	8002e34 <__swbuf_r+0x28>
 8002e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8002ea0:	e7ea      	b.n	8002e78 <__swbuf_r+0x6c>
 8002ea2:	bf00      	nop
 8002ea4:	08003dbc 	.word	0x08003dbc
 8002ea8:	08003ddc 	.word	0x08003ddc
 8002eac:	08003d9c 	.word	0x08003d9c

08002eb0 <__swsetup_r>:
 8002eb0:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <__swsetup_r+0xcc>)
 8002eb2:	b570      	push	{r4, r5, r6, lr}
 8002eb4:	681d      	ldr	r5, [r3, #0]
 8002eb6:	4606      	mov	r6, r0
 8002eb8:	460c      	mov	r4, r1
 8002eba:	b125      	cbz	r5, 8002ec6 <__swsetup_r+0x16>
 8002ebc:	69ab      	ldr	r3, [r5, #24]
 8002ebe:	b913      	cbnz	r3, 8002ec6 <__swsetup_r+0x16>
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	f000 f97d 	bl	80031c0 <__sinit>
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <__swsetup_r+0xd0>)
 8002ec8:	429c      	cmp	r4, r3
 8002eca:	d10f      	bne.n	8002eec <__swsetup_r+0x3c>
 8002ecc:	686c      	ldr	r4, [r5, #4]
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ed4:	0719      	lsls	r1, r3, #28
 8002ed6:	d42c      	bmi.n	8002f32 <__swsetup_r+0x82>
 8002ed8:	06dd      	lsls	r5, r3, #27
 8002eda:	d411      	bmi.n	8002f00 <__swsetup_r+0x50>
 8002edc:	2309      	movs	r3, #9
 8002ede:	6033      	str	r3, [r6, #0]
 8002ee0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ee4:	81a3      	strh	r3, [r4, #12]
 8002ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eea:	e03e      	b.n	8002f6a <__swsetup_r+0xba>
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <__swsetup_r+0xd4>)
 8002eee:	429c      	cmp	r4, r3
 8002ef0:	d101      	bne.n	8002ef6 <__swsetup_r+0x46>
 8002ef2:	68ac      	ldr	r4, [r5, #8]
 8002ef4:	e7eb      	b.n	8002ece <__swsetup_r+0x1e>
 8002ef6:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <__swsetup_r+0xd8>)
 8002ef8:	429c      	cmp	r4, r3
 8002efa:	bf08      	it	eq
 8002efc:	68ec      	ldreq	r4, [r5, #12]
 8002efe:	e7e6      	b.n	8002ece <__swsetup_r+0x1e>
 8002f00:	0758      	lsls	r0, r3, #29
 8002f02:	d512      	bpl.n	8002f2a <__swsetup_r+0x7a>
 8002f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f06:	b141      	cbz	r1, 8002f1a <__swsetup_r+0x6a>
 8002f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f0c:	4299      	cmp	r1, r3
 8002f0e:	d002      	beq.n	8002f16 <__swsetup_r+0x66>
 8002f10:	4630      	mov	r0, r6
 8002f12:	f000 fa5b 	bl	80033cc <_free_r>
 8002f16:	2300      	movs	r3, #0
 8002f18:	6363      	str	r3, [r4, #52]	; 0x34
 8002f1a:	89a3      	ldrh	r3, [r4, #12]
 8002f1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f20:	81a3      	strh	r3, [r4, #12]
 8002f22:	2300      	movs	r3, #0
 8002f24:	6063      	str	r3, [r4, #4]
 8002f26:	6923      	ldr	r3, [r4, #16]
 8002f28:	6023      	str	r3, [r4, #0]
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	81a3      	strh	r3, [r4, #12]
 8002f32:	6923      	ldr	r3, [r4, #16]
 8002f34:	b94b      	cbnz	r3, 8002f4a <__swsetup_r+0x9a>
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f40:	d003      	beq.n	8002f4a <__swsetup_r+0x9a>
 8002f42:	4621      	mov	r1, r4
 8002f44:	4630      	mov	r0, r6
 8002f46:	f000 fa01 	bl	800334c <__smakebuf_r>
 8002f4a:	89a0      	ldrh	r0, [r4, #12]
 8002f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f50:	f010 0301 	ands.w	r3, r0, #1
 8002f54:	d00a      	beq.n	8002f6c <__swsetup_r+0xbc>
 8002f56:	2300      	movs	r3, #0
 8002f58:	60a3      	str	r3, [r4, #8]
 8002f5a:	6963      	ldr	r3, [r4, #20]
 8002f5c:	425b      	negs	r3, r3
 8002f5e:	61a3      	str	r3, [r4, #24]
 8002f60:	6923      	ldr	r3, [r4, #16]
 8002f62:	b943      	cbnz	r3, 8002f76 <__swsetup_r+0xc6>
 8002f64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f68:	d1ba      	bne.n	8002ee0 <__swsetup_r+0x30>
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	0781      	lsls	r1, r0, #30
 8002f6e:	bf58      	it	pl
 8002f70:	6963      	ldrpl	r3, [r4, #20]
 8002f72:	60a3      	str	r3, [r4, #8]
 8002f74:	e7f4      	b.n	8002f60 <__swsetup_r+0xb0>
 8002f76:	2000      	movs	r0, #0
 8002f78:	e7f7      	b.n	8002f6a <__swsetup_r+0xba>
 8002f7a:	bf00      	nop
 8002f7c:	20000008 	.word	0x20000008
 8002f80:	08003dbc 	.word	0x08003dbc
 8002f84:	08003ddc 	.word	0x08003ddc
 8002f88:	08003d9c 	.word	0x08003d9c

08002f8c <__sflush_r>:
 8002f8c:	898a      	ldrh	r2, [r1, #12]
 8002f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f92:	4605      	mov	r5, r0
 8002f94:	0710      	lsls	r0, r2, #28
 8002f96:	460c      	mov	r4, r1
 8002f98:	d458      	bmi.n	800304c <__sflush_r+0xc0>
 8002f9a:	684b      	ldr	r3, [r1, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	dc05      	bgt.n	8002fac <__sflush_r+0x20>
 8002fa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	dc02      	bgt.n	8002fac <__sflush_r+0x20>
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fae:	2e00      	cmp	r6, #0
 8002fb0:	d0f9      	beq.n	8002fa6 <__sflush_r+0x1a>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fb8:	682f      	ldr	r7, [r5, #0]
 8002fba:	602b      	str	r3, [r5, #0]
 8002fbc:	d032      	beq.n	8003024 <__sflush_r+0x98>
 8002fbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fc0:	89a3      	ldrh	r3, [r4, #12]
 8002fc2:	075a      	lsls	r2, r3, #29
 8002fc4:	d505      	bpl.n	8002fd2 <__sflush_r+0x46>
 8002fc6:	6863      	ldr	r3, [r4, #4]
 8002fc8:	1ac0      	subs	r0, r0, r3
 8002fca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fcc:	b10b      	cbz	r3, 8002fd2 <__sflush_r+0x46>
 8002fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fd0:	1ac0      	subs	r0, r0, r3
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fd8:	6a21      	ldr	r1, [r4, #32]
 8002fda:	4628      	mov	r0, r5
 8002fdc:	47b0      	blx	r6
 8002fde:	1c43      	adds	r3, r0, #1
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	d106      	bne.n	8002ff2 <__sflush_r+0x66>
 8002fe4:	6829      	ldr	r1, [r5, #0]
 8002fe6:	291d      	cmp	r1, #29
 8002fe8:	d82c      	bhi.n	8003044 <__sflush_r+0xb8>
 8002fea:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <__sflush_r+0x108>)
 8002fec:	40ca      	lsrs	r2, r1
 8002fee:	07d6      	lsls	r6, r2, #31
 8002ff0:	d528      	bpl.n	8003044 <__sflush_r+0xb8>
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	6062      	str	r2, [r4, #4]
 8002ff6:	04d9      	lsls	r1, r3, #19
 8002ff8:	6922      	ldr	r2, [r4, #16]
 8002ffa:	6022      	str	r2, [r4, #0]
 8002ffc:	d504      	bpl.n	8003008 <__sflush_r+0x7c>
 8002ffe:	1c42      	adds	r2, r0, #1
 8003000:	d101      	bne.n	8003006 <__sflush_r+0x7a>
 8003002:	682b      	ldr	r3, [r5, #0]
 8003004:	b903      	cbnz	r3, 8003008 <__sflush_r+0x7c>
 8003006:	6560      	str	r0, [r4, #84]	; 0x54
 8003008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800300a:	602f      	str	r7, [r5, #0]
 800300c:	2900      	cmp	r1, #0
 800300e:	d0ca      	beq.n	8002fa6 <__sflush_r+0x1a>
 8003010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003014:	4299      	cmp	r1, r3
 8003016:	d002      	beq.n	800301e <__sflush_r+0x92>
 8003018:	4628      	mov	r0, r5
 800301a:	f000 f9d7 	bl	80033cc <_free_r>
 800301e:	2000      	movs	r0, #0
 8003020:	6360      	str	r0, [r4, #52]	; 0x34
 8003022:	e7c1      	b.n	8002fa8 <__sflush_r+0x1c>
 8003024:	6a21      	ldr	r1, [r4, #32]
 8003026:	2301      	movs	r3, #1
 8003028:	4628      	mov	r0, r5
 800302a:	47b0      	blx	r6
 800302c:	1c41      	adds	r1, r0, #1
 800302e:	d1c7      	bne.n	8002fc0 <__sflush_r+0x34>
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0c4      	beq.n	8002fc0 <__sflush_r+0x34>
 8003036:	2b1d      	cmp	r3, #29
 8003038:	d001      	beq.n	800303e <__sflush_r+0xb2>
 800303a:	2b16      	cmp	r3, #22
 800303c:	d101      	bne.n	8003042 <__sflush_r+0xb6>
 800303e:	602f      	str	r7, [r5, #0]
 8003040:	e7b1      	b.n	8002fa6 <__sflush_r+0x1a>
 8003042:	89a3      	ldrh	r3, [r4, #12]
 8003044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003048:	81a3      	strh	r3, [r4, #12]
 800304a:	e7ad      	b.n	8002fa8 <__sflush_r+0x1c>
 800304c:	690f      	ldr	r7, [r1, #16]
 800304e:	2f00      	cmp	r7, #0
 8003050:	d0a9      	beq.n	8002fa6 <__sflush_r+0x1a>
 8003052:	0793      	lsls	r3, r2, #30
 8003054:	680e      	ldr	r6, [r1, #0]
 8003056:	bf08      	it	eq
 8003058:	694b      	ldreq	r3, [r1, #20]
 800305a:	600f      	str	r7, [r1, #0]
 800305c:	bf18      	it	ne
 800305e:	2300      	movne	r3, #0
 8003060:	eba6 0807 	sub.w	r8, r6, r7
 8003064:	608b      	str	r3, [r1, #8]
 8003066:	f1b8 0f00 	cmp.w	r8, #0
 800306a:	dd9c      	ble.n	8002fa6 <__sflush_r+0x1a>
 800306c:	6a21      	ldr	r1, [r4, #32]
 800306e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003070:	4643      	mov	r3, r8
 8003072:	463a      	mov	r2, r7
 8003074:	4628      	mov	r0, r5
 8003076:	47b0      	blx	r6
 8003078:	2800      	cmp	r0, #0
 800307a:	dc06      	bgt.n	800308a <__sflush_r+0xfe>
 800307c:	89a3      	ldrh	r3, [r4, #12]
 800307e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003082:	81a3      	strh	r3, [r4, #12]
 8003084:	f04f 30ff 	mov.w	r0, #4294967295
 8003088:	e78e      	b.n	8002fa8 <__sflush_r+0x1c>
 800308a:	4407      	add	r7, r0
 800308c:	eba8 0800 	sub.w	r8, r8, r0
 8003090:	e7e9      	b.n	8003066 <__sflush_r+0xda>
 8003092:	bf00      	nop
 8003094:	20400001 	.word	0x20400001

08003098 <_fflush_r>:
 8003098:	b538      	push	{r3, r4, r5, lr}
 800309a:	690b      	ldr	r3, [r1, #16]
 800309c:	4605      	mov	r5, r0
 800309e:	460c      	mov	r4, r1
 80030a0:	b913      	cbnz	r3, 80030a8 <_fflush_r+0x10>
 80030a2:	2500      	movs	r5, #0
 80030a4:	4628      	mov	r0, r5
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	b118      	cbz	r0, 80030b2 <_fflush_r+0x1a>
 80030aa:	6983      	ldr	r3, [r0, #24]
 80030ac:	b90b      	cbnz	r3, 80030b2 <_fflush_r+0x1a>
 80030ae:	f000 f887 	bl	80031c0 <__sinit>
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <_fflush_r+0x6c>)
 80030b4:	429c      	cmp	r4, r3
 80030b6:	d11b      	bne.n	80030f0 <_fflush_r+0x58>
 80030b8:	686c      	ldr	r4, [r5, #4]
 80030ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ef      	beq.n	80030a2 <_fflush_r+0xa>
 80030c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030c4:	07d0      	lsls	r0, r2, #31
 80030c6:	d404      	bmi.n	80030d2 <_fflush_r+0x3a>
 80030c8:	0599      	lsls	r1, r3, #22
 80030ca:	d402      	bmi.n	80030d2 <_fflush_r+0x3a>
 80030cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ce:	f000 f915 	bl	80032fc <__retarget_lock_acquire_recursive>
 80030d2:	4628      	mov	r0, r5
 80030d4:	4621      	mov	r1, r4
 80030d6:	f7ff ff59 	bl	8002f8c <__sflush_r>
 80030da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030dc:	07da      	lsls	r2, r3, #31
 80030de:	4605      	mov	r5, r0
 80030e0:	d4e0      	bmi.n	80030a4 <_fflush_r+0xc>
 80030e2:	89a3      	ldrh	r3, [r4, #12]
 80030e4:	059b      	lsls	r3, r3, #22
 80030e6:	d4dd      	bmi.n	80030a4 <_fflush_r+0xc>
 80030e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ea:	f000 f908 	bl	80032fe <__retarget_lock_release_recursive>
 80030ee:	e7d9      	b.n	80030a4 <_fflush_r+0xc>
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <_fflush_r+0x70>)
 80030f2:	429c      	cmp	r4, r3
 80030f4:	d101      	bne.n	80030fa <_fflush_r+0x62>
 80030f6:	68ac      	ldr	r4, [r5, #8]
 80030f8:	e7df      	b.n	80030ba <_fflush_r+0x22>
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <_fflush_r+0x74>)
 80030fc:	429c      	cmp	r4, r3
 80030fe:	bf08      	it	eq
 8003100:	68ec      	ldreq	r4, [r5, #12]
 8003102:	e7da      	b.n	80030ba <_fflush_r+0x22>
 8003104:	08003dbc 	.word	0x08003dbc
 8003108:	08003ddc 	.word	0x08003ddc
 800310c:	08003d9c 	.word	0x08003d9c

08003110 <std>:
 8003110:	2300      	movs	r3, #0
 8003112:	b510      	push	{r4, lr}
 8003114:	4604      	mov	r4, r0
 8003116:	e9c0 3300 	strd	r3, r3, [r0]
 800311a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800311e:	6083      	str	r3, [r0, #8]
 8003120:	8181      	strh	r1, [r0, #12]
 8003122:	6643      	str	r3, [r0, #100]	; 0x64
 8003124:	81c2      	strh	r2, [r0, #14]
 8003126:	6183      	str	r3, [r0, #24]
 8003128:	4619      	mov	r1, r3
 800312a:	2208      	movs	r2, #8
 800312c:	305c      	adds	r0, #92	; 0x5c
 800312e:	f7ff fdd7 	bl	8002ce0 <memset>
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <std+0x38>)
 8003134:	6263      	str	r3, [r4, #36]	; 0x24
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <std+0x3c>)
 8003138:	62a3      	str	r3, [r4, #40]	; 0x28
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <std+0x40>)
 800313c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <std+0x44>)
 8003140:	6224      	str	r4, [r4, #32]
 8003142:	6323      	str	r3, [r4, #48]	; 0x30
 8003144:	bd10      	pop	{r4, pc}
 8003146:	bf00      	nop
 8003148:	08003b89 	.word	0x08003b89
 800314c:	08003bab 	.word	0x08003bab
 8003150:	08003be3 	.word	0x08003be3
 8003154:	08003c07 	.word	0x08003c07

08003158 <_cleanup_r>:
 8003158:	4901      	ldr	r1, [pc, #4]	; (8003160 <_cleanup_r+0x8>)
 800315a:	f000 b8af 	b.w	80032bc <_fwalk_reent>
 800315e:	bf00      	nop
 8003160:	08003099 	.word	0x08003099

08003164 <__sfmoreglue>:
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	2268      	movs	r2, #104	; 0x68
 8003168:	1e4d      	subs	r5, r1, #1
 800316a:	4355      	muls	r5, r2
 800316c:	460e      	mov	r6, r1
 800316e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003172:	f000 f997 	bl	80034a4 <_malloc_r>
 8003176:	4604      	mov	r4, r0
 8003178:	b140      	cbz	r0, 800318c <__sfmoreglue+0x28>
 800317a:	2100      	movs	r1, #0
 800317c:	e9c0 1600 	strd	r1, r6, [r0]
 8003180:	300c      	adds	r0, #12
 8003182:	60a0      	str	r0, [r4, #8]
 8003184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003188:	f7ff fdaa 	bl	8002ce0 <memset>
 800318c:	4620      	mov	r0, r4
 800318e:	bd70      	pop	{r4, r5, r6, pc}

08003190 <__sfp_lock_acquire>:
 8003190:	4801      	ldr	r0, [pc, #4]	; (8003198 <__sfp_lock_acquire+0x8>)
 8003192:	f000 b8b3 	b.w	80032fc <__retarget_lock_acquire_recursive>
 8003196:	bf00      	nop
 8003198:	20012e45 	.word	0x20012e45

0800319c <__sfp_lock_release>:
 800319c:	4801      	ldr	r0, [pc, #4]	; (80031a4 <__sfp_lock_release+0x8>)
 800319e:	f000 b8ae 	b.w	80032fe <__retarget_lock_release_recursive>
 80031a2:	bf00      	nop
 80031a4:	20012e45 	.word	0x20012e45

080031a8 <__sinit_lock_acquire>:
 80031a8:	4801      	ldr	r0, [pc, #4]	; (80031b0 <__sinit_lock_acquire+0x8>)
 80031aa:	f000 b8a7 	b.w	80032fc <__retarget_lock_acquire_recursive>
 80031ae:	bf00      	nop
 80031b0:	20012e46 	.word	0x20012e46

080031b4 <__sinit_lock_release>:
 80031b4:	4801      	ldr	r0, [pc, #4]	; (80031bc <__sinit_lock_release+0x8>)
 80031b6:	f000 b8a2 	b.w	80032fe <__retarget_lock_release_recursive>
 80031ba:	bf00      	nop
 80031bc:	20012e46 	.word	0x20012e46

080031c0 <__sinit>:
 80031c0:	b510      	push	{r4, lr}
 80031c2:	4604      	mov	r4, r0
 80031c4:	f7ff fff0 	bl	80031a8 <__sinit_lock_acquire>
 80031c8:	69a3      	ldr	r3, [r4, #24]
 80031ca:	b11b      	cbz	r3, 80031d4 <__sinit+0x14>
 80031cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031d0:	f7ff bff0 	b.w	80031b4 <__sinit_lock_release>
 80031d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031d8:	6523      	str	r3, [r4, #80]	; 0x50
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <__sinit+0x68>)
 80031dc:	4a13      	ldr	r2, [pc, #76]	; (800322c <__sinit+0x6c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80031e2:	42a3      	cmp	r3, r4
 80031e4:	bf04      	itt	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	61a3      	streq	r3, [r4, #24]
 80031ea:	4620      	mov	r0, r4
 80031ec:	f000 f820 	bl	8003230 <__sfp>
 80031f0:	6060      	str	r0, [r4, #4]
 80031f2:	4620      	mov	r0, r4
 80031f4:	f000 f81c 	bl	8003230 <__sfp>
 80031f8:	60a0      	str	r0, [r4, #8]
 80031fa:	4620      	mov	r0, r4
 80031fc:	f000 f818 	bl	8003230 <__sfp>
 8003200:	2200      	movs	r2, #0
 8003202:	60e0      	str	r0, [r4, #12]
 8003204:	2104      	movs	r1, #4
 8003206:	6860      	ldr	r0, [r4, #4]
 8003208:	f7ff ff82 	bl	8003110 <std>
 800320c:	68a0      	ldr	r0, [r4, #8]
 800320e:	2201      	movs	r2, #1
 8003210:	2109      	movs	r1, #9
 8003212:	f7ff ff7d 	bl	8003110 <std>
 8003216:	68e0      	ldr	r0, [r4, #12]
 8003218:	2202      	movs	r2, #2
 800321a:	2112      	movs	r1, #18
 800321c:	f7ff ff78 	bl	8003110 <std>
 8003220:	2301      	movs	r3, #1
 8003222:	61a3      	str	r3, [r4, #24]
 8003224:	e7d2      	b.n	80031cc <__sinit+0xc>
 8003226:	bf00      	nop
 8003228:	08003d98 	.word	0x08003d98
 800322c:	08003159 	.word	0x08003159

08003230 <__sfp>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	4607      	mov	r7, r0
 8003234:	f7ff ffac 	bl	8003190 <__sfp_lock_acquire>
 8003238:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <__sfp+0x84>)
 800323a:	681e      	ldr	r6, [r3, #0]
 800323c:	69b3      	ldr	r3, [r6, #24]
 800323e:	b913      	cbnz	r3, 8003246 <__sfp+0x16>
 8003240:	4630      	mov	r0, r6
 8003242:	f7ff ffbd 	bl	80031c0 <__sinit>
 8003246:	3648      	adds	r6, #72	; 0x48
 8003248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800324c:	3b01      	subs	r3, #1
 800324e:	d503      	bpl.n	8003258 <__sfp+0x28>
 8003250:	6833      	ldr	r3, [r6, #0]
 8003252:	b30b      	cbz	r3, 8003298 <__sfp+0x68>
 8003254:	6836      	ldr	r6, [r6, #0]
 8003256:	e7f7      	b.n	8003248 <__sfp+0x18>
 8003258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800325c:	b9d5      	cbnz	r5, 8003294 <__sfp+0x64>
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <__sfp+0x88>)
 8003260:	60e3      	str	r3, [r4, #12]
 8003262:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003266:	6665      	str	r5, [r4, #100]	; 0x64
 8003268:	f000 f847 	bl	80032fa <__retarget_lock_init_recursive>
 800326c:	f7ff ff96 	bl	800319c <__sfp_lock_release>
 8003270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003278:	6025      	str	r5, [r4, #0]
 800327a:	61a5      	str	r5, [r4, #24]
 800327c:	2208      	movs	r2, #8
 800327e:	4629      	mov	r1, r5
 8003280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003284:	f7ff fd2c 	bl	8002ce0 <memset>
 8003288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800328c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003290:	4620      	mov	r0, r4
 8003292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003294:	3468      	adds	r4, #104	; 0x68
 8003296:	e7d9      	b.n	800324c <__sfp+0x1c>
 8003298:	2104      	movs	r1, #4
 800329a:	4638      	mov	r0, r7
 800329c:	f7ff ff62 	bl	8003164 <__sfmoreglue>
 80032a0:	4604      	mov	r4, r0
 80032a2:	6030      	str	r0, [r6, #0]
 80032a4:	2800      	cmp	r0, #0
 80032a6:	d1d5      	bne.n	8003254 <__sfp+0x24>
 80032a8:	f7ff ff78 	bl	800319c <__sfp_lock_release>
 80032ac:	230c      	movs	r3, #12
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	e7ee      	b.n	8003290 <__sfp+0x60>
 80032b2:	bf00      	nop
 80032b4:	08003d98 	.word	0x08003d98
 80032b8:	ffff0001 	.word	0xffff0001

080032bc <_fwalk_reent>:
 80032bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032c0:	4606      	mov	r6, r0
 80032c2:	4688      	mov	r8, r1
 80032c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032c8:	2700      	movs	r7, #0
 80032ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032ce:	f1b9 0901 	subs.w	r9, r9, #1
 80032d2:	d505      	bpl.n	80032e0 <_fwalk_reent+0x24>
 80032d4:	6824      	ldr	r4, [r4, #0]
 80032d6:	2c00      	cmp	r4, #0
 80032d8:	d1f7      	bne.n	80032ca <_fwalk_reent+0xe>
 80032da:	4638      	mov	r0, r7
 80032dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032e0:	89ab      	ldrh	r3, [r5, #12]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d907      	bls.n	80032f6 <_fwalk_reent+0x3a>
 80032e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032ea:	3301      	adds	r3, #1
 80032ec:	d003      	beq.n	80032f6 <_fwalk_reent+0x3a>
 80032ee:	4629      	mov	r1, r5
 80032f0:	4630      	mov	r0, r6
 80032f2:	47c0      	blx	r8
 80032f4:	4307      	orrs	r7, r0
 80032f6:	3568      	adds	r5, #104	; 0x68
 80032f8:	e7e9      	b.n	80032ce <_fwalk_reent+0x12>

080032fa <__retarget_lock_init_recursive>:
 80032fa:	4770      	bx	lr

080032fc <__retarget_lock_acquire_recursive>:
 80032fc:	4770      	bx	lr

080032fe <__retarget_lock_release_recursive>:
 80032fe:	4770      	bx	lr

08003300 <__swhatbuf_r>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	460e      	mov	r6, r1
 8003304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003308:	2900      	cmp	r1, #0
 800330a:	b096      	sub	sp, #88	; 0x58
 800330c:	4614      	mov	r4, r2
 800330e:	461d      	mov	r5, r3
 8003310:	da08      	bge.n	8003324 <__swhatbuf_r+0x24>
 8003312:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	602a      	str	r2, [r5, #0]
 800331a:	061a      	lsls	r2, r3, #24
 800331c:	d410      	bmi.n	8003340 <__swhatbuf_r+0x40>
 800331e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003322:	e00e      	b.n	8003342 <__swhatbuf_r+0x42>
 8003324:	466a      	mov	r2, sp
 8003326:	f000 fc95 	bl	8003c54 <_fstat_r>
 800332a:	2800      	cmp	r0, #0
 800332c:	dbf1      	blt.n	8003312 <__swhatbuf_r+0x12>
 800332e:	9a01      	ldr	r2, [sp, #4]
 8003330:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003334:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003338:	425a      	negs	r2, r3
 800333a:	415a      	adcs	r2, r3
 800333c:	602a      	str	r2, [r5, #0]
 800333e:	e7ee      	b.n	800331e <__swhatbuf_r+0x1e>
 8003340:	2340      	movs	r3, #64	; 0x40
 8003342:	2000      	movs	r0, #0
 8003344:	6023      	str	r3, [r4, #0]
 8003346:	b016      	add	sp, #88	; 0x58
 8003348:	bd70      	pop	{r4, r5, r6, pc}
	...

0800334c <__smakebuf_r>:
 800334c:	898b      	ldrh	r3, [r1, #12]
 800334e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003350:	079d      	lsls	r5, r3, #30
 8003352:	4606      	mov	r6, r0
 8003354:	460c      	mov	r4, r1
 8003356:	d507      	bpl.n	8003368 <__smakebuf_r+0x1c>
 8003358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	6123      	str	r3, [r4, #16]
 8003360:	2301      	movs	r3, #1
 8003362:	6163      	str	r3, [r4, #20]
 8003364:	b002      	add	sp, #8
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	ab01      	add	r3, sp, #4
 800336a:	466a      	mov	r2, sp
 800336c:	f7ff ffc8 	bl	8003300 <__swhatbuf_r>
 8003370:	9900      	ldr	r1, [sp, #0]
 8003372:	4605      	mov	r5, r0
 8003374:	4630      	mov	r0, r6
 8003376:	f000 f895 	bl	80034a4 <_malloc_r>
 800337a:	b948      	cbnz	r0, 8003390 <__smakebuf_r+0x44>
 800337c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003380:	059a      	lsls	r2, r3, #22
 8003382:	d4ef      	bmi.n	8003364 <__smakebuf_r+0x18>
 8003384:	f023 0303 	bic.w	r3, r3, #3
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	81a3      	strh	r3, [r4, #12]
 800338e:	e7e3      	b.n	8003358 <__smakebuf_r+0xc>
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <__smakebuf_r+0x7c>)
 8003392:	62b3      	str	r3, [r6, #40]	; 0x28
 8003394:	89a3      	ldrh	r3, [r4, #12]
 8003396:	6020      	str	r0, [r4, #0]
 8003398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339c:	81a3      	strh	r3, [r4, #12]
 800339e:	9b00      	ldr	r3, [sp, #0]
 80033a0:	6163      	str	r3, [r4, #20]
 80033a2:	9b01      	ldr	r3, [sp, #4]
 80033a4:	6120      	str	r0, [r4, #16]
 80033a6:	b15b      	cbz	r3, 80033c0 <__smakebuf_r+0x74>
 80033a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ac:	4630      	mov	r0, r6
 80033ae:	f000 fc63 	bl	8003c78 <_isatty_r>
 80033b2:	b128      	cbz	r0, 80033c0 <__smakebuf_r+0x74>
 80033b4:	89a3      	ldrh	r3, [r4, #12]
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	89a0      	ldrh	r0, [r4, #12]
 80033c2:	4305      	orrs	r5, r0
 80033c4:	81a5      	strh	r5, [r4, #12]
 80033c6:	e7cd      	b.n	8003364 <__smakebuf_r+0x18>
 80033c8:	08003159 	.word	0x08003159

080033cc <_free_r>:
 80033cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033ce:	2900      	cmp	r1, #0
 80033d0:	d044      	beq.n	800345c <_free_r+0x90>
 80033d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033d6:	9001      	str	r0, [sp, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f1a1 0404 	sub.w	r4, r1, #4
 80033de:	bfb8      	it	lt
 80033e0:	18e4      	addlt	r4, r4, r3
 80033e2:	f000 fc6b 	bl	8003cbc <__malloc_lock>
 80033e6:	4a1e      	ldr	r2, [pc, #120]	; (8003460 <_free_r+0x94>)
 80033e8:	9801      	ldr	r0, [sp, #4]
 80033ea:	6813      	ldr	r3, [r2, #0]
 80033ec:	b933      	cbnz	r3, 80033fc <_free_r+0x30>
 80033ee:	6063      	str	r3, [r4, #4]
 80033f0:	6014      	str	r4, [r2, #0]
 80033f2:	b003      	add	sp, #12
 80033f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033f8:	f000 bc66 	b.w	8003cc8 <__malloc_unlock>
 80033fc:	42a3      	cmp	r3, r4
 80033fe:	d908      	bls.n	8003412 <_free_r+0x46>
 8003400:	6825      	ldr	r5, [r4, #0]
 8003402:	1961      	adds	r1, r4, r5
 8003404:	428b      	cmp	r3, r1
 8003406:	bf01      	itttt	eq
 8003408:	6819      	ldreq	r1, [r3, #0]
 800340a:	685b      	ldreq	r3, [r3, #4]
 800340c:	1949      	addeq	r1, r1, r5
 800340e:	6021      	streq	r1, [r4, #0]
 8003410:	e7ed      	b.n	80033ee <_free_r+0x22>
 8003412:	461a      	mov	r2, r3
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	b10b      	cbz	r3, 800341c <_free_r+0x50>
 8003418:	42a3      	cmp	r3, r4
 800341a:	d9fa      	bls.n	8003412 <_free_r+0x46>
 800341c:	6811      	ldr	r1, [r2, #0]
 800341e:	1855      	adds	r5, r2, r1
 8003420:	42a5      	cmp	r5, r4
 8003422:	d10b      	bne.n	800343c <_free_r+0x70>
 8003424:	6824      	ldr	r4, [r4, #0]
 8003426:	4421      	add	r1, r4
 8003428:	1854      	adds	r4, r2, r1
 800342a:	42a3      	cmp	r3, r4
 800342c:	6011      	str	r1, [r2, #0]
 800342e:	d1e0      	bne.n	80033f2 <_free_r+0x26>
 8003430:	681c      	ldr	r4, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	6053      	str	r3, [r2, #4]
 8003436:	4421      	add	r1, r4
 8003438:	6011      	str	r1, [r2, #0]
 800343a:	e7da      	b.n	80033f2 <_free_r+0x26>
 800343c:	d902      	bls.n	8003444 <_free_r+0x78>
 800343e:	230c      	movs	r3, #12
 8003440:	6003      	str	r3, [r0, #0]
 8003442:	e7d6      	b.n	80033f2 <_free_r+0x26>
 8003444:	6825      	ldr	r5, [r4, #0]
 8003446:	1961      	adds	r1, r4, r5
 8003448:	428b      	cmp	r3, r1
 800344a:	bf04      	itt	eq
 800344c:	6819      	ldreq	r1, [r3, #0]
 800344e:	685b      	ldreq	r3, [r3, #4]
 8003450:	6063      	str	r3, [r4, #4]
 8003452:	bf04      	itt	eq
 8003454:	1949      	addeq	r1, r1, r5
 8003456:	6021      	streq	r1, [r4, #0]
 8003458:	6054      	str	r4, [r2, #4]
 800345a:	e7ca      	b.n	80033f2 <_free_r+0x26>
 800345c:	b003      	add	sp, #12
 800345e:	bd30      	pop	{r4, r5, pc}
 8003460:	20012e48 	.word	0x20012e48

08003464 <sbrk_aligned>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	4e0e      	ldr	r6, [pc, #56]	; (80034a0 <sbrk_aligned+0x3c>)
 8003468:	460c      	mov	r4, r1
 800346a:	6831      	ldr	r1, [r6, #0]
 800346c:	4605      	mov	r5, r0
 800346e:	b911      	cbnz	r1, 8003476 <sbrk_aligned+0x12>
 8003470:	f000 fb7a 	bl	8003b68 <_sbrk_r>
 8003474:	6030      	str	r0, [r6, #0]
 8003476:	4621      	mov	r1, r4
 8003478:	4628      	mov	r0, r5
 800347a:	f000 fb75 	bl	8003b68 <_sbrk_r>
 800347e:	1c43      	adds	r3, r0, #1
 8003480:	d00a      	beq.n	8003498 <sbrk_aligned+0x34>
 8003482:	1cc4      	adds	r4, r0, #3
 8003484:	f024 0403 	bic.w	r4, r4, #3
 8003488:	42a0      	cmp	r0, r4
 800348a:	d007      	beq.n	800349c <sbrk_aligned+0x38>
 800348c:	1a21      	subs	r1, r4, r0
 800348e:	4628      	mov	r0, r5
 8003490:	f000 fb6a 	bl	8003b68 <_sbrk_r>
 8003494:	3001      	adds	r0, #1
 8003496:	d101      	bne.n	800349c <sbrk_aligned+0x38>
 8003498:	f04f 34ff 	mov.w	r4, #4294967295
 800349c:	4620      	mov	r0, r4
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	20012e4c 	.word	0x20012e4c

080034a4 <_malloc_r>:
 80034a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034a8:	1ccd      	adds	r5, r1, #3
 80034aa:	f025 0503 	bic.w	r5, r5, #3
 80034ae:	3508      	adds	r5, #8
 80034b0:	2d0c      	cmp	r5, #12
 80034b2:	bf38      	it	cc
 80034b4:	250c      	movcc	r5, #12
 80034b6:	2d00      	cmp	r5, #0
 80034b8:	4607      	mov	r7, r0
 80034ba:	db01      	blt.n	80034c0 <_malloc_r+0x1c>
 80034bc:	42a9      	cmp	r1, r5
 80034be:	d905      	bls.n	80034cc <_malloc_r+0x28>
 80034c0:	230c      	movs	r3, #12
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	2600      	movs	r6, #0
 80034c6:	4630      	mov	r0, r6
 80034c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034cc:	4e2e      	ldr	r6, [pc, #184]	; (8003588 <_malloc_r+0xe4>)
 80034ce:	f000 fbf5 	bl	8003cbc <__malloc_lock>
 80034d2:	6833      	ldr	r3, [r6, #0]
 80034d4:	461c      	mov	r4, r3
 80034d6:	bb34      	cbnz	r4, 8003526 <_malloc_r+0x82>
 80034d8:	4629      	mov	r1, r5
 80034da:	4638      	mov	r0, r7
 80034dc:	f7ff ffc2 	bl	8003464 <sbrk_aligned>
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	4604      	mov	r4, r0
 80034e4:	d14d      	bne.n	8003582 <_malloc_r+0xde>
 80034e6:	6834      	ldr	r4, [r6, #0]
 80034e8:	4626      	mov	r6, r4
 80034ea:	2e00      	cmp	r6, #0
 80034ec:	d140      	bne.n	8003570 <_malloc_r+0xcc>
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	4631      	mov	r1, r6
 80034f2:	4638      	mov	r0, r7
 80034f4:	eb04 0803 	add.w	r8, r4, r3
 80034f8:	f000 fb36 	bl	8003b68 <_sbrk_r>
 80034fc:	4580      	cmp	r8, r0
 80034fe:	d13a      	bne.n	8003576 <_malloc_r+0xd2>
 8003500:	6821      	ldr	r1, [r4, #0]
 8003502:	3503      	adds	r5, #3
 8003504:	1a6d      	subs	r5, r5, r1
 8003506:	f025 0503 	bic.w	r5, r5, #3
 800350a:	3508      	adds	r5, #8
 800350c:	2d0c      	cmp	r5, #12
 800350e:	bf38      	it	cc
 8003510:	250c      	movcc	r5, #12
 8003512:	4629      	mov	r1, r5
 8003514:	4638      	mov	r0, r7
 8003516:	f7ff ffa5 	bl	8003464 <sbrk_aligned>
 800351a:	3001      	adds	r0, #1
 800351c:	d02b      	beq.n	8003576 <_malloc_r+0xd2>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	442b      	add	r3, r5
 8003522:	6023      	str	r3, [r4, #0]
 8003524:	e00e      	b.n	8003544 <_malloc_r+0xa0>
 8003526:	6822      	ldr	r2, [r4, #0]
 8003528:	1b52      	subs	r2, r2, r5
 800352a:	d41e      	bmi.n	800356a <_malloc_r+0xc6>
 800352c:	2a0b      	cmp	r2, #11
 800352e:	d916      	bls.n	800355e <_malloc_r+0xba>
 8003530:	1961      	adds	r1, r4, r5
 8003532:	42a3      	cmp	r3, r4
 8003534:	6025      	str	r5, [r4, #0]
 8003536:	bf18      	it	ne
 8003538:	6059      	strne	r1, [r3, #4]
 800353a:	6863      	ldr	r3, [r4, #4]
 800353c:	bf08      	it	eq
 800353e:	6031      	streq	r1, [r6, #0]
 8003540:	5162      	str	r2, [r4, r5]
 8003542:	604b      	str	r3, [r1, #4]
 8003544:	4638      	mov	r0, r7
 8003546:	f104 060b 	add.w	r6, r4, #11
 800354a:	f000 fbbd 	bl	8003cc8 <__malloc_unlock>
 800354e:	f026 0607 	bic.w	r6, r6, #7
 8003552:	1d23      	adds	r3, r4, #4
 8003554:	1af2      	subs	r2, r6, r3
 8003556:	d0b6      	beq.n	80034c6 <_malloc_r+0x22>
 8003558:	1b9b      	subs	r3, r3, r6
 800355a:	50a3      	str	r3, [r4, r2]
 800355c:	e7b3      	b.n	80034c6 <_malloc_r+0x22>
 800355e:	6862      	ldr	r2, [r4, #4]
 8003560:	42a3      	cmp	r3, r4
 8003562:	bf0c      	ite	eq
 8003564:	6032      	streq	r2, [r6, #0]
 8003566:	605a      	strne	r2, [r3, #4]
 8003568:	e7ec      	b.n	8003544 <_malloc_r+0xa0>
 800356a:	4623      	mov	r3, r4
 800356c:	6864      	ldr	r4, [r4, #4]
 800356e:	e7b2      	b.n	80034d6 <_malloc_r+0x32>
 8003570:	4634      	mov	r4, r6
 8003572:	6876      	ldr	r6, [r6, #4]
 8003574:	e7b9      	b.n	80034ea <_malloc_r+0x46>
 8003576:	230c      	movs	r3, #12
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	4638      	mov	r0, r7
 800357c:	f000 fba4 	bl	8003cc8 <__malloc_unlock>
 8003580:	e7a1      	b.n	80034c6 <_malloc_r+0x22>
 8003582:	6025      	str	r5, [r4, #0]
 8003584:	e7de      	b.n	8003544 <_malloc_r+0xa0>
 8003586:	bf00      	nop
 8003588:	20012e48 	.word	0x20012e48

0800358c <__sfputc_r>:
 800358c:	6893      	ldr	r3, [r2, #8]
 800358e:	3b01      	subs	r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	b410      	push	{r4}
 8003594:	6093      	str	r3, [r2, #8]
 8003596:	da08      	bge.n	80035aa <__sfputc_r+0x1e>
 8003598:	6994      	ldr	r4, [r2, #24]
 800359a:	42a3      	cmp	r3, r4
 800359c:	db01      	blt.n	80035a2 <__sfputc_r+0x16>
 800359e:	290a      	cmp	r1, #10
 80035a0:	d103      	bne.n	80035aa <__sfputc_r+0x1e>
 80035a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035a6:	f7ff bc31 	b.w	8002e0c <__swbuf_r>
 80035aa:	6813      	ldr	r3, [r2, #0]
 80035ac:	1c58      	adds	r0, r3, #1
 80035ae:	6010      	str	r0, [r2, #0]
 80035b0:	7019      	strb	r1, [r3, #0]
 80035b2:	4608      	mov	r0, r1
 80035b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <__sfputs_r>:
 80035ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035bc:	4606      	mov	r6, r0
 80035be:	460f      	mov	r7, r1
 80035c0:	4614      	mov	r4, r2
 80035c2:	18d5      	adds	r5, r2, r3
 80035c4:	42ac      	cmp	r4, r5
 80035c6:	d101      	bne.n	80035cc <__sfputs_r+0x12>
 80035c8:	2000      	movs	r0, #0
 80035ca:	e007      	b.n	80035dc <__sfputs_r+0x22>
 80035cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d0:	463a      	mov	r2, r7
 80035d2:	4630      	mov	r0, r6
 80035d4:	f7ff ffda 	bl	800358c <__sfputc_r>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	d1f3      	bne.n	80035c4 <__sfputs_r+0xa>
 80035dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035e0 <_vfiprintf_r>:
 80035e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e4:	460d      	mov	r5, r1
 80035e6:	b09d      	sub	sp, #116	; 0x74
 80035e8:	4614      	mov	r4, r2
 80035ea:	4698      	mov	r8, r3
 80035ec:	4606      	mov	r6, r0
 80035ee:	b118      	cbz	r0, 80035f8 <_vfiprintf_r+0x18>
 80035f0:	6983      	ldr	r3, [r0, #24]
 80035f2:	b90b      	cbnz	r3, 80035f8 <_vfiprintf_r+0x18>
 80035f4:	f7ff fde4 	bl	80031c0 <__sinit>
 80035f8:	4b89      	ldr	r3, [pc, #548]	; (8003820 <_vfiprintf_r+0x240>)
 80035fa:	429d      	cmp	r5, r3
 80035fc:	d11b      	bne.n	8003636 <_vfiprintf_r+0x56>
 80035fe:	6875      	ldr	r5, [r6, #4]
 8003600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003602:	07d9      	lsls	r1, r3, #31
 8003604:	d405      	bmi.n	8003612 <_vfiprintf_r+0x32>
 8003606:	89ab      	ldrh	r3, [r5, #12]
 8003608:	059a      	lsls	r2, r3, #22
 800360a:	d402      	bmi.n	8003612 <_vfiprintf_r+0x32>
 800360c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800360e:	f7ff fe75 	bl	80032fc <__retarget_lock_acquire_recursive>
 8003612:	89ab      	ldrh	r3, [r5, #12]
 8003614:	071b      	lsls	r3, r3, #28
 8003616:	d501      	bpl.n	800361c <_vfiprintf_r+0x3c>
 8003618:	692b      	ldr	r3, [r5, #16]
 800361a:	b9eb      	cbnz	r3, 8003658 <_vfiprintf_r+0x78>
 800361c:	4629      	mov	r1, r5
 800361e:	4630      	mov	r0, r6
 8003620:	f7ff fc46 	bl	8002eb0 <__swsetup_r>
 8003624:	b1c0      	cbz	r0, 8003658 <_vfiprintf_r+0x78>
 8003626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003628:	07dc      	lsls	r4, r3, #31
 800362a:	d50e      	bpl.n	800364a <_vfiprintf_r+0x6a>
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	b01d      	add	sp, #116	; 0x74
 8003632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003636:	4b7b      	ldr	r3, [pc, #492]	; (8003824 <_vfiprintf_r+0x244>)
 8003638:	429d      	cmp	r5, r3
 800363a:	d101      	bne.n	8003640 <_vfiprintf_r+0x60>
 800363c:	68b5      	ldr	r5, [r6, #8]
 800363e:	e7df      	b.n	8003600 <_vfiprintf_r+0x20>
 8003640:	4b79      	ldr	r3, [pc, #484]	; (8003828 <_vfiprintf_r+0x248>)
 8003642:	429d      	cmp	r5, r3
 8003644:	bf08      	it	eq
 8003646:	68f5      	ldreq	r5, [r6, #12]
 8003648:	e7da      	b.n	8003600 <_vfiprintf_r+0x20>
 800364a:	89ab      	ldrh	r3, [r5, #12]
 800364c:	0598      	lsls	r0, r3, #22
 800364e:	d4ed      	bmi.n	800362c <_vfiprintf_r+0x4c>
 8003650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003652:	f7ff fe54 	bl	80032fe <__retarget_lock_release_recursive>
 8003656:	e7e9      	b.n	800362c <_vfiprintf_r+0x4c>
 8003658:	2300      	movs	r3, #0
 800365a:	9309      	str	r3, [sp, #36]	; 0x24
 800365c:	2320      	movs	r3, #32
 800365e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003662:	f8cd 800c 	str.w	r8, [sp, #12]
 8003666:	2330      	movs	r3, #48	; 0x30
 8003668:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800382c <_vfiprintf_r+0x24c>
 800366c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003670:	f04f 0901 	mov.w	r9, #1
 8003674:	4623      	mov	r3, r4
 8003676:	469a      	mov	sl, r3
 8003678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800367c:	b10a      	cbz	r2, 8003682 <_vfiprintf_r+0xa2>
 800367e:	2a25      	cmp	r2, #37	; 0x25
 8003680:	d1f9      	bne.n	8003676 <_vfiprintf_r+0x96>
 8003682:	ebba 0b04 	subs.w	fp, sl, r4
 8003686:	d00b      	beq.n	80036a0 <_vfiprintf_r+0xc0>
 8003688:	465b      	mov	r3, fp
 800368a:	4622      	mov	r2, r4
 800368c:	4629      	mov	r1, r5
 800368e:	4630      	mov	r0, r6
 8003690:	f7ff ff93 	bl	80035ba <__sfputs_r>
 8003694:	3001      	adds	r0, #1
 8003696:	f000 80aa 	beq.w	80037ee <_vfiprintf_r+0x20e>
 800369a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800369c:	445a      	add	r2, fp
 800369e:	9209      	str	r2, [sp, #36]	; 0x24
 80036a0:	f89a 3000 	ldrb.w	r3, [sl]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80a2 	beq.w	80037ee <_vfiprintf_r+0x20e>
 80036aa:	2300      	movs	r3, #0
 80036ac:	f04f 32ff 	mov.w	r2, #4294967295
 80036b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036b4:	f10a 0a01 	add.w	sl, sl, #1
 80036b8:	9304      	str	r3, [sp, #16]
 80036ba:	9307      	str	r3, [sp, #28]
 80036bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036c0:	931a      	str	r3, [sp, #104]	; 0x68
 80036c2:	4654      	mov	r4, sl
 80036c4:	2205      	movs	r2, #5
 80036c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ca:	4858      	ldr	r0, [pc, #352]	; (800382c <_vfiprintf_r+0x24c>)
 80036cc:	f7fc fd90 	bl	80001f0 <memchr>
 80036d0:	9a04      	ldr	r2, [sp, #16]
 80036d2:	b9d8      	cbnz	r0, 800370c <_vfiprintf_r+0x12c>
 80036d4:	06d1      	lsls	r1, r2, #27
 80036d6:	bf44      	itt	mi
 80036d8:	2320      	movmi	r3, #32
 80036da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036de:	0713      	lsls	r3, r2, #28
 80036e0:	bf44      	itt	mi
 80036e2:	232b      	movmi	r3, #43	; 0x2b
 80036e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036e8:	f89a 3000 	ldrb.w	r3, [sl]
 80036ec:	2b2a      	cmp	r3, #42	; 0x2a
 80036ee:	d015      	beq.n	800371c <_vfiprintf_r+0x13c>
 80036f0:	9a07      	ldr	r2, [sp, #28]
 80036f2:	4654      	mov	r4, sl
 80036f4:	2000      	movs	r0, #0
 80036f6:	f04f 0c0a 	mov.w	ip, #10
 80036fa:	4621      	mov	r1, r4
 80036fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003700:	3b30      	subs	r3, #48	; 0x30
 8003702:	2b09      	cmp	r3, #9
 8003704:	d94e      	bls.n	80037a4 <_vfiprintf_r+0x1c4>
 8003706:	b1b0      	cbz	r0, 8003736 <_vfiprintf_r+0x156>
 8003708:	9207      	str	r2, [sp, #28]
 800370a:	e014      	b.n	8003736 <_vfiprintf_r+0x156>
 800370c:	eba0 0308 	sub.w	r3, r0, r8
 8003710:	fa09 f303 	lsl.w	r3, r9, r3
 8003714:	4313      	orrs	r3, r2
 8003716:	9304      	str	r3, [sp, #16]
 8003718:	46a2      	mov	sl, r4
 800371a:	e7d2      	b.n	80036c2 <_vfiprintf_r+0xe2>
 800371c:	9b03      	ldr	r3, [sp, #12]
 800371e:	1d19      	adds	r1, r3, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	9103      	str	r1, [sp, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	bfbb      	ittet	lt
 8003728:	425b      	neglt	r3, r3
 800372a:	f042 0202 	orrlt.w	r2, r2, #2
 800372e:	9307      	strge	r3, [sp, #28]
 8003730:	9307      	strlt	r3, [sp, #28]
 8003732:	bfb8      	it	lt
 8003734:	9204      	strlt	r2, [sp, #16]
 8003736:	7823      	ldrb	r3, [r4, #0]
 8003738:	2b2e      	cmp	r3, #46	; 0x2e
 800373a:	d10c      	bne.n	8003756 <_vfiprintf_r+0x176>
 800373c:	7863      	ldrb	r3, [r4, #1]
 800373e:	2b2a      	cmp	r3, #42	; 0x2a
 8003740:	d135      	bne.n	80037ae <_vfiprintf_r+0x1ce>
 8003742:	9b03      	ldr	r3, [sp, #12]
 8003744:	1d1a      	adds	r2, r3, #4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	9203      	str	r2, [sp, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	bfb8      	it	lt
 800374e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003752:	3402      	adds	r4, #2
 8003754:	9305      	str	r3, [sp, #20]
 8003756:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800383c <_vfiprintf_r+0x25c>
 800375a:	7821      	ldrb	r1, [r4, #0]
 800375c:	2203      	movs	r2, #3
 800375e:	4650      	mov	r0, sl
 8003760:	f7fc fd46 	bl	80001f0 <memchr>
 8003764:	b140      	cbz	r0, 8003778 <_vfiprintf_r+0x198>
 8003766:	2340      	movs	r3, #64	; 0x40
 8003768:	eba0 000a 	sub.w	r0, r0, sl
 800376c:	fa03 f000 	lsl.w	r0, r3, r0
 8003770:	9b04      	ldr	r3, [sp, #16]
 8003772:	4303      	orrs	r3, r0
 8003774:	3401      	adds	r4, #1
 8003776:	9304      	str	r3, [sp, #16]
 8003778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800377c:	482c      	ldr	r0, [pc, #176]	; (8003830 <_vfiprintf_r+0x250>)
 800377e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003782:	2206      	movs	r2, #6
 8003784:	f7fc fd34 	bl	80001f0 <memchr>
 8003788:	2800      	cmp	r0, #0
 800378a:	d03f      	beq.n	800380c <_vfiprintf_r+0x22c>
 800378c:	4b29      	ldr	r3, [pc, #164]	; (8003834 <_vfiprintf_r+0x254>)
 800378e:	bb1b      	cbnz	r3, 80037d8 <_vfiprintf_r+0x1f8>
 8003790:	9b03      	ldr	r3, [sp, #12]
 8003792:	3307      	adds	r3, #7
 8003794:	f023 0307 	bic.w	r3, r3, #7
 8003798:	3308      	adds	r3, #8
 800379a:	9303      	str	r3, [sp, #12]
 800379c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800379e:	443b      	add	r3, r7
 80037a0:	9309      	str	r3, [sp, #36]	; 0x24
 80037a2:	e767      	b.n	8003674 <_vfiprintf_r+0x94>
 80037a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80037a8:	460c      	mov	r4, r1
 80037aa:	2001      	movs	r0, #1
 80037ac:	e7a5      	b.n	80036fa <_vfiprintf_r+0x11a>
 80037ae:	2300      	movs	r3, #0
 80037b0:	3401      	adds	r4, #1
 80037b2:	9305      	str	r3, [sp, #20]
 80037b4:	4619      	mov	r1, r3
 80037b6:	f04f 0c0a 	mov.w	ip, #10
 80037ba:	4620      	mov	r0, r4
 80037bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037c0:	3a30      	subs	r2, #48	; 0x30
 80037c2:	2a09      	cmp	r2, #9
 80037c4:	d903      	bls.n	80037ce <_vfiprintf_r+0x1ee>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0c5      	beq.n	8003756 <_vfiprintf_r+0x176>
 80037ca:	9105      	str	r1, [sp, #20]
 80037cc:	e7c3      	b.n	8003756 <_vfiprintf_r+0x176>
 80037ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80037d2:	4604      	mov	r4, r0
 80037d4:	2301      	movs	r3, #1
 80037d6:	e7f0      	b.n	80037ba <_vfiprintf_r+0x1da>
 80037d8:	ab03      	add	r3, sp, #12
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	462a      	mov	r2, r5
 80037de:	4b16      	ldr	r3, [pc, #88]	; (8003838 <_vfiprintf_r+0x258>)
 80037e0:	a904      	add	r1, sp, #16
 80037e2:	4630      	mov	r0, r6
 80037e4:	f3af 8000 	nop.w
 80037e8:	4607      	mov	r7, r0
 80037ea:	1c78      	adds	r0, r7, #1
 80037ec:	d1d6      	bne.n	800379c <_vfiprintf_r+0x1bc>
 80037ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037f0:	07d9      	lsls	r1, r3, #31
 80037f2:	d405      	bmi.n	8003800 <_vfiprintf_r+0x220>
 80037f4:	89ab      	ldrh	r3, [r5, #12]
 80037f6:	059a      	lsls	r2, r3, #22
 80037f8:	d402      	bmi.n	8003800 <_vfiprintf_r+0x220>
 80037fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037fc:	f7ff fd7f 	bl	80032fe <__retarget_lock_release_recursive>
 8003800:	89ab      	ldrh	r3, [r5, #12]
 8003802:	065b      	lsls	r3, r3, #25
 8003804:	f53f af12 	bmi.w	800362c <_vfiprintf_r+0x4c>
 8003808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800380a:	e711      	b.n	8003630 <_vfiprintf_r+0x50>
 800380c:	ab03      	add	r3, sp, #12
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	462a      	mov	r2, r5
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <_vfiprintf_r+0x258>)
 8003814:	a904      	add	r1, sp, #16
 8003816:	4630      	mov	r0, r6
 8003818:	f000 f880 	bl	800391c <_printf_i>
 800381c:	e7e4      	b.n	80037e8 <_vfiprintf_r+0x208>
 800381e:	bf00      	nop
 8003820:	08003dbc 	.word	0x08003dbc
 8003824:	08003ddc 	.word	0x08003ddc
 8003828:	08003d9c 	.word	0x08003d9c
 800382c:	08003dfc 	.word	0x08003dfc
 8003830:	08003e06 	.word	0x08003e06
 8003834:	00000000 	.word	0x00000000
 8003838:	080035bb 	.word	0x080035bb
 800383c:	08003e02 	.word	0x08003e02

08003840 <_printf_common>:
 8003840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003844:	4616      	mov	r6, r2
 8003846:	4699      	mov	r9, r3
 8003848:	688a      	ldr	r2, [r1, #8]
 800384a:	690b      	ldr	r3, [r1, #16]
 800384c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003850:	4293      	cmp	r3, r2
 8003852:	bfb8      	it	lt
 8003854:	4613      	movlt	r3, r2
 8003856:	6033      	str	r3, [r6, #0]
 8003858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800385c:	4607      	mov	r7, r0
 800385e:	460c      	mov	r4, r1
 8003860:	b10a      	cbz	r2, 8003866 <_printf_common+0x26>
 8003862:	3301      	adds	r3, #1
 8003864:	6033      	str	r3, [r6, #0]
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	0699      	lsls	r1, r3, #26
 800386a:	bf42      	ittt	mi
 800386c:	6833      	ldrmi	r3, [r6, #0]
 800386e:	3302      	addmi	r3, #2
 8003870:	6033      	strmi	r3, [r6, #0]
 8003872:	6825      	ldr	r5, [r4, #0]
 8003874:	f015 0506 	ands.w	r5, r5, #6
 8003878:	d106      	bne.n	8003888 <_printf_common+0x48>
 800387a:	f104 0a19 	add.w	sl, r4, #25
 800387e:	68e3      	ldr	r3, [r4, #12]
 8003880:	6832      	ldr	r2, [r6, #0]
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	42ab      	cmp	r3, r5
 8003886:	dc26      	bgt.n	80038d6 <_printf_common+0x96>
 8003888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800388c:	1e13      	subs	r3, r2, #0
 800388e:	6822      	ldr	r2, [r4, #0]
 8003890:	bf18      	it	ne
 8003892:	2301      	movne	r3, #1
 8003894:	0692      	lsls	r2, r2, #26
 8003896:	d42b      	bmi.n	80038f0 <_printf_common+0xb0>
 8003898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800389c:	4649      	mov	r1, r9
 800389e:	4638      	mov	r0, r7
 80038a0:	47c0      	blx	r8
 80038a2:	3001      	adds	r0, #1
 80038a4:	d01e      	beq.n	80038e4 <_printf_common+0xa4>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	68e5      	ldr	r5, [r4, #12]
 80038aa:	6832      	ldr	r2, [r6, #0]
 80038ac:	f003 0306 	and.w	r3, r3, #6
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	bf08      	it	eq
 80038b4:	1aad      	subeq	r5, r5, r2
 80038b6:	68a3      	ldr	r3, [r4, #8]
 80038b8:	6922      	ldr	r2, [r4, #16]
 80038ba:	bf0c      	ite	eq
 80038bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038c0:	2500      	movne	r5, #0
 80038c2:	4293      	cmp	r3, r2
 80038c4:	bfc4      	itt	gt
 80038c6:	1a9b      	subgt	r3, r3, r2
 80038c8:	18ed      	addgt	r5, r5, r3
 80038ca:	2600      	movs	r6, #0
 80038cc:	341a      	adds	r4, #26
 80038ce:	42b5      	cmp	r5, r6
 80038d0:	d11a      	bne.n	8003908 <_printf_common+0xc8>
 80038d2:	2000      	movs	r0, #0
 80038d4:	e008      	b.n	80038e8 <_printf_common+0xa8>
 80038d6:	2301      	movs	r3, #1
 80038d8:	4652      	mov	r2, sl
 80038da:	4649      	mov	r1, r9
 80038dc:	4638      	mov	r0, r7
 80038de:	47c0      	blx	r8
 80038e0:	3001      	adds	r0, #1
 80038e2:	d103      	bne.n	80038ec <_printf_common+0xac>
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ec:	3501      	adds	r5, #1
 80038ee:	e7c6      	b.n	800387e <_printf_common+0x3e>
 80038f0:	18e1      	adds	r1, r4, r3
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	2030      	movs	r0, #48	; 0x30
 80038f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038fa:	4422      	add	r2, r4
 80038fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003904:	3302      	adds	r3, #2
 8003906:	e7c7      	b.n	8003898 <_printf_common+0x58>
 8003908:	2301      	movs	r3, #1
 800390a:	4622      	mov	r2, r4
 800390c:	4649      	mov	r1, r9
 800390e:	4638      	mov	r0, r7
 8003910:	47c0      	blx	r8
 8003912:	3001      	adds	r0, #1
 8003914:	d0e6      	beq.n	80038e4 <_printf_common+0xa4>
 8003916:	3601      	adds	r6, #1
 8003918:	e7d9      	b.n	80038ce <_printf_common+0x8e>
	...

0800391c <_printf_i>:
 800391c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003920:	7e0f      	ldrb	r7, [r1, #24]
 8003922:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003924:	2f78      	cmp	r7, #120	; 0x78
 8003926:	4691      	mov	r9, r2
 8003928:	4680      	mov	r8, r0
 800392a:	460c      	mov	r4, r1
 800392c:	469a      	mov	sl, r3
 800392e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003932:	d807      	bhi.n	8003944 <_printf_i+0x28>
 8003934:	2f62      	cmp	r7, #98	; 0x62
 8003936:	d80a      	bhi.n	800394e <_printf_i+0x32>
 8003938:	2f00      	cmp	r7, #0
 800393a:	f000 80d8 	beq.w	8003aee <_printf_i+0x1d2>
 800393e:	2f58      	cmp	r7, #88	; 0x58
 8003940:	f000 80a3 	beq.w	8003a8a <_printf_i+0x16e>
 8003944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800394c:	e03a      	b.n	80039c4 <_printf_i+0xa8>
 800394e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003952:	2b15      	cmp	r3, #21
 8003954:	d8f6      	bhi.n	8003944 <_printf_i+0x28>
 8003956:	a101      	add	r1, pc, #4	; (adr r1, 800395c <_printf_i+0x40>)
 8003958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800395c:	080039b5 	.word	0x080039b5
 8003960:	080039c9 	.word	0x080039c9
 8003964:	08003945 	.word	0x08003945
 8003968:	08003945 	.word	0x08003945
 800396c:	08003945 	.word	0x08003945
 8003970:	08003945 	.word	0x08003945
 8003974:	080039c9 	.word	0x080039c9
 8003978:	08003945 	.word	0x08003945
 800397c:	08003945 	.word	0x08003945
 8003980:	08003945 	.word	0x08003945
 8003984:	08003945 	.word	0x08003945
 8003988:	08003ad5 	.word	0x08003ad5
 800398c:	080039f9 	.word	0x080039f9
 8003990:	08003ab7 	.word	0x08003ab7
 8003994:	08003945 	.word	0x08003945
 8003998:	08003945 	.word	0x08003945
 800399c:	08003af7 	.word	0x08003af7
 80039a0:	08003945 	.word	0x08003945
 80039a4:	080039f9 	.word	0x080039f9
 80039a8:	08003945 	.word	0x08003945
 80039ac:	08003945 	.word	0x08003945
 80039b0:	08003abf 	.word	0x08003abf
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	1d1a      	adds	r2, r3, #4
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	602a      	str	r2, [r5, #0]
 80039bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0a3      	b.n	8003b10 <_printf_i+0x1f4>
 80039c8:	6820      	ldr	r0, [r4, #0]
 80039ca:	6829      	ldr	r1, [r5, #0]
 80039cc:	0606      	lsls	r6, r0, #24
 80039ce:	f101 0304 	add.w	r3, r1, #4
 80039d2:	d50a      	bpl.n	80039ea <_printf_i+0xce>
 80039d4:	680e      	ldr	r6, [r1, #0]
 80039d6:	602b      	str	r3, [r5, #0]
 80039d8:	2e00      	cmp	r6, #0
 80039da:	da03      	bge.n	80039e4 <_printf_i+0xc8>
 80039dc:	232d      	movs	r3, #45	; 0x2d
 80039de:	4276      	negs	r6, r6
 80039e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039e4:	485e      	ldr	r0, [pc, #376]	; (8003b60 <_printf_i+0x244>)
 80039e6:	230a      	movs	r3, #10
 80039e8:	e019      	b.n	8003a1e <_printf_i+0x102>
 80039ea:	680e      	ldr	r6, [r1, #0]
 80039ec:	602b      	str	r3, [r5, #0]
 80039ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039f2:	bf18      	it	ne
 80039f4:	b236      	sxthne	r6, r6
 80039f6:	e7ef      	b.n	80039d8 <_printf_i+0xbc>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	6820      	ldr	r0, [r4, #0]
 80039fc:	1d19      	adds	r1, r3, #4
 80039fe:	6029      	str	r1, [r5, #0]
 8003a00:	0601      	lsls	r1, r0, #24
 8003a02:	d501      	bpl.n	8003a08 <_printf_i+0xec>
 8003a04:	681e      	ldr	r6, [r3, #0]
 8003a06:	e002      	b.n	8003a0e <_printf_i+0xf2>
 8003a08:	0646      	lsls	r6, r0, #25
 8003a0a:	d5fb      	bpl.n	8003a04 <_printf_i+0xe8>
 8003a0c:	881e      	ldrh	r6, [r3, #0]
 8003a0e:	4854      	ldr	r0, [pc, #336]	; (8003b60 <_printf_i+0x244>)
 8003a10:	2f6f      	cmp	r7, #111	; 0x6f
 8003a12:	bf0c      	ite	eq
 8003a14:	2308      	moveq	r3, #8
 8003a16:	230a      	movne	r3, #10
 8003a18:	2100      	movs	r1, #0
 8003a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a1e:	6865      	ldr	r5, [r4, #4]
 8003a20:	60a5      	str	r5, [r4, #8]
 8003a22:	2d00      	cmp	r5, #0
 8003a24:	bfa2      	ittt	ge
 8003a26:	6821      	ldrge	r1, [r4, #0]
 8003a28:	f021 0104 	bicge.w	r1, r1, #4
 8003a2c:	6021      	strge	r1, [r4, #0]
 8003a2e:	b90e      	cbnz	r6, 8003a34 <_printf_i+0x118>
 8003a30:	2d00      	cmp	r5, #0
 8003a32:	d04d      	beq.n	8003ad0 <_printf_i+0x1b4>
 8003a34:	4615      	mov	r5, r2
 8003a36:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a3a:	fb03 6711 	mls	r7, r3, r1, r6
 8003a3e:	5dc7      	ldrb	r7, [r0, r7]
 8003a40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a44:	4637      	mov	r7, r6
 8003a46:	42bb      	cmp	r3, r7
 8003a48:	460e      	mov	r6, r1
 8003a4a:	d9f4      	bls.n	8003a36 <_printf_i+0x11a>
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d10b      	bne.n	8003a68 <_printf_i+0x14c>
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	07de      	lsls	r6, r3, #31
 8003a54:	d508      	bpl.n	8003a68 <_printf_i+0x14c>
 8003a56:	6923      	ldr	r3, [r4, #16]
 8003a58:	6861      	ldr	r1, [r4, #4]
 8003a5a:	4299      	cmp	r1, r3
 8003a5c:	bfde      	ittt	le
 8003a5e:	2330      	movle	r3, #48	; 0x30
 8003a60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a68:	1b52      	subs	r2, r2, r5
 8003a6a:	6122      	str	r2, [r4, #16]
 8003a6c:	f8cd a000 	str.w	sl, [sp]
 8003a70:	464b      	mov	r3, r9
 8003a72:	aa03      	add	r2, sp, #12
 8003a74:	4621      	mov	r1, r4
 8003a76:	4640      	mov	r0, r8
 8003a78:	f7ff fee2 	bl	8003840 <_printf_common>
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d14c      	bne.n	8003b1a <_printf_i+0x1fe>
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	b004      	add	sp, #16
 8003a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a8a:	4835      	ldr	r0, [pc, #212]	; (8003b60 <_printf_i+0x244>)
 8003a8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a90:	6829      	ldr	r1, [r5, #0]
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a98:	6029      	str	r1, [r5, #0]
 8003a9a:	061d      	lsls	r5, r3, #24
 8003a9c:	d514      	bpl.n	8003ac8 <_printf_i+0x1ac>
 8003a9e:	07df      	lsls	r7, r3, #31
 8003aa0:	bf44      	itt	mi
 8003aa2:	f043 0320 	orrmi.w	r3, r3, #32
 8003aa6:	6023      	strmi	r3, [r4, #0]
 8003aa8:	b91e      	cbnz	r6, 8003ab2 <_printf_i+0x196>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	f023 0320 	bic.w	r3, r3, #32
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	e7b0      	b.n	8003a18 <_printf_i+0xfc>
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	f043 0320 	orr.w	r3, r3, #32
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	2378      	movs	r3, #120	; 0x78
 8003ac0:	4828      	ldr	r0, [pc, #160]	; (8003b64 <_printf_i+0x248>)
 8003ac2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ac6:	e7e3      	b.n	8003a90 <_printf_i+0x174>
 8003ac8:	0659      	lsls	r1, r3, #25
 8003aca:	bf48      	it	mi
 8003acc:	b2b6      	uxthmi	r6, r6
 8003ace:	e7e6      	b.n	8003a9e <_printf_i+0x182>
 8003ad0:	4615      	mov	r5, r2
 8003ad2:	e7bb      	b.n	8003a4c <_printf_i+0x130>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	6826      	ldr	r6, [r4, #0]
 8003ad8:	6961      	ldr	r1, [r4, #20]
 8003ada:	1d18      	adds	r0, r3, #4
 8003adc:	6028      	str	r0, [r5, #0]
 8003ade:	0635      	lsls	r5, r6, #24
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	d501      	bpl.n	8003ae8 <_printf_i+0x1cc>
 8003ae4:	6019      	str	r1, [r3, #0]
 8003ae6:	e002      	b.n	8003aee <_printf_i+0x1d2>
 8003ae8:	0670      	lsls	r0, r6, #25
 8003aea:	d5fb      	bpl.n	8003ae4 <_printf_i+0x1c8>
 8003aec:	8019      	strh	r1, [r3, #0]
 8003aee:	2300      	movs	r3, #0
 8003af0:	6123      	str	r3, [r4, #16]
 8003af2:	4615      	mov	r5, r2
 8003af4:	e7ba      	b.n	8003a6c <_printf_i+0x150>
 8003af6:	682b      	ldr	r3, [r5, #0]
 8003af8:	1d1a      	adds	r2, r3, #4
 8003afa:	602a      	str	r2, [r5, #0]
 8003afc:	681d      	ldr	r5, [r3, #0]
 8003afe:	6862      	ldr	r2, [r4, #4]
 8003b00:	2100      	movs	r1, #0
 8003b02:	4628      	mov	r0, r5
 8003b04:	f7fc fb74 	bl	80001f0 <memchr>
 8003b08:	b108      	cbz	r0, 8003b0e <_printf_i+0x1f2>
 8003b0a:	1b40      	subs	r0, r0, r5
 8003b0c:	6060      	str	r0, [r4, #4]
 8003b0e:	6863      	ldr	r3, [r4, #4]
 8003b10:	6123      	str	r3, [r4, #16]
 8003b12:	2300      	movs	r3, #0
 8003b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b18:	e7a8      	b.n	8003a6c <_printf_i+0x150>
 8003b1a:	6923      	ldr	r3, [r4, #16]
 8003b1c:	462a      	mov	r2, r5
 8003b1e:	4649      	mov	r1, r9
 8003b20:	4640      	mov	r0, r8
 8003b22:	47d0      	blx	sl
 8003b24:	3001      	adds	r0, #1
 8003b26:	d0ab      	beq.n	8003a80 <_printf_i+0x164>
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	079b      	lsls	r3, r3, #30
 8003b2c:	d413      	bmi.n	8003b56 <_printf_i+0x23a>
 8003b2e:	68e0      	ldr	r0, [r4, #12]
 8003b30:	9b03      	ldr	r3, [sp, #12]
 8003b32:	4298      	cmp	r0, r3
 8003b34:	bfb8      	it	lt
 8003b36:	4618      	movlt	r0, r3
 8003b38:	e7a4      	b.n	8003a84 <_printf_i+0x168>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4632      	mov	r2, r6
 8003b3e:	4649      	mov	r1, r9
 8003b40:	4640      	mov	r0, r8
 8003b42:	47d0      	blx	sl
 8003b44:	3001      	adds	r0, #1
 8003b46:	d09b      	beq.n	8003a80 <_printf_i+0x164>
 8003b48:	3501      	adds	r5, #1
 8003b4a:	68e3      	ldr	r3, [r4, #12]
 8003b4c:	9903      	ldr	r1, [sp, #12]
 8003b4e:	1a5b      	subs	r3, r3, r1
 8003b50:	42ab      	cmp	r3, r5
 8003b52:	dcf2      	bgt.n	8003b3a <_printf_i+0x21e>
 8003b54:	e7eb      	b.n	8003b2e <_printf_i+0x212>
 8003b56:	2500      	movs	r5, #0
 8003b58:	f104 0619 	add.w	r6, r4, #25
 8003b5c:	e7f5      	b.n	8003b4a <_printf_i+0x22e>
 8003b5e:	bf00      	nop
 8003b60:	08003e0d 	.word	0x08003e0d
 8003b64:	08003e1e 	.word	0x08003e1e

08003b68 <_sbrk_r>:
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4d06      	ldr	r5, [pc, #24]	; (8003b84 <_sbrk_r+0x1c>)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	4604      	mov	r4, r0
 8003b70:	4608      	mov	r0, r1
 8003b72:	602b      	str	r3, [r5, #0]
 8003b74:	f7ff f81c 	bl	8002bb0 <_sbrk>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	d102      	bne.n	8003b82 <_sbrk_r+0x1a>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	b103      	cbz	r3, 8003b82 <_sbrk_r+0x1a>
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	bd38      	pop	{r3, r4, r5, pc}
 8003b84:	20012e50 	.word	0x20012e50

08003b88 <__sread>:
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b90:	f000 f8a0 	bl	8003cd4 <_read_r>
 8003b94:	2800      	cmp	r0, #0
 8003b96:	bfab      	itete	ge
 8003b98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8003b9c:	181b      	addge	r3, r3, r0
 8003b9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ba2:	bfac      	ite	ge
 8003ba4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ba6:	81a3      	strhlt	r3, [r4, #12]
 8003ba8:	bd10      	pop	{r4, pc}

08003baa <__swrite>:
 8003baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bae:	461f      	mov	r7, r3
 8003bb0:	898b      	ldrh	r3, [r1, #12]
 8003bb2:	05db      	lsls	r3, r3, #23
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	4616      	mov	r6, r2
 8003bba:	d505      	bpl.n	8003bc8 <__swrite+0x1e>
 8003bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f000 f868 	bl	8003c98 <_lseek_r>
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bd2:	81a3      	strh	r3, [r4, #12]
 8003bd4:	4632      	mov	r2, r6
 8003bd6:	463b      	mov	r3, r7
 8003bd8:	4628      	mov	r0, r5
 8003bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bde:	f000 b817 	b.w	8003c10 <_write_r>

08003be2 <__sseek>:
 8003be2:	b510      	push	{r4, lr}
 8003be4:	460c      	mov	r4, r1
 8003be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bea:	f000 f855 	bl	8003c98 <_lseek_r>
 8003bee:	1c43      	adds	r3, r0, #1
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	bf15      	itete	ne
 8003bf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003bf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003bfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003bfe:	81a3      	strheq	r3, [r4, #12]
 8003c00:	bf18      	it	ne
 8003c02:	81a3      	strhne	r3, [r4, #12]
 8003c04:	bd10      	pop	{r4, pc}

08003c06 <__sclose>:
 8003c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c0a:	f000 b813 	b.w	8003c34 <_close_r>
	...

08003c10 <_write_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	4d07      	ldr	r5, [pc, #28]	; (8003c30 <_write_r+0x20>)
 8003c14:	4604      	mov	r4, r0
 8003c16:	4608      	mov	r0, r1
 8003c18:	4611      	mov	r1, r2
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	602a      	str	r2, [r5, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f7fe ff75 	bl	8002b0e <_write>
 8003c24:	1c43      	adds	r3, r0, #1
 8003c26:	d102      	bne.n	8003c2e <_write_r+0x1e>
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	b103      	cbz	r3, 8003c2e <_write_r+0x1e>
 8003c2c:	6023      	str	r3, [r4, #0]
 8003c2e:	bd38      	pop	{r3, r4, r5, pc}
 8003c30:	20012e50 	.word	0x20012e50

08003c34 <_close_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	4d06      	ldr	r5, [pc, #24]	; (8003c50 <_close_r+0x1c>)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	602b      	str	r3, [r5, #0]
 8003c40:	f7fe ff81 	bl	8002b46 <_close>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d102      	bne.n	8003c4e <_close_r+0x1a>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b103      	cbz	r3, 8003c4e <_close_r+0x1a>
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	20012e50 	.word	0x20012e50

08003c54 <_fstat_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4d07      	ldr	r5, [pc, #28]	; (8003c74 <_fstat_r+0x20>)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	602b      	str	r3, [r5, #0]
 8003c62:	f7fe ff7c 	bl	8002b5e <_fstat>
 8003c66:	1c43      	adds	r3, r0, #1
 8003c68:	d102      	bne.n	8003c70 <_fstat_r+0x1c>
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	b103      	cbz	r3, 8003c70 <_fstat_r+0x1c>
 8003c6e:	6023      	str	r3, [r4, #0]
 8003c70:	bd38      	pop	{r3, r4, r5, pc}
 8003c72:	bf00      	nop
 8003c74:	20012e50 	.word	0x20012e50

08003c78 <_isatty_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4d06      	ldr	r5, [pc, #24]	; (8003c94 <_isatty_r+0x1c>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4604      	mov	r4, r0
 8003c80:	4608      	mov	r0, r1
 8003c82:	602b      	str	r3, [r5, #0]
 8003c84:	f7fe ff7b 	bl	8002b7e <_isatty>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d102      	bne.n	8003c92 <_isatty_r+0x1a>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	b103      	cbz	r3, 8003c92 <_isatty_r+0x1a>
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	20012e50 	.word	0x20012e50

08003c98 <_lseek_r>:
 8003c98:	b538      	push	{r3, r4, r5, lr}
 8003c9a:	4d07      	ldr	r5, [pc, #28]	; (8003cb8 <_lseek_r+0x20>)
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	4608      	mov	r0, r1
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	602a      	str	r2, [r5, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f7fe ff74 	bl	8002b94 <_lseek>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d102      	bne.n	8003cb6 <_lseek_r+0x1e>
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	b103      	cbz	r3, 8003cb6 <_lseek_r+0x1e>
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
 8003cb8:	20012e50 	.word	0x20012e50

08003cbc <__malloc_lock>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	; (8003cc4 <__malloc_lock+0x8>)
 8003cbe:	f7ff bb1d 	b.w	80032fc <__retarget_lock_acquire_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	20012e44 	.word	0x20012e44

08003cc8 <__malloc_unlock>:
 8003cc8:	4801      	ldr	r0, [pc, #4]	; (8003cd0 <__malloc_unlock+0x8>)
 8003cca:	f7ff bb18 	b.w	80032fe <__retarget_lock_release_recursive>
 8003cce:	bf00      	nop
 8003cd0:	20012e44 	.word	0x20012e44

08003cd4 <_read_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4d07      	ldr	r5, [pc, #28]	; (8003cf4 <_read_r+0x20>)
 8003cd8:	4604      	mov	r4, r0
 8003cda:	4608      	mov	r0, r1
 8003cdc:	4611      	mov	r1, r2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	602a      	str	r2, [r5, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f7fe fef6 	bl	8002ad4 <_read>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d102      	bne.n	8003cf2 <_read_r+0x1e>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	b103      	cbz	r3, 8003cf2 <_read_r+0x1e>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
 8003cf4:	20012e50 	.word	0x20012e50

08003cf8 <_init>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	bf00      	nop
 8003cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfe:	bc08      	pop	{r3}
 8003d00:	469e      	mov	lr, r3
 8003d02:	4770      	bx	lr

08003d04 <_fini>:
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d06:	bf00      	nop
 8003d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0a:	bc08      	pop	{r3}
 8003d0c:	469e      	mov	lr, r3
 8003d0e:	4770      	bx	lr
