
001_led_toggle_addr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000255c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002730  08002730  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002730  08002730  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002730  08002730  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002734  08002734  00012734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00012dc4  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012dcc  20012dcc  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005df4  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001078  00000000  00000000  00025e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b8  00000000  00000000  00026ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000530  00000000  00000000  00027460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014e6  00000000  00000000  00027990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006a62  00000000  00000000  00028e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000102bd  00000000  00000000  0002f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003fb95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016bc  00000000  00000000  0003fbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000008 	.word	0x20000008
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080026f4 	.word	0x080026f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	080026f4 	.word	0x080026f4

080001f0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f103 0208 	add.w	r2, r3, #8
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f04f 32ff 	mov.w	r2, #4294967295
 8000208:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f103 0208 	add.w	r2, r3, #8
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f103 0208 	add.w	r2, r3, #8
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr

08000230 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2200      	movs	r2, #0
 800023c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr

0800024a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800024a:	b480      	push	{r7}
 800024c:	b085      	sub	sp, #20
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
 8000252:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000260:	d103      	bne.n	800026a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	691b      	ldr	r3, [r3, #16]
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	e00c      	b.n	8000284 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3308      	adds	r3, #8
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	e002      	b.n	8000278 <vListInsert+0x2e>
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	429a      	cmp	r2, r3
 8000282:	d2f6      	bcs.n	8000272 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	685a      	ldr	r2, [r3, #4]
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	683a      	ldr	r2, [r7, #0]
 8000292:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	683a      	ldr	r2, [r7, #0]
 800029e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	1c5a      	adds	r2, r3, #1
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	601a      	str	r2, [r3, #0]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	691b      	ldr	r3, [r3, #16]
 80002c8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	6892      	ldr	r2, [r2, #8]
 80002d2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	6852      	ldr	r2, [r2, #4]
 80002dc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d103      	bne.n	80002f0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689a      	ldr	r2, [r3, #8]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	1e5a      	subs	r2, r3, #1
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	681b      	ldr	r3, [r3, #0]
}
 8000304:	4618      	mov	r0, r3
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800031a:	2301      	movs	r3, #1
 800031c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d10a      	bne.n	800033e <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800032c:	f383 8811 	msr	BASEPRI, r3
 8000330:	f3bf 8f6f 	isb	sy
 8000334:	f3bf 8f4f 	dsb	sy
 8000338:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800033a:	bf00      	nop
 800033c:	e7fe      	b.n	800033c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800033e:	693b      	ldr	r3, [r7, #16]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d05d      	beq.n	8000400 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000344:	693b      	ldr	r3, [r7, #16]
 8000346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000348:	2b00      	cmp	r3, #0
 800034a:	d059      	beq.n	8000400 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000350:	693b      	ldr	r3, [r7, #16]
 8000352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000354:	2100      	movs	r1, #0
 8000356:	fba3 2302 	umull	r2, r3, r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	d000      	beq.n	8000360 <xQueueGenericReset+0x50>
 800035e:	2101      	movs	r1, #1
 8000360:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000362:	2b00      	cmp	r3, #0
 8000364:	d14c      	bne.n	8000400 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000366:	f001 fe57 	bl	8002018 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000372:	6939      	ldr	r1, [r7, #16]
 8000374:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000376:	fb01 f303 	mul.w	r3, r1, r3
 800037a:	441a      	add	r2, r3
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	2200      	movs	r2, #0
 8000384:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	693b      	ldr	r3, [r7, #16]
 8000394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000396:	3b01      	subs	r3, #1
 8000398:	6939      	ldr	r1, [r7, #16]
 800039a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800039c:	fb01 f303 	mul.w	r3, r1, r3
 80003a0:	441a      	add	r2, r3
 80003a2:	693b      	ldr	r3, [r7, #16]
 80003a4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	22ff      	movs	r2, #255	; 0xff
 80003aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	22ff      	movs	r2, #255	; 0xff
 80003b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d114      	bne.n	80003e6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	691b      	ldr	r3, [r3, #16]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d01a      	beq.n	80003fa <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	3310      	adds	r3, #16
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 ffc3 	bl	8001354 <xTaskRemoveFromEventList>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d012      	beq.n	80003fa <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <xQueueGenericReset+0x11c>)
 80003d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	f3bf 8f4f 	dsb	sy
 80003e0:	f3bf 8f6f 	isb	sy
 80003e4:	e009      	b.n	80003fa <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	3310      	adds	r3, #16
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ff00 	bl	80001f0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	3324      	adds	r3, #36	; 0x24
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff fefb 	bl	80001f0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80003fa:	f001 fe3d 	bl	8002078 <vPortExitCritical>
 80003fe:	e001      	b.n	8000404 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d10a      	bne.n	8000420 <xQueueGenericReset+0x110>
        __asm volatile
 800040a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800040e:	f383 8811 	msr	BASEPRI, r3
 8000412:	f3bf 8f6f 	isb	sy
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	60bb      	str	r3, [r7, #8]
    }
 800041c:	bf00      	nop
 800041e:	e7fe      	b.n	800041e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000420:	697b      	ldr	r3, [r7, #20]
}
 8000422:	4618      	mov	r0, r3
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	e000ed04 	.word	0xe000ed04

08000430 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af02      	add	r7, sp, #8
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	4613      	mov	r3, r2
 800043c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d02e      	beq.n	80004a6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000448:	2100      	movs	r1, #0
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	fba3 2302 	umull	r2, r3, r3, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	d000      	beq.n	8000458 <xQueueGenericCreate+0x28>
 8000456:	2101      	movs	r1, #1
 8000458:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800045a:	2b00      	cmp	r3, #0
 800045c:	d123      	bne.n	80004a6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	68ba      	ldr	r2, [r7, #8]
 8000462:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000466:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800046a:	d81c      	bhi.n	80004a6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	68ba      	ldr	r2, [r7, #8]
 8000470:	fb02 f303 	mul.w	r3, r2, r3
 8000474:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	3350      	adds	r3, #80	; 0x50
 800047a:	4618      	mov	r0, r3
 800047c:	f001 fea4 	bl	80021c8 <pvPortMalloc>
 8000480:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000482:	69fb      	ldr	r3, [r7, #28]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d01c      	beq.n	80004c2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	3350      	adds	r3, #80	; 0x50
 8000490:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000492:	79fa      	ldrb	r2, [r7, #7]
 8000494:	69fb      	ldr	r3, [r7, #28]
 8000496:	9300      	str	r3, [sp, #0]
 8000498:	4613      	mov	r3, r2
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	68b9      	ldr	r1, [r7, #8]
 800049e:	68f8      	ldr	r0, [r7, #12]
 80004a0:	f000 f814 	bl	80004cc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80004a4:	e00d      	b.n	80004c2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d10a      	bne.n	80004c2 <xQueueGenericCreate+0x92>
        __asm volatile
 80004ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004b0:	f383 8811 	msr	BASEPRI, r3
 80004b4:	f3bf 8f6f 	isb	sy
 80004b8:	f3bf 8f4f 	dsb	sy
 80004bc:	613b      	str	r3, [r7, #16]
    }
 80004be:	bf00      	nop
 80004c0:	e7fe      	b.n	80004c0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80004c2:	69fb      	ldr	r3, [r7, #28]
    }
 80004c4:	4618      	mov	r0, r3
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d103      	bne.n	80004e8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80004e0:	69bb      	ldr	r3, [r7, #24]
 80004e2:	69ba      	ldr	r2, [r7, #24]
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	e002      	b.n	80004ee <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	68fa      	ldr	r2, [r7, #12]
 80004f2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80004f4:	69bb      	ldr	r3, [r7, #24]
 80004f6:	68ba      	ldr	r2, [r7, #8]
 80004f8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80004fa:	2101      	movs	r1, #1
 80004fc:	69b8      	ldr	r0, [r7, #24]
 80004fe:	f7ff ff07 	bl	8000310 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	78fa      	ldrb	r2, [r7, #3]
 8000506:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000520:	2300      	movs	r3, #0
 8000522:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800052a:	2b00      	cmp	r3, #0
 800052c:	d10a      	bne.n	8000544 <xQueueReceive+0x30>
        __asm volatile
 800052e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000532:	f383 8811 	msr	BASEPRI, r3
 8000536:	f3bf 8f6f 	isb	sy
 800053a:	f3bf 8f4f 	dsb	sy
 800053e:	623b      	str	r3, [r7, #32]
    }
 8000540:	bf00      	nop
 8000542:	e7fe      	b.n	8000542 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d103      	bne.n	8000552 <xQueueReceive+0x3e>
 800054a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800054c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054e:	2b00      	cmp	r3, #0
 8000550:	d101      	bne.n	8000556 <xQueueReceive+0x42>
 8000552:	2301      	movs	r3, #1
 8000554:	e000      	b.n	8000558 <xQueueReceive+0x44>
 8000556:	2300      	movs	r3, #0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d10a      	bne.n	8000572 <xQueueReceive+0x5e>
        __asm volatile
 800055c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000560:	f383 8811 	msr	BASEPRI, r3
 8000564:	f3bf 8f6f 	isb	sy
 8000568:	f3bf 8f4f 	dsb	sy
 800056c:	61fb      	str	r3, [r7, #28]
    }
 800056e:	bf00      	nop
 8000570:	e7fe      	b.n	8000570 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000572:	f001 f8ff 	bl	8001774 <xTaskGetSchedulerState>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d102      	bne.n	8000582 <xQueueReceive+0x6e>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d101      	bne.n	8000586 <xQueueReceive+0x72>
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <xQueueReceive+0x74>
 8000586:	2300      	movs	r3, #0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d10a      	bne.n	80005a2 <xQueueReceive+0x8e>
        __asm volatile
 800058c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000590:	f383 8811 	msr	BASEPRI, r3
 8000594:	f3bf 8f6f 	isb	sy
 8000598:	f3bf 8f4f 	dsb	sy
 800059c:	61bb      	str	r3, [r7, #24]
    }
 800059e:	bf00      	nop
 80005a0:	e7fe      	b.n	80005a0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005a2:	f001 fd39 	bl	8002018 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80005a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80005ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d01f      	beq.n	80005f2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80005b2:	68b9      	ldr	r1, [r7, #8]
 80005b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80005b6:	f000 f88d 	bl	80006d4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005bc:	1e5a      	subs	r2, r3, #1
 80005be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00f      	beq.n	80005ea <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005cc:	3310      	adds	r3, #16
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fec0 	bl	8001354 <xTaskRemoveFromEventList>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d007      	beq.n	80005ea <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80005da:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <xQueueReceive+0x1bc>)
 80005dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80005ea:	f001 fd45 	bl	8002078 <vPortExitCritical>
                return pdPASS;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e069      	b.n	80006c6 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d103      	bne.n	8000600 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80005f8:	f001 fd3e 	bl	8002078 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80005fc:	2300      	movs	r3, #0
 80005fe:	e062      	b.n	80006c6 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000602:	2b00      	cmp	r3, #0
 8000604:	d106      	bne.n	8000614 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	4618      	mov	r0, r3
 800060c:	f000 ff78 	bl	8001500 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000610:	2301      	movs	r3, #1
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000614:	f001 fd30 	bl	8002078 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000618:	f000 fba6 	bl	8000d68 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800061c:	f001 fcfc 	bl	8002018 <vPortEnterCritical>
 8000620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000626:	b25b      	sxtb	r3, r3
 8000628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800062c:	d103      	bne.n	8000636 <xQueueReceive+0x122>
 800062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800063c:	b25b      	sxtb	r3, r3
 800063e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000642:	d103      	bne.n	800064c <xQueueReceive+0x138>
 8000644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800064c:	f001 fd14 	bl	8002078 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000650:	1d3a      	adds	r2, r7, #4
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	4611      	mov	r1, r2
 8000658:	4618      	mov	r0, r3
 800065a:	f000 ff67 	bl	800152c <xTaskCheckForTimeOut>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d123      	bne.n	80006ac <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000666:	f000 f8ad 	bl	80007c4 <prvIsQueueEmpty>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d017      	beq.n	80006a0 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000672:	3324      	adds	r3, #36	; 0x24
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fe01 	bl	8001280 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800067e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000680:	f000 f84e 	bl	8000720 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000684:	f000 fb7e 	bl	8000d84 <xTaskResumeAll>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d189      	bne.n	80005a2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <xQueueReceive+0x1bc>)
 8000690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	f3bf 8f4f 	dsb	sy
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	e780      	b.n	80005a2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80006a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006a2:	f000 f83d 	bl	8000720 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006a6:	f000 fb6d 	bl	8000d84 <xTaskResumeAll>
 80006aa:	e77a      	b.n	80005a2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80006ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006ae:	f000 f837 	bl	8000720 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006b2:	f000 fb67 	bl	8000d84 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006b8:	f000 f884 	bl	80007c4 <prvIsQueueEmpty>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	f43f af6f 	beq.w	80005a2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80006c4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3730      	adds	r7, #48	; 0x30
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	e000ed04 	.word	0xe000ed04

080006d4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d018      	beq.n	8000718 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68da      	ldr	r2, [r3, #12]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	441a      	add	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	68da      	ldr	r2, [r3, #12]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d303      	bcc.n	8000708 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68d9      	ldr	r1, [r3, #12]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	461a      	mov	r2, r3
 8000712:	6838      	ldr	r0, [r7, #0]
 8000714:	f001 ffd8 	bl	80026c8 <memcpy>
    }
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000728:	f001 fc76 	bl	8002018 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000732:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000734:	e011      	b.n	800075a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	2b00      	cmp	r3, #0
 800073c:	d012      	beq.n	8000764 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3324      	adds	r3, #36	; 0x24
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fe06 	bl	8001354 <xTaskRemoveFromEventList>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800074e:	f000 ff53 	bl	80015f8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	3b01      	subs	r3, #1
 8000756:	b2db      	uxtb	r3, r3
 8000758:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800075a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075e:	2b00      	cmp	r3, #0
 8000760:	dce9      	bgt.n	8000736 <prvUnlockQueue+0x16>
 8000762:	e000      	b.n	8000766 <prvUnlockQueue+0x46>
                    break;
 8000764:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	22ff      	movs	r2, #255	; 0xff
 800076a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800076e:	f001 fc83 	bl	8002078 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000772:	f001 fc51 	bl	8002018 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800077c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800077e:	e011      	b.n	80007a4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	691b      	ldr	r3, [r3, #16]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d012      	beq.n	80007ae <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3310      	adds	r3, #16
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fde1 	bl	8001354 <xTaskRemoveFromEventList>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000798:	f000 ff2e 	bl	80015f8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800079c:	7bbb      	ldrb	r3, [r7, #14]
 800079e:	3b01      	subs	r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80007a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	dce9      	bgt.n	8000780 <prvUnlockQueue+0x60>
 80007ac:	e000      	b.n	80007b0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80007ae:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	22ff      	movs	r2, #255	; 0xff
 80007b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80007b8:	f001 fc5e 	bl	8002078 <vPortExitCritical>
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80007cc:	f001 fc24 	bl	8002018 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80007d8:	2301      	movs	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	e001      	b.n	80007e2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80007e2:	f001 fc49 	bl	8002078 <vPortExitCritical>

    return xReturn;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80007f0:	b480      	push	{r7}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10a      	bne.n	800081a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8000804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000808:	f383 8811 	msr	BASEPRI, r3
 800080c:	f3bf 8f6f 	isb	sy
 8000810:	f3bf 8f4f 	dsb	sy
 8000814:	60fb      	str	r3, [r7, #12]
    }
 8000816:	bf00      	nop
 8000818:	e7fe      	b.n	8000818 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d024      	beq.n	800086a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	e01e      	b.n	8000864 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000826:	4a18      	ldr	r2, [pc, #96]	; (8000888 <vQueueAddToRegistry+0x98>)
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	4413      	add	r3, r2
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	429a      	cmp	r2, r3
 8000834:	d105      	bne.n	8000842 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	4a13      	ldr	r2, [pc, #76]	; (8000888 <vQueueAddToRegistry+0x98>)
 800083c:	4413      	add	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
                    break;
 8000840:	e013      	b.n	800086a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10a      	bne.n	800085e <vQueueAddToRegistry+0x6e>
 8000848:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <vQueueAddToRegistry+0x98>)
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d104      	bne.n	800085e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <vQueueAddToRegistry+0x98>)
 800085a:	4413      	add	r3, r2
 800085c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3301      	adds	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	2b07      	cmp	r3, #7
 8000868:	d9dd      	bls.n	8000826 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d005      	beq.n	800087c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800087c:	bf00      	nop
 800087e:	371c      	adds	r7, #28
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	20000024 	.word	0x20000024

0800088c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800089c:	f001 fbbc 	bl	8002018 <vPortEnterCritical>
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ac:	d103      	bne.n	80008b6 <vQueueWaitForMessageRestricted+0x2a>
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c2:	d103      	bne.n	80008cc <vQueueWaitForMessageRestricted+0x40>
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80008cc:	f001 fbd4 	bl	8002078 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d106      	bne.n	80008e6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	3324      	adds	r3, #36	; 0x24
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	68b9      	ldr	r1, [r7, #8]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fcf1 	bl	80012c8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80008e6:	6978      	ldr	r0, [r7, #20]
 80008e8:	f7ff ff1a 	bl	8000720 <prvUnlockQueue>
    }
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af04      	add	r7, sp, #16
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	4613      	mov	r3, r2
 8000902:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fc5d 	bl	80021c8 <pvPortMalloc>
 800090e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d013      	beq.n	800093e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000916:	2058      	movs	r0, #88	; 0x58
 8000918:	f001 fc56 	bl	80021c8 <pvPortMalloc>
 800091c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d008      	beq.n	8000936 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000924:	2258      	movs	r2, #88	; 0x58
 8000926:	2100      	movs	r1, #0
 8000928:	69f8      	ldr	r0, [r7, #28]
 800092a:	f001 fedb 	bl	80026e4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
 8000934:	e005      	b.n	8000942 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f001 fd00 	bl	800233c <vPortFree>
 800093c:	e001      	b.n	8000942 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d013      	beq.n	8000970 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000948:	88fa      	ldrh	r2, [r7, #6]
 800094a:	2300      	movs	r3, #0
 800094c:	9303      	str	r3, [sp, #12]
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	9302      	str	r3, [sp, #8]
 8000952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f000 f80e 	bl	8000980 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000964:	69f8      	ldr	r0, [r7, #28]
 8000966:	f000 f899 	bl	8000a9c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800096a:	2301      	movs	r3, #1
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	e002      	b.n	8000976 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000976:	69bb      	ldr	r3, [r7, #24]
    }
 8000978:	4618      	mov	r0, r3
 800097a:	3720      	adds	r7, #32
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000990:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	461a      	mov	r2, r3
 8000998:	21a5      	movs	r1, #165	; 0xa5
 800099a:	f001 fea3 	bl	80026e4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800099e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009a8:	3b01      	subs	r3, #1
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	f023 0307 	bic.w	r3, r3, #7
 80009b6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00a      	beq.n	80009d8 <prvInitialiseNewTask+0x58>
        __asm volatile
 80009c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c6:	f383 8811 	msr	BASEPRI, r3
 80009ca:	f3bf 8f6f 	isb	sy
 80009ce:	f3bf 8f4f 	dsb	sy
 80009d2:	617b      	str	r3, [r7, #20]
    }
 80009d4:	bf00      	nop
 80009d6:	e7fe      	b.n	80009d6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d01e      	beq.n	8000a1c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
 80009e2:	e012      	b.n	8000a0a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80009e4:	68ba      	ldr	r2, [r7, #8]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	4413      	add	r3, r2
 80009ea:	7819      	ldrb	r1, [r3, #0]
 80009ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	4413      	add	r3, r2
 80009f2:	3334      	adds	r3, #52	; 0x34
 80009f4:	460a      	mov	r2, r1
 80009f6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d006      	beq.n	8000a12 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	3301      	adds	r3, #1
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	2b09      	cmp	r3, #9
 8000a0e:	d9e9      	bls.n	80009e4 <prvInitialiseNewTask+0x64>
 8000a10:	e000      	b.n	8000a14 <prvInitialiseNewTask+0x94>
            {
                break;
 8000a12:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	d90a      	bls.n	8000a38 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8000a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a26:	f383 8811 	msr	BASEPRI, r3
 8000a2a:	f3bf 8f6f 	isb	sy
 8000a2e:	f3bf 8f4f 	dsb	sy
 8000a32:	613b      	str	r3, [r7, #16]
    }
 8000a34:	bf00      	nop
 8000a36:	e7fe      	b.n	8000a36 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	d901      	bls.n	8000a42 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a4c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3304      	adds	r3, #4
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fbec 	bl	8000230 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5a:	3318      	adds	r3, #24
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fbe7 	bl	8000230 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a66:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	f1c3 0205 	rsb	r2, r3, #5
 8000a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a70:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	68f9      	ldr	r1, [r7, #12]
 8000a7c:	69b8      	ldr	r0, [r7, #24]
 8000a7e:	f001 f99b 	bl	8001db8 <pxPortInitialiseStack>
 8000a82:	4602      	mov	r2, r0
 8000a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a86:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a92:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000aa4:	f001 fab8 	bl	8002018 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000aa8:	4b40      	ldr	r3, [pc, #256]	; (8000bac <prvAddNewTaskToReadyList+0x110>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	4a3f      	ldr	r2, [pc, #252]	; (8000bac <prvAddNewTaskToReadyList+0x110>)
 8000ab0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000ab2:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <prvAddNewTaskToReadyList+0x114>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d109      	bne.n	8000ace <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000aba:	4a3d      	ldr	r2, [pc, #244]	; (8000bb0 <prvAddNewTaskToReadyList+0x114>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ac0:	4b3a      	ldr	r3, [pc, #232]	; (8000bac <prvAddNewTaskToReadyList+0x110>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d110      	bne.n	8000aea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ac8:	f000 fdba 	bl	8001640 <prvInitialiseTaskLists>
 8000acc:	e00d      	b.n	8000aea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <prvAddNewTaskToReadyList+0x118>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d109      	bne.n	8000aea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000ad6:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <prvAddNewTaskToReadyList+0x114>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d802      	bhi.n	8000aea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000ae4:	4a32      	ldr	r2, [pc, #200]	; (8000bb0 <prvAddNewTaskToReadyList+0x114>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000aea:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <prvAddNewTaskToReadyList+0x11c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4a31      	ldr	r2, [pc, #196]	; (8000bb8 <prvAddNewTaskToReadyList+0x11c>)
 8000af2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000af4:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <prvAddNewTaskToReadyList+0x11c>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b00:	2201      	movs	r2, #1
 8000b02:	409a      	lsls	r2, r3
 8000b04:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <prvAddNewTaskToReadyList+0x120>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	4a2c      	ldr	r2, [pc, #176]	; (8000bbc <prvAddNewTaskToReadyList+0x120>)
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b12:	492b      	ldr	r1, [pc, #172]	; (8000bc0 <prvAddNewTaskToReadyList+0x124>)
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	3304      	adds	r3, #4
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	3204      	adds	r2, #4
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	1d1a      	adds	r2, r3, #4
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b48:	4613      	mov	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4a1b      	ldr	r2, [pc, #108]	; (8000bc0 <prvAddNewTaskToReadyList+0x124>)
 8000b52:	441a      	add	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	615a      	str	r2, [r3, #20]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5c:	4918      	ldr	r1, [pc, #96]	; (8000bc0 <prvAddNewTaskToReadyList+0x124>)
 8000b5e:	4613      	mov	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4413      	add	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	440b      	add	r3, r1
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	1c59      	adds	r1, r3, #1
 8000b6c:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <prvAddNewTaskToReadyList+0x124>)
 8000b6e:	4613      	mov	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4403      	add	r3, r0
 8000b78:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000b7a:	f001 fa7d 	bl	8002078 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <prvAddNewTaskToReadyList+0x118>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00e      	beq.n	8000ba4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <prvAddNewTaskToReadyList+0x114>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <prvAddNewTaskToReadyList+0x128>)
 8000b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	f3bf 8f4f 	dsb	sy
 8000ba0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000013c 	.word	0x2000013c
 8000bb0:	20000064 	.word	0x20000064
 8000bb4:	20000148 	.word	0x20000148
 8000bb8:	20000158 	.word	0x20000158
 8000bbc:	20000144 	.word	0x20000144
 8000bc0:	20000068 	.word	0x20000068
 8000bc4:	e000ed04 	.word	0xe000ed04

08000bc8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10a      	bne.n	8000bf2 <xTaskDelayUntil+0x2a>
        __asm volatile
 8000bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000be0:	f383 8811 	msr	BASEPRI, r3
 8000be4:	f3bf 8f6f 	isb	sy
 8000be8:	f3bf 8f4f 	dsb	sy
 8000bec:	617b      	str	r3, [r7, #20]
    }
 8000bee:	bf00      	nop
 8000bf0:	e7fe      	b.n	8000bf0 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10a      	bne.n	8000c0e <xTaskDelayUntil+0x46>
        __asm volatile
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	613b      	str	r3, [r7, #16]
    }
 8000c0a:	bf00      	nop
 8000c0c:	e7fe      	b.n	8000c0c <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <xTaskDelayUntil+0xf0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d00a      	beq.n	8000c2c <xTaskDelayUntil+0x64>
        __asm volatile
 8000c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c1a:	f383 8811 	msr	BASEPRI, r3
 8000c1e:	f3bf 8f6f 	isb	sy
 8000c22:	f3bf 8f4f 	dsb	sy
 8000c26:	60fb      	str	r3, [r7, #12]
    }
 8000c28:	bf00      	nop
 8000c2a:	e7fe      	b.n	8000c2a <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8000c2c:	f000 f89c 	bl	8000d68 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <xTaskDelayUntil+0xf4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6a3a      	ldr	r2, [r7, #32]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d20b      	bcs.n	8000c62 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d211      	bcs.n	8000c78 <xTaskDelayUntil+0xb0>
 8000c54:	69fa      	ldr	r2, [r7, #28]
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d90d      	bls.n	8000c78 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	e00a      	b.n	8000c78 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d303      	bcc.n	8000c74 <xTaskDelayUntil+0xac>
 8000c6c:	69fa      	ldr	r2, [r7, #28]
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d901      	bls.n	8000c78 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d006      	beq.n	8000c92 <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8000c84:	69fa      	ldr	r2, [r7, #28]
 8000c86:	6a3b      	ldr	r3, [r7, #32]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fd8f 	bl	80017b0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8000c92:	f000 f877 	bl	8000d84 <xTaskResumeAll>
 8000c96:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d107      	bne.n	8000cae <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <xTaskDelayUntil+0xf8>)
 8000ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	f3bf 8f4f 	dsb	sy
 8000caa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000164 	.word	0x20000164
 8000cbc:	20000140 	.word	0x20000140
 8000cc0:	e000ed04 	.word	0xe000ed04

08000cc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000cca:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <vTaskStartScheduler+0x88>)
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2282      	movs	r2, #130	; 0x82
 8000cd6:	491e      	ldr	r1, [pc, #120]	; (8000d50 <vTaskStartScheduler+0x8c>)
 8000cd8:	481e      	ldr	r0, [pc, #120]	; (8000d54 <vTaskStartScheduler+0x90>)
 8000cda:	f7ff fe0b 	bl	80008f4 <xTaskCreate>
 8000cde:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d102      	bne.n	8000cec <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8000ce6:	f000 fde3 	bl	80018b0 <xTimerCreateTimerTask>
 8000cea:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d116      	bne.n	8000d20 <vTaskStartScheduler+0x5c>
        __asm volatile
 8000cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf6:	f383 8811 	msr	BASEPRI, r3
 8000cfa:	f3bf 8f6f 	isb	sy
 8000cfe:	f3bf 8f4f 	dsb	sy
 8000d02:	60bb      	str	r3, [r7, #8]
    }
 8000d04:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <vTaskStartScheduler+0x94>)
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <vTaskStartScheduler+0x98>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <vTaskStartScheduler+0x9c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000d1a:	f001 f8db 	bl	8001ed4 <xPortStartScheduler>
 8000d1e:	e00e      	b.n	8000d3e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d26:	d10a      	bne.n	8000d3e <vTaskStartScheduler+0x7a>
        __asm volatile
 8000d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d2c:	f383 8811 	msr	BASEPRI, r3
 8000d30:	f3bf 8f6f 	isb	sy
 8000d34:	f3bf 8f4f 	dsb	sy
 8000d38:	607b      	str	r3, [r7, #4]
    }
 8000d3a:	bf00      	nop
 8000d3c:	e7fe      	b.n	8000d3c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <vTaskStartScheduler+0xa0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000160 	.word	0x20000160
 8000d50:	0800270c 	.word	0x0800270c
 8000d54:	08001611 	.word	0x08001611
 8000d58:	2000015c 	.word	0x2000015c
 8000d5c:	20000148 	.word	0x20000148
 8000d60:	20000140 	.word	0x20000140
 8000d64:	20000000 	.word	0x20000000

08000d68 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <vTaskSuspendAll+0x18>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a03      	ldr	r2, [pc, #12]	; (8000d80 <vTaskSuspendAll+0x18>)
 8000d74:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	20000164 	.word	0x20000164

08000d84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000d92:	4b71      	ldr	r3, [pc, #452]	; (8000f58 <xTaskResumeAll+0x1d4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10a      	bne.n	8000db0 <xTaskResumeAll+0x2c>
        __asm volatile
 8000d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d9e:	f383 8811 	msr	BASEPRI, r3
 8000da2:	f3bf 8f6f 	isb	sy
 8000da6:	f3bf 8f4f 	dsb	sy
 8000daa:	607b      	str	r3, [r7, #4]
    }
 8000dac:	bf00      	nop
 8000dae:	e7fe      	b.n	8000dae <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000db0:	f001 f932 	bl	8002018 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000db4:	4b68      	ldr	r3, [pc, #416]	; (8000f58 <xTaskResumeAll+0x1d4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	4a67      	ldr	r2, [pc, #412]	; (8000f58 <xTaskResumeAll+0x1d4>)
 8000dbc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000dbe:	4b66      	ldr	r3, [pc, #408]	; (8000f58 <xTaskResumeAll+0x1d4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 80c0 	bne.w	8000f48 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000dc8:	4b64      	ldr	r3, [pc, #400]	; (8000f5c <xTaskResumeAll+0x1d8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f000 80bb 	beq.w	8000f48 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000dd2:	e08a      	b.n	8000eea <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000dd4:	4b62      	ldr	r3, [pc, #392]	; (8000f60 <xTaskResumeAll+0x1dc>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	69fa      	ldr	r2, [r7, #28]
 8000de8:	6a12      	ldr	r2, [r2, #32]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	69d2      	ldr	r2, [r2, #28]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3318      	adds	r3, #24
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d103      	bne.n	8000e0a <xTaskResumeAll+0x86>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	6a1a      	ldr	r2, [r3, #32]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	69fa      	ldr	r2, [r7, #28]
 8000e26:	68d2      	ldr	r2, [r2, #12]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	6892      	ldr	r2, [r2, #8]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d103      	bne.n	8000e48 <xTaskResumeAll+0xc4>
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <xTaskResumeAll+0x1e0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	4a3f      	ldr	r2, [pc, #252]	; (8000f64 <xTaskResumeAll+0x1e0>)
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6e:	493e      	ldr	r1, [pc, #248]	; (8000f68 <xTaskResumeAll+0x1e4>)
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	3204      	adds	r2, #4
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	1d1a      	adds	r2, r3, #4
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4a2e      	ldr	r2, [pc, #184]	; (8000f68 <xTaskResumeAll+0x1e4>)
 8000eae:	441a      	add	r2, r3
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	615a      	str	r2, [r3, #20]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb8:	492b      	ldr	r1, [pc, #172]	; (8000f68 <xTaskResumeAll+0x1e4>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	1c59      	adds	r1, r3, #1
 8000ec8:	4827      	ldr	r0, [pc, #156]	; (8000f68 <xTaskResumeAll+0x1e4>)
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4403      	add	r3, r0
 8000ed4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <xTaskResumeAll+0x1e8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d302      	bcc.n	8000eea <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <xTaskResumeAll+0x1ec>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <xTaskResumeAll+0x1dc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f47f af70 	bne.w	8000dd4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000efa:	f000 fc1f 	bl	800173c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <xTaskResumeAll+0x1f0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d010      	beq.n	8000f2c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000f0a:	f000 f847 	bl	8000f9c <xTaskIncrementTick>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <xTaskResumeAll+0x1ec>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f1      	bne.n	8000f0a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <xTaskResumeAll+0x1f0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000f2c:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <xTaskResumeAll+0x1ec>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d009      	beq.n	8000f48 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <xTaskResumeAll+0x1f4>)
 8000f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	f3bf 8f4f 	dsb	sy
 8000f44:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000f48:	f001 f896 	bl	8002078 <vPortExitCritical>

    return xAlreadyYielded;
 8000f4c:	69bb      	ldr	r3, [r7, #24]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000164 	.word	0x20000164
 8000f5c:	2000013c 	.word	0x2000013c
 8000f60:	200000fc 	.word	0x200000fc
 8000f64:	20000144 	.word	0x20000144
 8000f68:	20000068 	.word	0x20000068
 8000f6c:	20000064 	.word	0x20000064
 8000f70:	20000150 	.word	0x20000150
 8000f74:	2000014c 	.word	0x2000014c
 8000f78:	e000ed04 	.word	0xe000ed04

08000f7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <xTaskGetTickCount+0x1c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000140 	.word	0x20000140

08000f9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000fa6:	4b7d      	ldr	r3, [pc, #500]	; (800119c <xTaskIncrementTick+0x200>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f040 80ec 	bne.w	8001188 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000fb0:	4b7b      	ldr	r3, [pc, #492]	; (80011a0 <xTaskIncrementTick+0x204>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000fb8:	4a79      	ldr	r2, [pc, #484]	; (80011a0 <xTaskIncrementTick+0x204>)
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d120      	bne.n	8001006 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000fc4:	4b77      	ldr	r3, [pc, #476]	; (80011a4 <xTaskIncrementTick+0x208>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00a      	beq.n	8000fe4 <xTaskIncrementTick+0x48>
        __asm volatile
 8000fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fd2:	f383 8811 	msr	BASEPRI, r3
 8000fd6:	f3bf 8f6f 	isb	sy
 8000fda:	f3bf 8f4f 	dsb	sy
 8000fde:	607b      	str	r3, [r7, #4]
    }
 8000fe0:	bf00      	nop
 8000fe2:	e7fe      	b.n	8000fe2 <xTaskIncrementTick+0x46>
 8000fe4:	4b6f      	ldr	r3, [pc, #444]	; (80011a4 <xTaskIncrementTick+0x208>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	4b6f      	ldr	r3, [pc, #444]	; (80011a8 <xTaskIncrementTick+0x20c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a6d      	ldr	r2, [pc, #436]	; (80011a4 <xTaskIncrementTick+0x208>)
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4a6d      	ldr	r2, [pc, #436]	; (80011a8 <xTaskIncrementTick+0x20c>)
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b6c      	ldr	r3, [pc, #432]	; (80011ac <xTaskIncrementTick+0x210>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a6b      	ldr	r2, [pc, #428]	; (80011ac <xTaskIncrementTick+0x210>)
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	f000 fb9b 	bl	800173c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001006:	4b6a      	ldr	r3, [pc, #424]	; (80011b0 <xTaskIncrementTick+0x214>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a3a      	ldr	r2, [r7, #32]
 800100c:	429a      	cmp	r2, r3
 800100e:	f0c0 80a6 	bcc.w	800115e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001012:	4b64      	ldr	r3, [pc, #400]	; (80011a4 <xTaskIncrementTick+0x208>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800101c:	4b64      	ldr	r3, [pc, #400]	; (80011b0 <xTaskIncrementTick+0x214>)
 800101e:	f04f 32ff 	mov.w	r2, #4294967295
 8001022:	601a      	str	r2, [r3, #0]
                    break;
 8001024:	e09b      	b.n	800115e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001026:	4b5f      	ldr	r3, [pc, #380]	; (80011a4 <xTaskIncrementTick+0x208>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001036:	6a3a      	ldr	r2, [r7, #32]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	429a      	cmp	r2, r3
 800103c:	d203      	bcs.n	8001046 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800103e:	4a5c      	ldr	r2, [pc, #368]	; (80011b0 <xTaskIncrementTick+0x214>)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001044:	e08b      	b.n	800115e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	68d2      	ldr	r2, [r2, #12]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	6892      	ldr	r2, [r2, #8]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	3304      	adds	r3, #4
 8001068:	429a      	cmp	r2, r3
 800106a:	d103      	bne.n	8001074 <xTaskIncrementTick+0xd8>
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	1e5a      	subs	r2, r3, #1
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	2b00      	cmp	r3, #0
 800108a:	d01e      	beq.n	80010ca <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	6a12      	ldr	r2, [r2, #32]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	69d2      	ldr	r2, [r2, #28]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	3318      	adds	r3, #24
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d103      	bne.n	80010ba <xTaskIncrementTick+0x11e>
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	6a1a      	ldr	r2, [r3, #32]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	2200      	movs	r2, #0
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	1e5a      	subs	r2, r3, #1
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ce:	2201      	movs	r2, #1
 80010d0:	409a      	lsls	r2, r3
 80010d2:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <xTaskIncrementTick+0x218>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	4a36      	ldr	r2, [pc, #216]	; (80011b4 <xTaskIncrementTick+0x218>)
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e0:	4935      	ldr	r1, [pc, #212]	; (80011b8 <xTaskIncrementTick+0x21c>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	3304      	adds	r3, #4
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	3204      	adds	r2, #4
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	1d1a      	adds	r2, r3, #4
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <xTaskIncrementTick+0x21c>)
 8001120:	441a      	add	r2, r3
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	615a      	str	r2, [r3, #20]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112a:	4923      	ldr	r1, [pc, #140]	; (80011b8 <xTaskIncrementTick+0x21c>)
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	1c59      	adds	r1, r3, #1
 800113a:	481f      	ldr	r0, [pc, #124]	; (80011b8 <xTaskIncrementTick+0x21c>)
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4403      	add	r3, r0
 8001146:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <xTaskIncrementTick+0x220>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	429a      	cmp	r2, r3
 8001154:	f67f af5d 	bls.w	8001012 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001158:	2301      	movs	r3, #1
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800115c:	e759      	b.n	8001012 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <xTaskIncrementTick+0x220>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001164:	4914      	ldr	r1, [pc, #80]	; (80011b8 <xTaskIncrementTick+0x21c>)
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d901      	bls.n	800117a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8001176:	2301      	movs	r3, #1
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <xTaskIncrementTick+0x224>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d007      	beq.n	8001192 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8001182:	2301      	movs	r3, #1
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
 8001186:	e004      	b.n	8001192 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <xTaskIncrementTick+0x228>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <xTaskIncrementTick+0x228>)
 8001190:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001194:	4618      	mov	r0, r3
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000164 	.word	0x20000164
 80011a0:	20000140 	.word	0x20000140
 80011a4:	200000f4 	.word	0x200000f4
 80011a8:	200000f8 	.word	0x200000f8
 80011ac:	20000154 	.word	0x20000154
 80011b0:	2000015c 	.word	0x2000015c
 80011b4:	20000144 	.word	0x20000144
 80011b8:	20000068 	.word	0x20000068
 80011bc:	20000064 	.word	0x20000064
 80011c0:	20000150 	.word	0x20000150
 80011c4:	2000014c 	.word	0x2000014c

080011c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80011ce:	4b27      	ldr	r3, [pc, #156]	; (800126c <vTaskSwitchContext+0xa4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <vTaskSwitchContext+0xa8>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80011dc:	e03f      	b.n	800125e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <vTaskSwitchContext+0xa8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <vTaskSwitchContext+0xac>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	fab3 f383 	clz	r3, r3
 80011f0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	f1c3 031f 	rsb	r3, r3, #31
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	491f      	ldr	r1, [pc, #124]	; (8001278 <vTaskSwitchContext+0xb0>)
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10a      	bne.n	8001224 <vTaskSwitchContext+0x5c>
        __asm volatile
 800120e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001212:	f383 8811 	msr	BASEPRI, r3
 8001216:	f3bf 8f6f 	isb	sy
 800121a:	f3bf 8f4f 	dsb	sy
 800121e:	607b      	str	r3, [r7, #4]
    }
 8001220:	bf00      	nop
 8001222:	e7fe      	b.n	8001222 <vTaskSwitchContext+0x5a>
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <vTaskSwitchContext+0xb0>)
 8001230:	4413      	add	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	3308      	adds	r3, #8
 8001246:	429a      	cmp	r2, r3
 8001248:	d104      	bne.n	8001254 <vTaskSwitchContext+0x8c>
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <vTaskSwitchContext+0xb4>)
 800125c:	6013      	str	r3, [r2, #0]
}
 800125e:	bf00      	nop
 8001260:	371c      	adds	r7, #28
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000164 	.word	0x20000164
 8001270:	20000150 	.word	0x20000150
 8001274:	20000144 	.word	0x20000144
 8001278:	20000068 	.word	0x20000068
 800127c:	20000064 	.word	0x20000064

08001280 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10a      	bne.n	80012a6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001294:	f383 8811 	msr	BASEPRI, r3
 8001298:	f3bf 8f6f 	isb	sy
 800129c:	f3bf 8f4f 	dsb	sy
 80012a0:	60fb      	str	r3, [r7, #12]
    }
 80012a2:	bf00      	nop
 80012a4:	e7fe      	b.n	80012a4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <vTaskPlaceOnEventList+0x44>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3318      	adds	r3, #24
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7fe ffcb 	bl	800024a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80012b4:	2101      	movs	r1, #1
 80012b6:	6838      	ldr	r0, [r7, #0]
 80012b8:	f000 fa7a 	bl	80017b0 <prvAddCurrentTaskToDelayedList>
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000064 	.word	0x20000064

080012c8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10a      	bne.n	80012f0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80012da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012de:	f383 8811 	msr	BASEPRI, r3
 80012e2:	f3bf 8f6f 	isb	sy
 80012e6:	f3bf 8f4f 	dsb	sy
 80012ea:	613b      	str	r3, [r7, #16]
    }
 80012ec:	bf00      	nop
 80012ee:	e7fe      	b.n	80012ee <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <vTaskPlaceOnEventListRestricted+0x88>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	61da      	str	r2, [r3, #28]
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <vTaskPlaceOnEventListRestricted+0x88>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	6892      	ldr	r2, [r2, #8]
 8001306:	621a      	str	r2, [r3, #32]
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <vTaskPlaceOnEventListRestricted+0x88>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	3218      	adds	r2, #24
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <vTaskPlaceOnEventListRestricted+0x88>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f103 0218 	add.w	r2, r3, #24
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <vTaskPlaceOnEventListRestricted+0x88>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	68b8      	ldr	r0, [r7, #8]
 8001342:	f000 fa35 	bl	80017b0 <prvAddCurrentTaskToDelayedList>
    }
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000064 	.word	0x20000064

08001354 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001354:	b480      	push	{r7}
 8001356:	b08b      	sub	sp, #44	; 0x2c
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10a      	bne.n	8001380 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800136a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800136e:	f383 8811 	msr	BASEPRI, r3
 8001372:	f3bf 8f6f 	isb	sy
 8001376:	f3bf 8f4f 	dsb	sy
 800137a:	60fb      	str	r3, [r7, #12]
    }
 800137c:	bf00      	nop
 800137e:	e7fe      	b.n	800137e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	6a3a      	ldr	r2, [r7, #32]
 800138c:	6a12      	ldr	r2, [r2, #32]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	6a3a      	ldr	r2, [r7, #32]
 8001396:	69d2      	ldr	r2, [r2, #28]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	3318      	adds	r3, #24
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d103      	bne.n	80013ae <xTaskRemoveFromEventList+0x5a>
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	6a1a      	ldr	r2, [r3, #32]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	2200      	movs	r2, #0
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	1e5a      	subs	r2, r3, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013be:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <xTaskRemoveFromEventList+0x194>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d15e      	bne.n	8001484 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	6a3a      	ldr	r2, [r7, #32]
 80013d2:	68d2      	ldr	r2, [r2, #12]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	6a3a      	ldr	r2, [r7, #32]
 80013dc:	6892      	ldr	r2, [r2, #8]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	3304      	adds	r3, #4
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d103      	bne.n	80013f4 <xTaskRemoveFromEventList+0xa0>
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1e5a      	subs	r2, r3, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	2201      	movs	r2, #1
 800140a:	409a      	lsls	r2, r3
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <xTaskRemoveFromEventList+0x198>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4313      	orrs	r3, r2
 8001412:	4a36      	ldr	r2, [pc, #216]	; (80014ec <xTaskRemoveFromEventList+0x198>)
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800141a:	4935      	ldr	r1, [pc, #212]	; (80014f0 <xTaskRemoveFromEventList+0x19c>)
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	3304      	adds	r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	6a3a      	ldr	r2, [r7, #32]
 8001440:	3204      	adds	r2, #4
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	1d1a      	adds	r2, r3, #4
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <xTaskRemoveFromEventList+0x19c>)
 800145a:	441a      	add	r2, r3
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	615a      	str	r2, [r3, #20]
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001464:	4922      	ldr	r1, [pc, #136]	; (80014f0 <xTaskRemoveFromEventList+0x19c>)
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	1c59      	adds	r1, r3, #1
 8001474:	481e      	ldr	r0, [pc, #120]	; (80014f0 <xTaskRemoveFromEventList+0x19c>)
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4403      	add	r3, r0
 8001480:	6019      	str	r1, [r3, #0]
 8001482:	e01b      	b.n	80014bc <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <xTaskRemoveFromEventList+0x1a0>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	61da      	str	r2, [r3, #28]
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	621a      	str	r2, [r3, #32]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	6a3a      	ldr	r2, [r7, #32]
 800149e:	3218      	adds	r2, #24
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	f103 0218 	add.w	r2, r3, #24
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <xTaskRemoveFromEventList+0x1a0>)
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <xTaskRemoveFromEventList+0x1a0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <xTaskRemoveFromEventList+0x1a0>)
 80014ba:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <xTaskRemoveFromEventList+0x1a4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d905      	bls.n	80014d6 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80014ca:	2301      	movs	r3, #1
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <xTaskRemoveFromEventList+0x1a8>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e001      	b.n	80014da <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80014dc:	4618      	mov	r0, r3
 80014de:	372c      	adds	r7, #44	; 0x2c
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	20000164 	.word	0x20000164
 80014ec:	20000144 	.word	0x20000144
 80014f0:	20000068 	.word	0x20000068
 80014f4:	200000fc 	.word	0x200000fc
 80014f8:	20000064 	.word	0x20000064
 80014fc:	20000150 	.word	0x20000150

08001500 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <vTaskInternalSetTimeOutState+0x24>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <vTaskInternalSetTimeOutState+0x28>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	605a      	str	r2, [r3, #4]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	20000154 	.word	0x20000154
 8001528:	20000140 	.word	0x20000140

0800152c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10a      	bne.n	8001552 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800153c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001540:	f383 8811 	msr	BASEPRI, r3
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	f3bf 8f4f 	dsb	sy
 800154c:	613b      	str	r3, [r7, #16]
    }
 800154e:	bf00      	nop
 8001550:	e7fe      	b.n	8001550 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10a      	bne.n	800156e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	60fb      	str	r3, [r7, #12]
    }
 800156a:	bf00      	nop
 800156c:	e7fe      	b.n	800156c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800156e:	f000 fd53 	bl	8002018 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <xTaskCheckForTimeOut+0xc4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158a:	d102      	bne.n	8001592 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	e026      	b.n	80015e0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <xTaskCheckForTimeOut+0xc8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d00a      	beq.n	80015b4 <xTaskCheckForTimeOut+0x88>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d305      	bcc.n	80015b4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	e015      	b.n	80015e0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d20b      	bcs.n	80015d6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	1ad2      	subs	r2, r2, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff98 	bl	8001500 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	e004      	b.n	80015e0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80015dc:	2301      	movs	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80015e0:	f000 fd4a 	bl	8002078 <vPortExitCritical>

    return xReturn;
 80015e4:	69fb      	ldr	r3, [r7, #28]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3720      	adds	r7, #32
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000140 	.word	0x20000140
 80015f4:	20000154 	.word	0x20000154

080015f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <vTaskMissedYield+0x14>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	20000150 	.word	0x20000150

08001610 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001618:	f000 f852 	bl	80016c0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <prvIdleTask+0x28>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d9f9      	bls.n	8001618 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <prvIdleTask+0x2c>)
 8001626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	f3bf 8f4f 	dsb	sy
 8001630:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001634:	e7f0      	b.n	8001618 <prvIdleTask+0x8>
 8001636:	bf00      	nop
 8001638:	20000068 	.word	0x20000068
 800163c:	e000ed04 	.word	0xe000ed04

08001640 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	e00c      	b.n	8001666 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <prvInitialiseTaskLists+0x60>)
 8001658:	4413      	add	r3, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fdc8 	bl	80001f0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3301      	adds	r3, #1
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d9ef      	bls.n	800164c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <prvInitialiseTaskLists+0x64>)
 800166e:	f7fe fdbf 	bl	80001f0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <prvInitialiseTaskLists+0x68>)
 8001674:	f7fe fdbc 	bl	80001f0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <prvInitialiseTaskLists+0x6c>)
 800167a:	f7fe fdb9 	bl	80001f0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800167e:	480c      	ldr	r0, [pc, #48]	; (80016b0 <prvInitialiseTaskLists+0x70>)
 8001680:	f7fe fdb6 	bl	80001f0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <prvInitialiseTaskLists+0x74>)
 8001686:	f7fe fdb3 	bl	80001f0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <prvInitialiseTaskLists+0x78>)
 800168c:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <prvInitialiseTaskLists+0x64>)
 800168e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <prvInitialiseTaskLists+0x7c>)
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <prvInitialiseTaskLists+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000068 	.word	0x20000068
 80016a4:	200000cc 	.word	0x200000cc
 80016a8:	200000e0 	.word	0x200000e0
 80016ac:	200000fc 	.word	0x200000fc
 80016b0:	20000110 	.word	0x20000110
 80016b4:	20000128 	.word	0x20000128
 80016b8:	200000f4 	.word	0x200000f4
 80016bc:	200000f8 	.word	0x200000f8

080016c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016c6:	e019      	b.n	80016fc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80016c8:	f000 fca6 	bl	8002018 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <prvCheckTasksWaitingTermination+0x50>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3304      	adds	r3, #4
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fdef 	bl	80002bc <uxListRemove>
                --uxCurrentNumberOfTasks;
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <prvCheckTasksWaitingTermination+0x54>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <prvCheckTasksWaitingTermination+0x54>)
 80016e6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <prvCheckTasksWaitingTermination+0x58>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <prvCheckTasksWaitingTermination+0x58>)
 80016f0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80016f2:	f000 fcc1 	bl	8002078 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f810 	bl	800171c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <prvCheckTasksWaitingTermination+0x58>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1e1      	bne.n	80016c8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000110 	.word	0x20000110
 8001714:	2000013c 	.word	0x2000013c
 8001718:	20000124 	.word	0x20000124

0800171c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fe07 	bl	800233c <vPortFree>
            vPortFree( pxTCB );
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fe04 	bl	800233c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <prvResetNextTaskUnblockTime+0x30>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d104      	bne.n	8001754 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <prvResetNextTaskUnblockTime+0x34>)
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001752:	e005      	b.n	8001760 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <prvResetNextTaskUnblockTime+0x30>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <prvResetNextTaskUnblockTime+0x34>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	200000f4 	.word	0x200000f4
 8001770:	2000015c 	.word	0x2000015c

08001774 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <xTaskGetSchedulerState+0x34>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001782:	2301      	movs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e008      	b.n	800179a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <xTaskGetSchedulerState+0x38>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001790:	2302      	movs	r3, #2
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	e001      	b.n	800179a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800179a:	687b      	ldr	r3, [r7, #4]
    }
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20000148 	.word	0x20000148
 80017ac:	20000164 	.word	0x20000164

080017b0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80017ba:	4b36      	ldr	r3, [pc, #216]	; (8001894 <prvAddCurrentTaskToDelayedList+0xe4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3304      	adds	r3, #4
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fd78 	bl	80002bc <uxListRemove>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10b      	bne.n	80017ea <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80017d2:	4b31      	ldr	r3, [pc, #196]	; (8001898 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	2201      	movs	r2, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	4b2e      	ldr	r3, [pc, #184]	; (800189c <prvAddCurrentTaskToDelayedList+0xec>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4013      	ands	r3, r2
 80017e6:	4a2d      	ldr	r2, [pc, #180]	; (800189c <prvAddCurrentTaskToDelayedList+0xec>)
 80017e8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f0:	d124      	bne.n	800183c <prvAddCurrentTaskToDelayedList+0x8c>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d021      	beq.n	800183c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	6892      	ldr	r2, [r2, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	3204      	adds	r2, #4
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <prvAddCurrentTaskToDelayedList+0xe8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	1d1a      	adds	r2, r3, #4
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800182c:	615a      	str	r2, [r3, #20]
 800182e:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	4a1a      	ldr	r2, [pc, #104]	; (80018a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800183a:	e026      	b.n	800188a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	429a      	cmp	r2, r3
 8001852:	d209      	bcs.n	8001868 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <prvAddCurrentTaskToDelayedList+0xe8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3304      	adds	r3, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4610      	mov	r0, r2
 8001862:	f7fe fcf2 	bl	800024a <vListInsert>
}
 8001866:	e010      	b.n	800188a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <prvAddCurrentTaskToDelayedList+0xe8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3304      	adds	r3, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4610      	mov	r0, r2
 8001876:	f7fe fce8 	bl	800024a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <prvAddCurrentTaskToDelayedList+0xfc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d202      	bcs.n	800188a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001884:	4a09      	ldr	r2, [pc, #36]	; (80018ac <prvAddCurrentTaskToDelayedList+0xfc>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6013      	str	r3, [r2, #0]
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000140 	.word	0x20000140
 8001898:	20000064 	.word	0x20000064
 800189c:	20000144 	.word	0x20000144
 80018a0:	20000128 	.word	0x20000128
 80018a4:	200000f8 	.word	0x200000f8
 80018a8:	200000f4 	.word	0x200000f4
 80018ac:	2000015c 	.word	0x2000015c

080018b0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80018ba:	f000 fa47 	bl	8001d4c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <xTimerCreateTimerTask+0x54>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <xTimerCreateTimerTask+0x58>)
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	2302      	movs	r3, #2
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2300      	movs	r3, #0
 80018d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018d4:	490d      	ldr	r1, [pc, #52]	; (800190c <xTimerCreateTimerTask+0x5c>)
 80018d6:	480e      	ldr	r0, [pc, #56]	; (8001910 <xTimerCreateTimerTask+0x60>)
 80018d8:	f7ff f80c 	bl	80008f4 <xTaskCreate>
 80018dc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10a      	bne.n	80018fa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80018e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e8:	f383 8811 	msr	BASEPRI, r3
 80018ec:	f3bf 8f6f 	isb	sy
 80018f0:	f3bf 8f4f 	dsb	sy
 80018f4:	603b      	str	r3, [r7, #0]
    }
 80018f6:	bf00      	nop
 80018f8:	e7fe      	b.n	80018f8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80018fa:	687b      	ldr	r3, [r7, #4]
    }
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000198 	.word	0x20000198
 8001908:	2000019c 	.word	0x2000019c
 800190c:	08002714 	.word	0x08002714
 8001910:	080019b9 	.word	0x080019b9

08001914 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001920:	e008      	b.n	8001934 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	4413      	add	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	699a      	ldr	r2, [r3, #24]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	18d1      	adds	r1, r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f8dd 	bl	8001b00 <prvInsertTimerInActiveList>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1ea      	bne.n	8001922 <prvReloadTimer+0xe>
        }
    }
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <prvProcessExpiredTimer+0x5c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3304      	adds	r3, #4
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fca3 	bl	80002bc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f7ff ffc3 	bl	8001914 <prvReloadTimer>
 800198e:	e008      	b.n	80019a2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	4798      	blx	r3
    }
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000190 	.word	0x20000190

080019b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f857 	bl	8001a78 <prvGetNextExpireTime>
 80019ca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4619      	mov	r1, r3
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 f803 	bl	80019dc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80019d6:	f000 f8d5 	bl	8001b84 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80019da:	e7f1      	b.n	80019c0 <prvTimerTask+0x8>

080019dc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80019e6:	f7ff f9bf 	bl	8000d68 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f866 	bl	8001ac0 <prvSampleTimeNow>
 80019f4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d130      	bne.n	8001a5e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10a      	bne.n	8001a18 <prvProcessTimerOrBlockTask+0x3c>
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d806      	bhi.n	8001a18 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001a0a:	f7ff f9bb 	bl	8000d84 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001a0e:	68f9      	ldr	r1, [r7, #12]
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ffa1 	bl	8001958 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001a16:	e024      	b.n	8001a62 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d008      	beq.n	8001a30 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <prvProcessTimerOrBlockTask+0x90>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <prvProcessTimerOrBlockTask+0x50>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <prvProcessTimerOrBlockTask+0x52>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <prvProcessTimerOrBlockTask+0x94>)
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7fe ff25 	bl	800088c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001a42:	f7ff f99f 	bl	8000d84 <xTaskResumeAll>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10a      	bne.n	8001a62 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <prvProcessTimerOrBlockTask+0x98>)
 8001a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	f3bf 8f4f 	dsb	sy
 8001a58:	f3bf 8f6f 	isb	sy
    }
 8001a5c:	e001      	b.n	8001a62 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001a5e:	f7ff f991 	bl	8000d84 <xTaskResumeAll>
    }
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000194 	.word	0x20000194
 8001a70:	20000198 	.word	0x20000198
 8001a74:	e000ed04 	.word	0xe000ed04

08001a78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <prvGetNextExpireTime+0x44>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <prvGetNextExpireTime+0x16>
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	e000      	b.n	8001a90 <prvGetNextExpireTime+0x18>
 8001a8e:	2200      	movs	r2, #0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <prvGetNextExpireTime+0x44>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e001      	b.n	8001aac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001aac:	68fb      	ldr	r3, [r7, #12]
    }
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000190 	.word	0x20000190

08001ac0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001ac8:	f7ff fa58 	bl	8000f7c <xTaskGetTickCount>
 8001acc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <prvSampleTimeNow+0x3c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d205      	bcs.n	8001ae4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001ad8:	f000 f912 	bl	8001d00 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e002      	b.n	8001aea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <prvSampleTimeNow+0x3c>)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001af0:	68fb      	ldr	r3, [r7, #12]
    }
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200001a0 	.word	0x200001a0

08001b00 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d812      	bhi.n	8001b4c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	1ad2      	subs	r2, r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d302      	bcc.n	8001b3a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001b34:	2301      	movs	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e01b      	b.n	8001b72 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <prvInsertTimerInActiveList+0x7c>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3304      	adds	r3, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4610      	mov	r0, r2
 8001b46:	f7fe fb80 	bl	800024a <vListInsert>
 8001b4a:	e012      	b.n	8001b72 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d206      	bcs.n	8001b62 <prvInsertTimerInActiveList+0x62>
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d302      	bcc.n	8001b62 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e007      	b.n	8001b72 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <prvInsertTimerInActiveList+0x80>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	f7fe fb6c 	bl	800024a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001b72:	697b      	ldr	r3, [r7, #20]
    }
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000194 	.word	0x20000194
 8001b80:	20000190 	.word	0x20000190

08001b84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001b8a:	e0a6      	b.n	8001cda <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f2c0 80a2 	blt.w	8001cd8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fb89 	bl	80002bc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff87 	bl	8001ac0 <prvSampleTimeNow>
 8001bb2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	f200 808e 	bhi.w	8001cda <prvProcessReceivedCommands+0x156>
 8001bbe:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <prvProcessReceivedCommands+0x40>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001be9 	.word	0x08001be9
 8001bc8:	08001be9 	.word	0x08001be9
 8001bcc:	08001c51 	.word	0x08001c51
 8001bd0:	08001c65 	.word	0x08001c65
 8001bd4:	08001caf 	.word	0x08001caf
 8001bd8:	08001be9 	.word	0x08001be9
 8001bdc:	08001be9 	.word	0x08001be9
 8001be0:	08001c51 	.word	0x08001c51
 8001be4:	08001c65 	.word	0x08001c65
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	18d1      	adds	r1, r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	69f8      	ldr	r0, [r7, #28]
 8001c08:	f7ff ff7a 	bl	8001b00 <prvInsertTimerInActiveList>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d063      	beq.n	8001cda <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d009      	beq.n	8001c34 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	4413      	add	r3, r2
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	69f8      	ldr	r0, [r7, #28]
 8001c2e:	f7ff fe71 	bl	8001914 <prvReloadTimer>
 8001c32:	e008      	b.n	8001c46 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	69f8      	ldr	r0, [r7, #28]
 8001c4c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001c4e:	e044      	b.n	8001cda <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001c62:	e03a      	b.n	8001cda <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10a      	bne.n	8001c9a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8001c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c88:	f383 8811 	msr	BASEPRI, r3
 8001c8c:	f3bf 8f6f 	isb	sy
 8001c90:	f3bf 8f4f 	dsb	sy
 8001c94:	617b      	str	r3, [r7, #20]
    }
 8001c96:	bf00      	nop
 8001c98:	e7fe      	b.n	8001c98 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	18d1      	adds	r1, r2, r3
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	69f8      	ldr	r0, [r7, #28]
 8001ca8:	f7ff ff2a 	bl	8001b00 <prvInsertTimerInActiveList>
                        break;
 8001cac:	e015      	b.n	8001cda <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d103      	bne.n	8001cc4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8001cbc:	69f8      	ldr	r0, [r7, #28]
 8001cbe:	f000 fb3d 	bl	800233c <vPortFree>
 8001cc2:	e00a      	b.n	8001cda <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001cd6:	e000      	b.n	8001cda <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001cd8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <prvProcessReceivedCommands+0x178>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f107 0108 	add.w	r1, r7, #8
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fc15 	bl	8000514 <xQueueReceive>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f47f af4d 	bne.w	8001b8c <prvProcessReceivedCommands+0x8>
        }
    }
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000198 	.word	0x20000198

08001d00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001d06:	e009      	b.n	8001d1c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <prvSwitchTimerLists+0x44>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001d12:	f04f 31ff 	mov.w	r1, #4294967295
 8001d16:	6838      	ldr	r0, [r7, #0]
 8001d18:	f7ff fe1e 	bl	8001958 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <prvSwitchTimerLists+0x44>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <prvSwitchTimerLists+0x44>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <prvSwitchTimerLists+0x48>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <prvSwitchTimerLists+0x44>)
 8001d32:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <prvSwitchTimerLists+0x48>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
    }
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000190 	.word	0x20000190
 8001d48:	20000194 	.word	0x20000194

08001d4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001d50:	f000 f962 	bl	8002018 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <prvCheckForValidListAndQueue+0x54>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d11d      	bne.n	8001d98 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001d5c:	4811      	ldr	r0, [pc, #68]	; (8001da4 <prvCheckForValidListAndQueue+0x58>)
 8001d5e:	f7fe fa47 	bl	80001f0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001d62:	4811      	ldr	r0, [pc, #68]	; (8001da8 <prvCheckForValidListAndQueue+0x5c>)
 8001d64:	f7fe fa44 	bl	80001f0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <prvCheckForValidListAndQueue+0x60>)
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <prvCheckForValidListAndQueue+0x58>)
 8001d6c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <prvCheckForValidListAndQueue+0x64>)
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <prvCheckForValidListAndQueue+0x5c>)
 8001d72:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001d74:	2200      	movs	r2, #0
 8001d76:	210c      	movs	r1, #12
 8001d78:	200a      	movs	r0, #10
 8001d7a:	f7fe fb59 	bl	8000430 <xQueueGenericCreate>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <prvCheckForValidListAndQueue+0x54>)
 8001d82:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <prvCheckForValidListAndQueue+0x54>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <prvCheckForValidListAndQueue+0x54>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4908      	ldr	r1, [pc, #32]	; (8001db4 <prvCheckForValidListAndQueue+0x68>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fd2c 	bl	80007f0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001d98:	f000 f96e 	bl	8002078 <vPortExitCritical>
    }
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000198 	.word	0x20000198
 8001da4:	20000168 	.word	0x20000168
 8001da8:	2000017c 	.word	0x2000017c
 8001dac:	20000190 	.word	0x20000190
 8001db0:	20000194 	.word	0x20000194
 8001db4:	0800271c 	.word	0x0800271c

08001db8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3b04      	subs	r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f023 0201 	bic.w	r2, r3, #1
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3b04      	subs	r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001de8:	4a0c      	ldr	r2, [pc, #48]	; (8001e1c <pxPortInitialiseStack+0x64>)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3b14      	subs	r3, #20
 8001df2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3b04      	subs	r3, #4
 8001dfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f06f 0202 	mvn.w	r2, #2
 8001e06:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3b20      	subs	r3, #32
 8001e0c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	08001e21 	.word	0x08001e21

08001e20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <prvTaskExitError+0x54>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e32:	d00a      	beq.n	8001e4a <prvTaskExitError+0x2a>
        __asm volatile
 8001e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e38:	f383 8811 	msr	BASEPRI, r3
 8001e3c:	f3bf 8f6f 	isb	sy
 8001e40:	f3bf 8f4f 	dsb	sy
 8001e44:	60fb      	str	r3, [r7, #12]
    }
 8001e46:	bf00      	nop
 8001e48:	e7fe      	b.n	8001e48 <prvTaskExitError+0x28>
        __asm volatile
 8001e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4e:	f383 8811 	msr	BASEPRI, r3
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	60bb      	str	r3, [r7, #8]
    }
 8001e5c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001e5e:	bf00      	nop
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0fc      	beq.n	8001e60 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001e66:	bf00      	nop
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	20000004 	.word	0x20000004
	...

08001e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <pxCurrentTCBConst2>)
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	6808      	ldr	r0, [r1, #0]
 8001e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e8a:	f380 8809 	msr	PSP, r0
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	f04f 0000 	mov.w	r0, #0
 8001e96:	f380 8811 	msr	BASEPRI, r0
 8001e9a:	4770      	bx	lr
 8001e9c:	f3af 8000 	nop.w

08001ea0 <pxCurrentTCBConst2>:
 8001ea0:	20000064 	.word	0x20000064
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop

08001ea8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001ea8:	4808      	ldr	r0, [pc, #32]	; (8001ecc <prvPortStartFirstTask+0x24>)
 8001eaa:	6800      	ldr	r0, [r0, #0]
 8001eac:	6800      	ldr	r0, [r0, #0]
 8001eae:	f380 8808 	msr	MSP, r0
 8001eb2:	f04f 0000 	mov.w	r0, #0
 8001eb6:	f380 8814 	msr	CONTROL, r0
 8001eba:	b662      	cpsie	i
 8001ebc:	b661      	cpsie	f
 8001ebe:	f3bf 8f4f 	dsb	sy
 8001ec2:	f3bf 8f6f 	isb	sy
 8001ec6:	df00      	svc	0
 8001ec8:	bf00      	nop
 8001eca:	0000      	.short	0x0000
 8001ecc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop

08001ed4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <xPortStartScheduler+0x120>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <xPortStartScheduler+0x124>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d10a      	bne.n	8001efa <xPortStartScheduler+0x26>
        __asm volatile
 8001ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee8:	f383 8811 	msr	BASEPRI, r3
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	f3bf 8f4f 	dsb	sy
 8001ef4:	613b      	str	r3, [r7, #16]
    }
 8001ef6:	bf00      	nop
 8001ef8:	e7fe      	b.n	8001ef8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001efa:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <xPortStartScheduler+0x120>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a3f      	ldr	r2, [pc, #252]	; (8001ffc <xPortStartScheduler+0x128>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d10a      	bne.n	8001f1a <xPortStartScheduler+0x46>
        __asm volatile
 8001f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f08:	f383 8811 	msr	BASEPRI, r3
 8001f0c:	f3bf 8f6f 	isb	sy
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	60fb      	str	r3, [r7, #12]
    }
 8001f16:	bf00      	nop
 8001f18:	e7fe      	b.n	8001f18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001f1a:	4b39      	ldr	r3, [pc, #228]	; (8002000 <xPortStartScheduler+0x12c>)
 8001f1c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	22ff      	movs	r2, #255	; 0xff
 8001f2a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b31      	ldr	r3, [pc, #196]	; (8002004 <xPortStartScheduler+0x130>)
 8001f40:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001f42:	4b31      	ldr	r3, [pc, #196]	; (8002008 <xPortStartScheduler+0x134>)
 8001f44:	2207      	movs	r2, #7
 8001f46:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f48:	e009      	b.n	8001f5e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <xPortStartScheduler+0x134>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	4a2d      	ldr	r2, [pc, #180]	; (8002008 <xPortStartScheduler+0x134>)
 8001f52:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f66:	2b80      	cmp	r3, #128	; 0x80
 8001f68:	d0ef      	beq.n	8001f4a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <xPortStartScheduler+0x134>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f1c3 0307 	rsb	r3, r3, #7
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d00a      	beq.n	8001f8c <xPortStartScheduler+0xb8>
        __asm volatile
 8001f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7a:	f383 8811 	msr	BASEPRI, r3
 8001f7e:	f3bf 8f6f 	isb	sy
 8001f82:	f3bf 8f4f 	dsb	sy
 8001f86:	60bb      	str	r3, [r7, #8]
    }
 8001f88:	bf00      	nop
 8001f8a:	e7fe      	b.n	8001f8a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <xPortStartScheduler+0x134>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <xPortStartScheduler+0x134>)
 8001f94:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <xPortStartScheduler+0x134>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f9e:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <xPortStartScheduler+0x134>)
 8001fa0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <xPortStartScheduler+0x138>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a17      	ldr	r2, [pc, #92]	; (800200c <xPortStartScheduler+0x138>)
 8001fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <xPortStartScheduler+0x138>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a14      	ldr	r2, [pc, #80]	; (800200c <xPortStartScheduler+0x138>)
 8001fbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001fc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001fc2:	f000 f8db 	bl	800217c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <xPortStartScheduler+0x13c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001fcc:	f000 f8f0 	bl	80021b0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <xPortStartScheduler+0x140>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <xPortStartScheduler+0x140>)
 8001fd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001fda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001fdc:	f7ff ff64 	bl	8001ea8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001fe0:	f7ff f8f2 	bl	80011c8 <vTaskSwitchContext>
    prvTaskExitError();
 8001fe4:	f7ff ff1c 	bl	8001e20 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00
 8001ff8:	410fc271 	.word	0x410fc271
 8001ffc:	410fc270 	.word	0x410fc270
 8002000:	e000e400 	.word	0xe000e400
 8002004:	200001a4 	.word	0x200001a4
 8002008:	200001a8 	.word	0x200001a8
 800200c:	e000ed20 	.word	0xe000ed20
 8002010:	20000004 	.word	0x20000004
 8002014:	e000ef34 	.word	0xe000ef34

08002018 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
        __asm volatile
 800201e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002022:	f383 8811 	msr	BASEPRI, r3
 8002026:	f3bf 8f6f 	isb	sy
 800202a:	f3bf 8f4f 	dsb	sy
 800202e:	607b      	str	r3, [r7, #4]
    }
 8002030:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <vPortEnterCritical+0x58>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3301      	adds	r3, #1
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <vPortEnterCritical+0x58>)
 800203a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <vPortEnterCritical+0x58>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10f      	bne.n	8002064 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <vPortEnterCritical+0x5c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <vPortEnterCritical+0x4c>
        __asm volatile
 800204e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002052:	f383 8811 	msr	BASEPRI, r3
 8002056:	f3bf 8f6f 	isb	sy
 800205a:	f3bf 8f4f 	dsb	sy
 800205e:	603b      	str	r3, [r7, #0]
    }
 8002060:	bf00      	nop
 8002062:	e7fe      	b.n	8002062 <vPortEnterCritical+0x4a>
    }
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	20000004 	.word	0x20000004
 8002074:	e000ed04 	.word	0xe000ed04

08002078 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <vPortExitCritical+0x50>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10a      	bne.n	800209c <vPortExitCritical+0x24>
        __asm volatile
 8002086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208a:	f383 8811 	msr	BASEPRI, r3
 800208e:	f3bf 8f6f 	isb	sy
 8002092:	f3bf 8f4f 	dsb	sy
 8002096:	607b      	str	r3, [r7, #4]
    }
 8002098:	bf00      	nop
 800209a:	e7fe      	b.n	800209a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <vPortExitCritical+0x50>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <vPortExitCritical+0x50>)
 80020a4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <vPortExitCritical+0x50>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <vPortExitCritical+0x42>
 80020ae:	2300      	movs	r3, #0
 80020b0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80020b8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000004 	.word	0x20000004
 80020cc:	00000000 	.word	0x00000000

080020d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80020d0:	f3ef 8009 	mrs	r0, PSP
 80020d4:	f3bf 8f6f 	isb	sy
 80020d8:	4b15      	ldr	r3, [pc, #84]	; (8002130 <pxCurrentTCBConst>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	f01e 0f10 	tst.w	lr, #16
 80020e0:	bf08      	it	eq
 80020e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80020e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ea:	6010      	str	r0, [r2, #0]
 80020ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80020f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80020f4:	f380 8811 	msr	BASEPRI, r0
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	f3bf 8f6f 	isb	sy
 8002100:	f7ff f862 	bl	80011c8 <vTaskSwitchContext>
 8002104:	f04f 0000 	mov.w	r0, #0
 8002108:	f380 8811 	msr	BASEPRI, r0
 800210c:	bc09      	pop	{r0, r3}
 800210e:	6819      	ldr	r1, [r3, #0]
 8002110:	6808      	ldr	r0, [r1, #0]
 8002112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002116:	f01e 0f10 	tst.w	lr, #16
 800211a:	bf08      	it	eq
 800211c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002120:	f380 8809 	msr	PSP, r0
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	f3af 8000 	nop.w

08002130 <pxCurrentTCBConst>:
 8002130:	20000064 	.word	0x20000064
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop

08002138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
        __asm volatile
 800213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002142:	f383 8811 	msr	BASEPRI, r3
 8002146:	f3bf 8f6f 	isb	sy
 800214a:	f3bf 8f4f 	dsb	sy
 800214e:	607b      	str	r3, [r7, #4]
    }
 8002150:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002152:	f7fe ff23 	bl	8000f9c <xTaskIncrementTick>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SysTick_Handler+0x40>)
 800215e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	2300      	movs	r3, #0
 8002166:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f383 8811 	msr	BASEPRI, r3
    }
 800216e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	e000ed04 	.word	0xe000ed04

0800217c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <vPortSetupTimerInterrupt+0x28>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <vPortSetupTimerInterrupt+0x2c>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <vPortSetupTimerInterrupt+0x30>)
 800218e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002192:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <vPortSetupTimerInterrupt+0x28>)
 8002196:	2207      	movs	r2, #7
 8002198:	601a      	str	r2, [r3, #0]
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000e010 	.word	0xe000e010
 80021a8:	e000e018 	.word	0xe000e018
 80021ac:	e000e014 	.word	0xe000e014

080021b0 <vPortEnableVFP>:

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80021b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80021c0 <vPortEnableVFP+0x10>
 80021b4:	6801      	ldr	r1, [r0, #0]
 80021b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80021ba:	6001      	str	r1, [r0, #0]
 80021bc:	4770      	bx	lr
 80021be:	0000      	.short	0x0000
 80021c0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop

080021c8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80021d4:	f7fe fdc8 	bl	8000d68 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80021d8:	4b53      	ldr	r3, [pc, #332]	; (8002328 <pvPortMalloc+0x160>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80021e0:	f000 f908 	bl	80023f4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d012      	beq.n	8002210 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80021ea:	2208      	movs	r2, #8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	3308      	adds	r3, #8
 80021f6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d804      	bhi.n	800220c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	4413      	add	r3, r2
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	e001      	b.n	8002210 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db70      	blt.n	80022f8 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d06d      	beq.n	80022f8 <pvPortMalloc+0x130>
 800221c:	4b43      	ldr	r3, [pc, #268]	; (800232c <pvPortMalloc+0x164>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	d868      	bhi.n	80022f8 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <pvPortMalloc+0x168>)
 8002228:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <pvPortMalloc+0x168>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002230:	e004      	b.n	800223c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	d903      	bls.n	800224e <pvPortMalloc+0x86>
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f1      	bne.n	8002232 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800224e:	4b36      	ldr	r3, [pc, #216]	; (8002328 <pvPortMalloc+0x160>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	429a      	cmp	r2, r3
 8002256:	d04f      	beq.n	80022f8 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2208      	movs	r2, #8
 800225e:	4413      	add	r3, r2
 8002260:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	1ad2      	subs	r2, r2, r3
 8002272:	2308      	movs	r3, #8
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	429a      	cmp	r2, r3
 8002278:	d91f      	bls.n	80022ba <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4413      	add	r3, r2
 8002280:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <pvPortMalloc+0xda>
        __asm volatile
 800228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002290:	f383 8811 	msr	BASEPRI, r3
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	613b      	str	r3, [r7, #16]
    }
 800229e:	bf00      	nop
 80022a0:	e7fe      	b.n	80022a0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	1ad2      	subs	r2, r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80022b4:	6978      	ldr	r0, [r7, #20]
 80022b6:	f000 f8f9 	bl	80024ac <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <pvPortMalloc+0x164>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	4a19      	ldr	r2, [pc, #100]	; (800232c <pvPortMalloc+0x164>)
 80022c6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <pvPortMalloc+0x164>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <pvPortMalloc+0x16c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d203      	bcs.n	80022dc <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80022d4:	4b15      	ldr	r3, [pc, #84]	; (800232c <pvPortMalloc+0x164>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <pvPortMalloc+0x16c>)
 80022da:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <pvPortMalloc+0x170>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a10      	ldr	r2, [pc, #64]	; (8002338 <pvPortMalloc+0x170>)
 80022f6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80022f8:	f7fe fd44 	bl	8000d84 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <pvPortMalloc+0x154>
        __asm volatile
 8002306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230a:	f383 8811 	msr	BASEPRI, r3
 800230e:	f3bf 8f6f 	isb	sy
 8002312:	f3bf 8f4f 	dsb	sy
 8002316:	60fb      	str	r3, [r7, #12]
    }
 8002318:	bf00      	nop
 800231a:	e7fe      	b.n	800231a <pvPortMalloc+0x152>
    return pvReturn;
 800231c:	69fb      	ldr	r3, [r7, #28]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3728      	adds	r7, #40	; 0x28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20012db4 	.word	0x20012db4
 800232c:	20012db8 	.word	0x20012db8
 8002330:	20012dac 	.word	0x20012dac
 8002334:	20012dbc 	.word	0x20012dbc
 8002338:	20012dc0 	.word	0x20012dc0

0800233c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d049      	beq.n	80023e2 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800234e:	2308      	movs	r3, #8
 8002350:	425b      	negs	r3, r3
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4413      	add	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <vPortFree+0x3e>
        __asm volatile
 8002364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002368:	f383 8811 	msr	BASEPRI, r3
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	60fb      	str	r3, [r7, #12]
    }
 8002376:	bf00      	nop
 8002378:	e7fe      	b.n	8002378 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <vPortFree+0x5c>
        __asm volatile
 8002382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002386:	f383 8811 	msr	BASEPRI, r3
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	60bb      	str	r3, [r7, #8]
    }
 8002394:	bf00      	nop
 8002396:	e7fe      	b.n	8002396 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	0fdb      	lsrs	r3, r3, #31
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01c      	beq.n	80023e2 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d118      	bne.n	80023e2 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80023bc:	f7fe fcd4 	bl	8000d68 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <vPortFree+0xb0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <vPortFree+0xb0>)
 80023cc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80023ce:	6938      	ldr	r0, [r7, #16]
 80023d0:	f000 f86c 	bl	80024ac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <vPortFree+0xb4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3301      	adds	r3, #1
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <vPortFree+0xb4>)
 80023dc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80023de:	f7fe fcd1 	bl	8000d84 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20012db8 	.word	0x20012db8
 80023f0:	20012dc4 	.word	0x20012dc4

080023f4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80023fa:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80023fe:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002400:	4b25      	ldr	r3, [pc, #148]	; (8002498 <prvHeapInit+0xa4>)
 8002402:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00c      	beq.n	8002428 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3307      	adds	r3, #7
 8002412:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f023 0307 	bic.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <prvHeapInit+0xa4>)
 8002424:	4413      	add	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800242c:	4a1b      	ldr	r2, [pc, #108]	; (800249c <prvHeapInit+0xa8>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <prvHeapInit+0xa8>)
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4413      	add	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002440:	2208      	movs	r2, #8
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0307 	bic.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <prvHeapInit+0xac>)
 8002454:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002456:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <prvHeapInit+0xac>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <prvHeapInit+0xac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <prvHeapInit+0xac>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <prvHeapInit+0xb0>)
 8002482:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <prvHeapInit+0xb4>)
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	200001ac 	.word	0x200001ac
 800249c:	20012dac 	.word	0x20012dac
 80024a0:	20012db4 	.word	0x20012db4
 80024a4:	20012dbc 	.word	0x20012dbc
 80024a8:	20012db8 	.word	0x20012db8

080024ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80024b4:	4b28      	ldr	r3, [pc, #160]	; (8002558 <prvInsertBlockIntoFreeList+0xac>)
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e002      	b.n	80024c0 <prvInsertBlockIntoFreeList+0x14>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d8f7      	bhi.n	80024ba <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	4413      	add	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d108      	bne.n	80024ee <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	441a      	add	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	441a      	add	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d118      	bne.n	8002534 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <prvInsertBlockIntoFreeList+0xb0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d00d      	beq.n	800252a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	441a      	add	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e008      	b.n	800253c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <prvInsertBlockIntoFreeList+0xb0>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e003      	b.n	800253c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d002      	beq.n	800254a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20012dac 	.word	0x20012dac
 800255c:	20012db4 	.word	0x20012db4

08002560 <main>:

#define GPIODEN					1U<<3	// Set a 3rd bit in RCC_AHB1ENR
#define LED_PIN					1U<<13	// Set a 13th bit in GPIOD_ODR

int main()
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	/* Enable a clock for GPIOD */
	RCC_AHB1ENR |= GPIODEN;
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <main+0x38>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <main+0x38>)
 800256a:	f043 0308 	orr.w	r3, r3, #8
 800256e:	6013      	str	r3, [r2, #0]

	/* Set the mode of the GPIO Pin to Output */
	GPIOD_MODER |= (1U<<26);
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <main+0x3c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a09      	ldr	r2, [pc, #36]	; (800259c <main+0x3c>)
 8002576:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800257a:	6013      	str	r3, [r2, #0]
	GPIOD_MODER &= ~(1U<<27);
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <main+0x3c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a06      	ldr	r2, [pc, #24]	; (800259c <main+0x3c>)
 8002582:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002586:	6013      	str	r3, [r2, #0]

	taskSetup();
 8002588:	f000 f81a 	bl	80025c0 <taskSetup>
	initTasks();
 800258c:	f000 f848 	bl	8002620 <initTasks>
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40023830 	.word	0x40023830
 800259c:	40020c00 	.word	0x40020c00

080025a0 <toggleLED>:

void toggleLED(void) {
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
	/* Toggle a LED for every 1 Second */
	GPIOD_ODR ^= LED_PIN;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <toggleLED+0x1c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <toggleLED+0x1c>)
 80025aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025ae:	6013      	str	r3, [r2, #0]
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40020c14 	.word	0x40020c14

080025c0 <taskSetup>:
TaskHandle_t xTimerTaskHandle = NULL;

/**
 * @brief This function is called, to setup/create required tasks
 */
void taskSetup(void) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	timerTaskStart();	// Create a task
 80025c4:	f000 f802 	bl	80025cc <timerTaskStart>
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}

080025cc <timerTaskStart>:

/**
 * @brief This function is called, to create a timer task
 */
void timerTaskStart(void) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af02      	add	r7, sp, #8
	/* Create a new Timer Task */
	xTaskCreate(
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <timerTaskStart+0x20>)
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	2301      	movs	r3, #1
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2300      	movs	r3, #0
 80025dc:	2282      	movs	r2, #130	; 0x82
 80025de:	4904      	ldr	r1, [pc, #16]	; (80025f0 <timerTaskStart+0x24>)
 80025e0:	4804      	ldr	r0, [pc, #16]	; (80025f4 <timerTaskStart+0x28>)
 80025e2:	f7fe f987 	bl	80008f4 <xTaskCreate>
			"Timer Task",				// Name for a task
			configMINIMAL_STACK_SIZE,	// Stack size
			NULL,						// Task parameters
			tskIDLE_PRIORITY + 1,			// Priority of task
			&xTimerTaskHandle);			// Task handle
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20012dc8 	.word	0x20012dc8
 80025f0:	08002724 	.word	0x08002724
 80025f4:	080025f9 	.word	0x080025f9

080025f8 <timerTask>:

/**
 * brief This will define task function
 */
void timerTask(void* pvParameters) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;

	const TickType_t xTimerPeriod = pdMS_TO_TICKS(1000); // 1000ms = 1 second
 8002600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002604:	60fb      	str	r3, [r7, #12]

	/* Initialize the last wake time */
	xLastWakeTime = xTaskGetTickCount();
 8002606:	f7fe fcb9 	bl	8000f7c <xTaskGetTickCount>
 800260a:	4603      	mov	r3, r0
 800260c:	60bb      	str	r3, [r7, #8]

	while (1)
	{
		/* Task function */
		toggleLED();
 800260e:	f7ff ffc7 	bl	80025a0 <toggleLED>

		/* Delay until the next timer period */
		vTaskDelayUntil(&xLastWakeTime, xTimerPeriod);
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	68f9      	ldr	r1, [r7, #12]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fad5 	bl	8000bc8 <xTaskDelayUntil>
		toggleLED();
 800261e:	e7f6      	b.n	800260e <timerTask+0x16>

08002620 <initTasks>:
}

/**
 * @brief This function is called, to start the task scheduler
 */
void initTasks(void) {
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	vTaskStartScheduler();
 8002624:	f7fe fb4e 	bl	8000cc4 <vTaskStartScheduler>
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}

0800262c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800262c:	480d      	ldr	r0, [pc, #52]	; (8002664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800262e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002630:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002634:	480c      	ldr	r0, [pc, #48]	; (8002668 <LoopForever+0x6>)
  ldr r1, =_edata
 8002636:	490d      	ldr	r1, [pc, #52]	; (800266c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <LoopForever+0xe>)
  movs r3, #0
 800263a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800263c:	e002      	b.n	8002644 <LoopCopyDataInit>

0800263e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002642:	3304      	adds	r3, #4

08002644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002648:	d3f9      	bcc.n	800263e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800264c:	4c0a      	ldr	r4, [pc, #40]	; (8002678 <LoopForever+0x16>)
  movs r3, #0
 800264e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002650:	e001      	b.n	8002656 <LoopFillZerobss>

08002652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002654:	3204      	adds	r2, #4

08002656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002658:	d3fb      	bcc.n	8002652 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800265a:	f000 f811 	bl	8002680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800265e:	f7ff ff7f 	bl	8002560 <main>

08002662 <LoopForever>:

LoopForever:
  b LoopForever
 8002662:	e7fe      	b.n	8002662 <LoopForever>
  ldr   r0, =_estack
 8002664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800266c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002670:	08002738 	.word	0x08002738
  ldr r2, =_sbss
 8002674:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002678:	20012dcc 	.word	0x20012dcc

0800267c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800267c:	e7fe      	b.n	800267c <ADC_IRQHandler>
	...

08002680 <__libc_init_array>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	4d0d      	ldr	r5, [pc, #52]	; (80026b8 <__libc_init_array+0x38>)
 8002684:	4c0d      	ldr	r4, [pc, #52]	; (80026bc <__libc_init_array+0x3c>)
 8002686:	1b64      	subs	r4, r4, r5
 8002688:	10a4      	asrs	r4, r4, #2
 800268a:	2600      	movs	r6, #0
 800268c:	42a6      	cmp	r6, r4
 800268e:	d109      	bne.n	80026a4 <__libc_init_array+0x24>
 8002690:	4d0b      	ldr	r5, [pc, #44]	; (80026c0 <__libc_init_array+0x40>)
 8002692:	4c0c      	ldr	r4, [pc, #48]	; (80026c4 <__libc_init_array+0x44>)
 8002694:	f000 f82e 	bl	80026f4 <_init>
 8002698:	1b64      	subs	r4, r4, r5
 800269a:	10a4      	asrs	r4, r4, #2
 800269c:	2600      	movs	r6, #0
 800269e:	42a6      	cmp	r6, r4
 80026a0:	d105      	bne.n	80026ae <__libc_init_array+0x2e>
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a8:	4798      	blx	r3
 80026aa:	3601      	adds	r6, #1
 80026ac:	e7ee      	b.n	800268c <__libc_init_array+0xc>
 80026ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b2:	4798      	blx	r3
 80026b4:	3601      	adds	r6, #1
 80026b6:	e7f2      	b.n	800269e <__libc_init_array+0x1e>
 80026b8:	08002730 	.word	0x08002730
 80026bc:	08002730 	.word	0x08002730
 80026c0:	08002730 	.word	0x08002730
 80026c4:	08002734 	.word	0x08002734

080026c8 <memcpy>:
 80026c8:	440a      	add	r2, r1
 80026ca:	4291      	cmp	r1, r2
 80026cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80026d0:	d100      	bne.n	80026d4 <memcpy+0xc>
 80026d2:	4770      	bx	lr
 80026d4:	b510      	push	{r4, lr}
 80026d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026de:	4291      	cmp	r1, r2
 80026e0:	d1f9      	bne.n	80026d6 <memcpy+0xe>
 80026e2:	bd10      	pop	{r4, pc}

080026e4 <memset>:
 80026e4:	4402      	add	r2, r0
 80026e6:	4603      	mov	r3, r0
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d100      	bne.n	80026ee <memset+0xa>
 80026ec:	4770      	bx	lr
 80026ee:	f803 1b01 	strb.w	r1, [r3], #1
 80026f2:	e7f9      	b.n	80026e8 <memset+0x4>

080026f4 <_init>:
 80026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f6:	bf00      	nop
 80026f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fa:	bc08      	pop	{r3}
 80026fc:	469e      	mov	lr, r3
 80026fe:	4770      	bx	lr

08002700 <_fini>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	bf00      	nop
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr
